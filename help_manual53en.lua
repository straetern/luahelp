return 
{ title = "Lua 5.3 Reference Manual", typ = 1;
"by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes",
"\4",
"Copyright &copy; 2015 Lua.org, PUC-Rio.",
"Freely available under the terms of the Lua license.",
"\4",
"contents .",
"index .",
"other versions",
"\4",
{ title = "1. Introduction", typ = 1;
"\4",
"Lua is an extension programming language designed to support general procedural programming with data description facilities.",
"Lua also offers good support for object-oriented programming, functional programming, and data-driven programming.",
"Lua is intended to be used as a powerful, lightweight, embeddable scripting language for any program that needs one.",
"Lua is implemented as a library, written in clean C, the common subset of Standard C and C++.",
"\4",
"As an extension language, Lua has no notion of a \"main\" program: it only works embedded in a host client, called the embedding program or simply the host.",
"The host program can invoke functions to execute a piece of Lua code, can write and read Lua variables, and can register C functions to be called by Lua code.",
"Through the use of C functions, Lua can be augmented to cope with a wide range of different domains, thus creating customized programming languages sharing a syntactical framework.",
"The Lua distribution includes a sample host program called \"lua\", which uses the Lua library to offer a complete, standalone Lua interpreter, for interactive or batch use.",
"\4",
"Lua is free software, and is provided as usual with no guarantees, as stated in its license.",
"The implementation described in this manual is available at Lua's official web site, \"www.lua.org\".",
"\4",
"Like any other reference manual, this document is dry in places.",
"For a discussion of the decisions behind the design of Lua, see the technical papers available at Lua's web site.",
"For a detailed introduction to programming in Lua, see Roberto's book, Programming in Lua.",
},
{ title = "2. Basic Concepts", typ = 1;
"\4",
"This section describes the basic concepts of the language.",
{ title = "2.1 Values and Types", typ = 1;
"\4",
"Lua is a dynamically typed language.",
"This means that variables do not have types; only values do.",
"There are no type definitions in the language.",
"All values carry their own type.",
"\4",
"All values in Lua are first-class values.",
"This means that all values can be stored in variables, passed as arguments to other functions, and returned as results.",
"\4",
"There are eight basic types in Lua: nil, boolean, number, string, function, userdata, thread, and table.",
"Nil is the type of the value nil, whose main property is to be different from any other value; it usually represents the absence of a useful value.",
"Boolean is the type of the values false and true.",
"Both nil and false make a condition false; any other value makes it true.",
"Number represents both integer numbers and real (floating-point) numbers.",
"String represents immutable sequences of bytes.",
"Lua is 8-bit clean: strings can contain any 8-bit value, including embedded zeros (\"\\0\").",
"Lua is also encoding-agnostic; it makes no assumptions about the contents of a string.",
"\4",
"The type number uses two internal representations, one called integer and the other called float.",
"Lua has explicit rules about when each representation is used, but it also converts between them automatically as needed (see §3.4.3).",
"Therefore, the programmer may choose to mostly ignore the difference between integers and floats or to assume complete control over the representation of each number.",
"Standard Lua uses 64-bit integers and double-precision (64-bit) floats, but you can also compile Lua so that it uses 32-bit integers and/or single-precision (32-bit) floats.",
"The option with 32 bits for both integers and floats is particularly attractive for small machines and embedded systems.",
"(See macro \"LUA_32BITS\" in file \"luaconf.h\".)",
"\4",
"Lua can call (and manipulate) functions written in Lua and functions written in C (see §3.4.10).",
"Both are represented by the type function.",
"\4",
"The type userdata is provided to allow arbitrary C data to be stored in Lua variables.",
"A userdata value represents a block of raw memory.",
"There are two kinds of userdata: full userdata, which is an object with a block of memory managed by Lua, and light userdata, which is simply a C pointer value.",
"Userdata has no predefined operations in Lua, except assignment and identity test.",
"By using metatables, the programmer can define operations for full userdata values (see §2.4).",
"Userdata values cannot be created or modified in Lua, only through the C API.",
"This guarantees the integrity of data owned by the host program.",
"\4",
"The type thread represents independent threads of execution and it is used to implement coroutines (see §2.6).",
"Lua threads are not related to operating-system threads.",
"Lua supports coroutines on all systems, even those that do not support threads natively.",
"\4",
"The type table implements associative arrays, that is, arrays that can be indexed not only with numbers, but with any Lua value except nil and NaN.",
"(Not a Number is a special numeric value used to represent undefined or unrepresentable results, such as \"0/0\".)",
"Tables can be heterogeneous; that is, they can contain values of all types (except nil).",
"Any key with value nil is not considered part of the table.",
"Conversely, any key that is not part of a table has an associated value nil.",
"\4",
"Tables are the sole data-structuring mechanism in Lua; they can be used to represent ordinary arrays, sequences, symbol tables, sets, records, graphs, trees, etc.",
"To represent records, Lua uses the field name as an index.",
"The language supports this representation by providing \"a.name\" as syntactic sugar for \"a['name']\".",
"There are several convenient ways to create tables in Lua (see §3.4.9).",
"\4",
"We use the term sequence to denote a table where the set of all positive numeric keys is equal to {1..n} for some non-negative integer n, which is called the length of the sequence (see §3.4.7).",
"\4",
"Like indices, the values of table fields can be of any type.",
"In particular, because functions are first-class values, table fields can contain functions.",
"Thus tables can also carry methods (see §3.4.11).",
"\4",
"The indexing of tables follows the definition of raw equality in the language.",
"The expressions \"a[i]\" and \"a[j]\" denote the same table element if and only if \"i\" and \"j\" are raw equal (that is, equal without metamethods).",
"In particular, floats with integral values are equal to their respective integers (e.g., \"1.0 == 1\").",
"To avoid ambiguities, any float with integral value used as a key is converted to its respective integer.",
"For instance, if you write \"a[2.0] = true\", the actual key inserted into the table will be the integer \"2\".",
"(On the other hand, 2 and \"2\" are different Lua values and therefore denote different table entries.)",
"\4",
"Tables, functions, threads, and (full) userdata values are objects: variables do not actually contain these values, only references to them.",
"Assignment, parameter passing, and function returns always manipulate references to such values; these operations do not imply any kind of copy.",
"\4",
"The library function \"type\" returns a string describing the type of a given value (see §6.1).",
},
{ title = "2.2 Environments and the Global Environment", typ = 1;
"\4",
"As will be discussed in §3.2 and §3.3.3, any reference to a free name (that is, a name not bound to any declaration) \"var\" is syntactically translated to \"_ENV.var\".",
"Moreover, every chunk is compiled in the scope of an external local variable named \"_ENV\" (see §3.3.2), so \"_ENV\" itself is never a free name in a chunk.",
"\4",
"Despite the existence of this external \"_ENV\" variable and the translation of free names, \"_ENV\" is a completely regular name.",
"In particular, you can define new variables and parameters with that name.",
"Each reference to a free name uses the \"_ENV\" that is visible at that point in the program, following the usual visibility rules of Lua (see §3.5).",
"\4",
"Any table used as the value of \"_ENV\" is called an environment.",
"\4",
"Lua keeps a distinguished environment called the global environment.",
"This value is kept at a special index in the C registry (see §4.5).",
"In Lua, the global variable \"_G\" is initialized with this same value.",
"(\"_G\" is never used internally.)",
"\4",
"When Lua loads a chunk, the default value for its \"_ENV\" upvalue is the global environment (see \"load\").",
"Therefore, by default, free names in Lua code refer to entries in the global environment (and, therefore, they are also called global variables).",
"Moreover, all standard libraries are loaded in the global environment and some functions there operate on that environment.",
"You can use \"load\" (or \"loadfile\") to load a chunk with a different environment.",
"(In C, you have to load the chunk and then change the value of its first upvalue.)",
},
{ title = "2.3 Error Handling", typ = 1;
"\4",
"Because Lua is an embedded extension language, all Lua actions start from C code in the host program calling a function from the Lua library.",
"(When you use Lua standalone, the \"lua\" application is the host program.)",
"Whenever an error occurs during the compilation or execution of a Lua chunk, control returns to the host, which can take appropriate measures (such as printing an error message).",
"\4",
"Lua code can explicitly generate an error by calling the \"error\" function.",
"If you need to catch errors in Lua, you can use \"pcall\" or \"xpcall\" to call a given function in protected mode.",
"\4",
"Whenever there is an error, an error object (also called an error message) is propagated with information about the error.",
"Lua itself only generates errors whose error object is a string, but programs may generate errors with any value as the error object.",
"It is up to the Lua program or its host to handle such error objects.",
"\4",
"When you use \"xpcall\" or \"lua_pcall\", you may give a message handler to be called in case of errors.",
"This function is called with the original error message and returns a new error message.",
"It is called before the error unwinds the stack, so that it can gather more information about the error, for instance by inspecting the stack and creating a stack traceback.",
"This message handler is still protected by the protected call; so, an error inside the message handler will call the message handler again.",
"If this loop goes on for too long, Lua breaks it and returns an appropriate message.",
},
{ title = "2.4 Metatables and Metamethods", typ = 1;
"\4",
"Every value in Lua can have a metatable.",
"This metatable is an ordinary Lua table that defines the behavior of the original value under certain special operations.",
"You can change several aspects of the behavior of operations over a value by setting specific fields in its metatable.",
"For instance, when a non-numeric value is the operand of an addition, Lua checks for a function in the field \"__add\" of the value's metatable.",
"If it finds one, Lua calls this function to perform the addition.",
"\4",
"The keys in a metatable are derived from the event names; the corresponding values are called metamethods.",
"In the previous example, the event is \"add\" and the metamethod is the function that performs the addition.",
"\4",
"You can query the metatable of any value using the \"getmetatable\" function.",
"\4",
"You can replace the metatable of tables using the \"setmetatable\" function.",
"You cannot change the metatable of other types from Lua (except by using the debug library (§6.10)); you must use the C API for that.",
"\4",
"Tables and full userdata have individual metatables (although multiple tables and userdata can share their metatables).",
"Values of all other types share one single metatable per type; that is, there is one single metatable for all numbers, one for all strings, etc.",
"By default, a value has no metatable, but the string library sets a metatable for the string type (see §6.4).",
"\4",
"A metatable controls how an object behaves in arithmetic operations, bitwise operations, order comparisons, concatenation, length operation, calls, and indexing.",
"A metatable also can define a function to be called when a userdata or a table is garbage collected (§2.5).",
"\4",
"A detailed list of events controlled by metatables is given next.",
"Each operation is identified by its corresponding event name.",
"The key for each event is a string with its name prefixed by two underscores, \"__\"; for instance, the key for operation \"add\" is the string \"__add\".",
"Note that queries for metamethods are always raw; the access to a metamethod does not invoke other metamethods.",
"You can emulate how Lua queries a metamethod for an object \"obj\" with the following code:",
"\3     rawget(getmetatable(obj) or {}, \"__\" .. event_name)",
"\4",
"For the unary operators (negation, length, and bitwise not), the metamethod is computed and called with a dummy second operand, equal to the first one.",
"This extra operand is only to simplify Lua's internals (by making these operators behave like a binary operation) and may be removed in future versions.",
"(For most uses this extra operand is irrelevant.)",
"\2\"add\":  the \"+\" operation.",
"If any operand for an addition is not a number (nor a string coercible to a number), Lua will try to call a metamethod.",
"First, Lua will check the first operand (even if it is valid).",
"If that operand does not define a metamethod for the \"__add\" event, then Lua will check the second operand.",
"If Lua can find a metamethod, it calls the metamethod with the two operands as arguments, and the result of the call (adjusted to one value) is the result of the operation.",
"Otherwise, it raises an error.",
"\2\"sub\":  the \"-\" operation.",
"Behavior similar to the \"add\" operation.",
"\2\"mul\":  the \"*\" operation.",
"Behavior similar to the \"add\" operation.",
"\2\"div\":  the \"/\" operation.",
"Behavior similar to the \"add\" operation.",
"\2\"mod\":  the \"%\" operation.",
"Behavior similar to the \"add\" operation.",
"\2\"pow\":  the \"^\" (exponentiation) operation.",
"Behavior similar to the \"add\" operation.",
"\2\"unm\":  the \"-\" (unary minus) operation.",
"Behavior similar to the \"add\" operation.",
"\2\"idiv\":  the \"//\" (floor division) operation.",
"Behavior similar to the \"add\" operation.",
"\2\"band\":  the \"&\" (bitwise and) operation.",
"Behavior similar to the \"add\" operation, except that Lua will try a metamethod if any operator is neither an integer nor a value coercible to an integer (see §3.4.3).",
"\2\"bor\":  the \"|\" (bitwise or) operation.",
"Behavior similar to the \"band\" operation.",
"\2\"bxor\":  the \"~\" (bitwise exclusive or) operation.",
"Behavior similar to the \"band\" operation.",
"\2\"bnot\":  the \"~\" (bitwise unary not) operation.",
"Behavior similar to the \"band\" operation.",
"\2\"shl\":  the \"<<\" (bitwise left shift) operation.",
"Behavior similar to the \"band\" operation.",
"\2\"shr\":  the \">>\" (bitwise right shift) operation.",
"Behavior similar to the \"band\" operation.",
"\2\"concat\":  the \"..\" (concatenation) operation.",
"Behavior similar to the \"add\" operation, except that Lua will try a metamethod if any operator is neither a string nor a number (which is always coercible to a string).",
"\2\"len\":  the \"#\" (length) operation.",
"If the object is not a string, Lua will try its metamethod.",
"If there is a metamethod, Lua calls it with the object as argument, and the result of the call (always adjusted to one value) is the result of the operation.",
"If there is no metamethod but the object is a table, then Lua uses the table length operation (see §3.4.7).",
"Otherwise, Lua raises an error.",
"\2\"eq\":  the \"==\" (equal) operation.",
"Behavior similar to the \"add\" operation, except that Lua will try a metamethod only when the values being compared are either both tables or both full userdata and they are not primitively equal.",
"The result of the call is always converted to a boolean.",
"\2\"lt\":  the \"<\" (less than) operation.",
"Behavior similar to the \"add\" operation, except that Lua will try a metamethod only when the values being compared are neither both numbers nor both strings.",
"The result of the call is always converted to a boolean.",
"\2\"le\":  the \"<=\" (less equal) operation.",
"Unlike other operations, The less-equal operation can use two different events.",
"First, Lua looks for the \"__le\" metamethod in both operands, like in the \"lt\" operation.",
"If it cannot find such a metamethod, then it will try the \"__lt\" event, assuming that \"a <= b\" is equivalent to \"not (b < a)\".",
"As with the other comparison operators, the result is always a boolean.",
"\2\"index\":  The indexing access \"table[key]\".",
"This event happens when \"table\" is not a table or when \"key\" is not present in \"table\".",
"The metamethod is looked up in \"table\".",
"\4",
"Despite the name, the metamethod for this event can be either a function or a table.",
"If it is a function, it is called with \"table\" and \"key\" as arguments.",
"If it is a table, the final result is the result of indexing this table with \"key\".",
"(This indexing is regular, not raw, and therefore can trigger another metamethod.)",
"\2\"newindex\":  The indexing assignment \"table[key] = value\".",
"Like the index event, this event happens when \"table\" is not a table or when \"key\" is not present in \"table\".",
"The metamethod is looked up in \"table\".",
"\4",
"Like with indexing, the metamethod for this event can be either a function or a table.",
"If it is a function, it is called with \"table\", \"key\", and \"value\" as arguments.",
"If it is a table, Lua does an indexing assignment to this table with the same key and value.",
"(This assignment is regular, not raw, and therefore can trigger another metamethod.)",
"\4",
"Whenever there is a \"newindex\" metamethod, Lua does not perform the primitive assignment.",
"(If necessary, the metamethod itself can call \"rawset\" to do the assignment.)",
"\2\"call\":  The call operation \"func(args)\".",
"This event happens when Lua tries to call a non-function value (that is, \"func\" is not a function).",
"The metamethod is looked up in \"func\".",
"If present, the metamethod is called with \"func\" as its first argument, followed by the arguments of the original call (\"args\").",
"\2",
},
{ title = "2.5 Garbage Collection", typ = 1;
"\4",
"Lua performs automatic memory management.",
"This means that you do not have to worry about allocating memory for new objects or freeing it when the objects are no longer needed.",
"Lua manages memory automatically by running a garbage collector to collect all dead objects (that is, objects that are no longer accessible from Lua).",
"All memory used by Lua is subject to automatic management: strings, tables, userdata, functions, threads, internal structures, etc.",
"\4",
"Lua implements an incremental mark-and-sweep collector.",
"It uses two numbers to control its garbage-collection cycles: the garbage-collector pause and the garbage-collector step multiplier.",
"Both use percentage points as units (e.g., a value of 100 means an internal value of 1).",
"\4",
"The garbage-collector pause controls how long the collector waits before starting a new cycle.",
"Larger values make the collector less aggressive.",
"Values smaller than 100 mean the collector will not wait to start a new cycle.",
"A value of 200 means that the collector waits for the total memory in use to double before starting a new cycle.",
"\4",
"The garbage-collector step multiplier controls the relative speed of the collector relative to memory allocation.",
"Larger values make the collector more aggressive but also increase the size of each incremental step.",
"You should not use values smaller than 100, because they make the collector too slow and can result in the collector never finishing a cycle.",
"The default is 200, which means that the collector runs at \"twice\" the speed of memory allocation.",
"\4",
"If you set the step multiplier to a very large number (larger than 10% of the maximum number of bytes that the program may use), the collector behaves like a stop-the-world collector.",
"If you then set the pause to 200, the collector behaves as in old Lua versions, doing a complete collection every time Lua doubles its memory usage.",
"\4",
"You can change these numbers by calling \"lua_gc\" in C or \"collectgarbage\" in Lua.",
"You can also use these functions to control the collector directly (e.g., stop and restart it).",
{ title = "2.5.1 Garbage-Collection Metamethods", typ = 1;
"\4",
"You can set garbage-collector metamethods for tables and, using the C API, for full userdata (see §2.4).",
"These metamethods are also called finalizers.",
"Finalizers allow you to coordinate Lua's garbage collection with external resource management (such as closing files, network or database connections, or freeing your own memory).",
"\4",
"For an object (table or userdata) to be finalized when collected, you must mark it for finalization.",
"You mark an object for finalization when you set its metatable and the metatable has a field indexed by the string \"__gc\".",
"Note that if you set a metatable without a \"__gc\" field and later create that field in the metatable, the object will not be marked for finalization.",
"However, after an object has been marked, you can freely change the \"__gc\" field of its metatable.",
"\4",
"When a marked object becomes garbage, it is not collected immediately by the garbage collector.",
"Instead, Lua puts it in a list.",
"After the collection, Lua goes through that list.",
"For each object in the list, it checks the object's \"__gc\" metamethod: If it is a function, Lua calls it with the object as its single argument; if the metamethod is not a function, Lua simply ignores it.",
"\4",
"At the end of each garbage-collection cycle, the finalizers for objects are called in the reverse order that the objects were marked for finalization, among those collected in that cycle; that is, the first finalizer to be called is the one associated with the object marked last in the program.",
"The execution of each finalizer may occur at any point during the execution of the regular code.",
"\4",
"Because the object being collected must still be used by the finalizer, that object (and other objects accessible only through it) must be resurrected by Lua.",
"Usually, this resurrection is transient, and the object memory is freed in the next garbage-collection cycle.",
"However, if the finalizer stores the object in some global place (e.g., a global variable), then the resurrection is permanent.",
"Moreover, if the finalizer marks a finalizing object for finalization again, its finalizer will be called again in the next cycle where the object is unreachable.",
"In any case, the object memory is freed only in the GC cycle where the object is unreachable and not marked for finalization.",
"\4",
"When you close a state (see \"lua_close\"), Lua calls the finalizers of all objects marked for finalization, following the reverse order that they were marked.",
"If any finalizer marks objects for collection during that phase, these marks have no effect.",
},
{ title = "2.5.2 Weak Tables", typ = 1;
"\4",
"A weak table is a table whose elements are weak references.",
"A weak reference is ignored by the garbage collector.",
"In other words, if the only references to an object are weak references, then the garbage collector will collect that object.",
"\4",
"A weak table can have weak keys, weak values, or both.",
"A table with weak keys allows the collection of its keys, but prevents the collection of its values.",
"A table with both weak keys and weak values allows the collection of both keys and values.",
"In any case, if either the key or the value is collected, the whole pair is removed from the table.",
"The weakness of a table is controlled by the \"__mode\" field of its metatable.",
"If the \"__mode\" field is a string containing the character \"k\", the keys in the table are weak.",
"If \"__mode\" contains \"v\", the values in the table are weak.",
"\4",
"A table with weak keys and strong values is also called an ephemeron table.",
"In an ephemeron table, a value is considered reachable only if its key is reachable.",
"In particular, if the only reference to a key comes through its value, the pair is removed.",
"\4",
"Any change in the weakness of a table may take effect only at the next collect cycle.",
"In particular, if you change the weakness to a stronger mode, Lua may still collect some items from that table before the change takes effect.",
"\4",
"Only objects that have an explicit construction are removed from weak tables.",
"Values, such as numbers and light C functions, are not subject to garbage collection, and therefore are not removed from weak tables (unless their associated values are collected).",
"Although strings are subject to garbage collection, they do not have an explicit construction, and therefore are not removed from weak tables.",
"\4",
"Resurrected objects (that is, objects being finalized and objects accessible only through objects being finalized) have a special behavior in weak tables.",
"They are removed from weak values before running their finalizers, but are removed from weak keys only in the next collection after running their finalizers, when such objects are actually freed.",
"This behavior allows the finalizer to access properties associated with the object through weak tables.",
"\4",
"If a weak table is among the resurrected objects in a collection cycle, it may not be properly cleared until the next cycle.",
},
},
{ title = "2.6 Coroutines", typ = 1;
"\4",
"Lua supports coroutines, also called collaborative multithreading.",
"A coroutine in Lua represents an independent thread of execution.",
"Unlike threads in multithread systems, however, a coroutine only suspends its execution by explicitly calling a yield function.",
"\4",
"You create a coroutine by calling \"coroutine.create\".",
"Its sole argument is a function that is the main function of the coroutine.",
"The \"create\" function only creates a new coroutine and returns a handle to it (an object of type thread); it does not start the coroutine.",
"\4",
"You execute a coroutine by calling \"coroutine.resume\".",
"When you first call \"coroutine.resume\", passing as its first argument a thread returned by \"coroutine.create\", the coroutine starts its execution, at the first line of its main function.",
"Extra arguments passed to \"coroutine.resume\" are passed as arguments to the coroutine's main function.",
"After the coroutine starts running, it runs until it terminates or yields.",
"\4",
"A coroutine can terminate its execution in two ways: normally, when its main function returns (explicitly or implicitly, after the last instruction); and abnormally, if there is an unprotected error.",
"In case of normal termination, \"coroutine.resume\" returns true, plus any values returned by the coroutine main function.",
"In case of errors, \"coroutine.resume\" returns false plus an error message.",
"\4",
"A coroutine yields by calling \"coroutine.yield\".",
"When a coroutine yields, the corresponding \"coroutine.resume\" returns immediately, even if the yield happens inside nested function calls (that is, not in the main function, but in a function directly or indirectly called by the main function).",
"In the case of a yield, \"coroutine.resume\" also returns true, plus any values passed to \"coroutine.yield\".",
"The next time you resume the same coroutine, it continues its execution from the point where it yielded, with the call to \"coroutine.yield\" returning any extra arguments passed to \"coroutine.resume\".",
"\4",
"Like \"coroutine.create\", the \"coroutine.wrap\" function also creates a coroutine, but instead of returning the coroutine itself, it returns a function that, when called, resumes the coroutine.",
"Any arguments passed to this function go as extra arguments to \"coroutine.resume\".",
"\"coroutine.wrap\" returns all the values returned by \"coroutine.resume\", except the first one (the boolean error code).",
"Unlike \"coroutine.resume\", \"coroutine.wrap\" does not catch errors; any error is propagated to the caller.",
"\4",
"As an example of how coroutines work, consider the following code:",
"\3     function foo (a)",
"\3       print(\"foo\", a)",
"\3       return coroutine.yield(2*a)",
"\3     end",
"\3     co = coroutine.create(function (a,b)",
"\3           print(\"co-body\", a, b)",
"\3           local r = foo(a+1)",
"\3           print(\"co-body\", r)",
"\3           local r, s = coroutine.yield(a+b, a-b)",
"\3           print(\"co-body\", r, s)",
"\3           return b, \"end\"",
"\3     end)",
"\3     print(\"main\", coroutine.resume(co, 1, 10))",
"\3     print(\"main\", coroutine.resume(co, \"r\"))",
"\3     print(\"main\", coroutine.resume(co, \"x\", \"y\"))",
"\3     print(\"main\", coroutine.resume(co, \"x\", \"y\"))",
"\4",
"When you run it, it produces the following output:",
"\3     co-body 1       10",
"\3     foo     2",
"\3     main    true    4",
"\3     co-body r",
"\3     main    true    11      -9",
"\3     co-body x       y",
"\3     main    true    10      end",
"\3     main    false   cannot resume dead coroutine",
"\4",
"You can also create and manipulate coroutines through the C API: see functions \"lua_newthread\", \"lua_resume\", and \"lua_yield\".",
},
},
{ title = "3. The Language", typ = 1;
"\4",
"This section describes the lexis, the syntax, and the semantics of Lua.",
"In other words, this section describes which tokens are valid, how they can be combined, and what their combinations mean.",
"\4",
"Language constructs will be explained using the usual extended BNF notation, in which {a} means 0 or more a's, and [a] means an optional a.",
"Non-terminals are shown like non-terminal, keywords are shown like kword, and other terminal symbols are shown like `=’.",
"The complete syntax of Lua can be found in §9 at the end of this manual.",
{ title = "3.1 Lexical Conventions", typ = 1;
"\4",
"Lua is a free-form language.",
"It ignores spaces (including new lines) and comments between lexical elements (tokens), except as delimiters between names and keywords.",
"\4",
"Names (also called identifiers) in Lua can be any string of letters, digits, and underscores, not beginning with a digit.",
"Identifiers are used to name variables, table fields, and labels.",
"\4",
"The following keywords are reserved and cannot be used as names:",
"\3     and       break     do        else      elseif    end",
"\3     false     for       function  goto      if        in",
"\3     local     nil       not       or        repeat    return",
"\3     then      true      until     while",
"\4",
"Lua is a case-sensitive language: \"and\" is a reserved word, but \"And\" and \"AND\" are two different, valid names.",
"As a convention, programs should avoid creating names that start with an underscore followed by one or more uppercase letters (such as \"_VERSION\").",
"\4",
"The following strings denote other tokens:",
"\3     +     -     *     /     %     ^     #",
"\3     &     ~     |     <<    >>    //",
"\3     ==    ~=    <=    >=    <     >     =",
"\3     (     )     {     }     [     ]     ::",
"\3     ;     :     ,     .     ..    ...",
"\4",
"Literal strings can be delimited by matching single or double quotes, and can contain the following C-like escape sequences: \"\\a\" (bell), \"\\b\" (backspace), \"\\f\" (form feed), \"\\n\" (newline), \"\\r\" (carriage return), \"\\t\" (horizontal tab), \"\\v\" (vertical tab), \"\\\\\" (backslash), \"\\'\" (quotation mark [double quote]), and \"\\'\" (apostrophe [single quote]).",
"A backslash followed by a real newline results in a newline in the string.",
"The escape sequence \"\\z\" skips the following span of white-space characters, including line breaks; it is particularly useful to break and indent a long literal string into multiple lines without adding the newlines and spaces into the string contents.",
"\4",
"Strings in Lua can contain any 8-bit value, including embedded zeros, which can be specified as \"\\0\".",
"More generally, we can specify any byte in a literal string by its numerical value.",
"This can be done with the escape sequence \"\\xXX\", where XX is a sequence of exactly two hexadecimal digits, or with the escape sequence \"\\ddd\", where ddd is a sequence of up to three decimal digits.",
"(Note that if a decimal escape sequence is to be followed by a digit, it must be expressed using exactly three digits.)",
"\4",
"The UTF-8 encoding of a Unicode character can be inserted in a literal string with the escape sequence \"\\u{XXX}\" (note the mandatory enclosing brackets), where XXX is a sequence of one or more hexadecimal digits representing the character code point.",
"\4",
"Literal strings can also be defined using a long format enclosed by long brackets.",
"We define an opening long bracket of level n as an opening square bracket followed by n equal signs followed by another opening square bracket.",
"So, an opening long bracket of level 0 is written as \"[[\", an opening long bracket of level 1 is written as \"[=[\", and so on.",
"A closing long bracket is defined similarly; for instance, a closing long bracket of level 4 is written as  \"]====]\".",
"A long literal starts with an opening long bracket of any level and ends at the first closing long bracket of the same level.",
"It can contain any text except a closing bracket of the same level.",
"Literals in this bracketed form can run for several lines, do not interpret any escape sequences, and ignore long brackets of any other level.",
"Any kind of end-of-line sequence (carriage return, newline, carriage return followed by newline, or newline followed by carriage return) is converted to a simple newline.",
"\4",
"Any byte in a literal string not explicitly affected by the previous rules represents itself.",
"However, Lua opens files for parsing in text mode, and the system file functions may have problems with some control characters.",
"So, it is safer to represent non-text data as a quoted literal with explicit escape sequences for non-text characters.",
"\4",
"For convenience, when the opening long bracket is immediately followed by a newline, the newline is not included in the string.",
"As an example, in a system using ASCII (in which \"a\" is coded as 97, newline is coded as 10, and \"1\" is coded as 49), the five literal strings below denote the same string:",
"\3     a = 'alo\\n123\"'",
"\3     a = \"alo\\n123\\\"\"",
"\3     a = '\\97lo\\10\\04923\"'",
"\3     a = [[alo",
"\3     123\"]]",
"\3     a = [==[",
"\3     alo",
"\3     123\"]==]",
"\4",
"A numerical constant (or numeral) can be written with an optional fractional part and an optional decimal exponent, marked by a letter \"e\" or \"E\".",
"Lua also accepts hexadecimal constants, which start with \"0x\" or \"0X\".",
"Hexadecimal constants also accept an optional fractional part plus an optional binary exponent, marked by a letter \"p\" or \"P\".",
"A numeric constant with a fractional dot or an exponent denotes a float; otherwise it denotes an integer.",
"Examples of valid integer constants are",
"\3     3   345   0xff   0xBEBADA",
"\4",
"Examples of valid float constants are",
"\3     3.0     3.1416     314.16e-2     0.31416E1     34e1",
"\3     0x0.1E  0xA23p-4   0X1.921FB54442D18P+1",
"\4",
"A comment starts with a double hyphen (\"--\") anywhere outside a string.",
"If the text immediately after \"--\" is not an opening long bracket, the comment is a short comment, which runs until the end of the line.",
"Otherwise, it is a long comment, which runs until the corresponding closing long bracket.",
"Long comments are frequently used to disable code temporarily.",
},
{ title = "3.2 Variables", typ = 1;
"\4",
"Variables are places that store values.",
"There are three kinds of variables in Lua: global variables, local variables, and table fields.",
"\4",
"A single name can denote a global variable or a local variable (or a function's formal parameter, which is a particular kind of local variable):",
"\3\9var ::= Name",
"\4",
"Name denotes identifiers, as defined in §3.1.",
"\4",
"Any variable name is assumed to be global unless explicitly declared as a local (see §3.3.7).",
"Local variables are lexically scoped: local variables can be freely accessed by functions defined inside their scope (see §3.5).",
"\4",
"Before the first assignment to a variable, its value is nil.",
"\4",
"Square brackets are used to index a table:",
"\3\9var ::= prefixexp `[’ exp `]’",
"\4",
"The meaning of accesses to table fields can be changed via metatables.",
"An access to an indexed variable \"t[i]\" is equivalent to a call \"gettable_event(t,i)\".",
"(See §2.4 for a complete description of the \"gettable_event\" function.",
"This function is not defined or callable in Lua.",
"We use it here only for explanatory purposes.)",
"\4",
"The syntax \"var.Name\" is just syntactic sugar for \"var['Name']\":",
"\3\9var ::= prefixexp `.’ Name",
"\4",
"An access to a global variable \"x\" is equivalent to \"_ENV.x\".",
"Due to the way that chunks are compiled, \"_ENV\" is never a global name (see §2.2).",
},
{ title = "3.3 Statements", typ = 1;
"\4",
"Lua supports an almost conventional set of statements, similar to those in Pascal or C.",
"This set includes assignments, control structures, function calls, and variable declarations.",
{ title = "3.3.1 Blocks", typ = 1;
"\4",
"A block is a list of statements, which are executed sequentially:",
"\3\9block ::= {stat}",
"\4",
"Lua has empty statements that allow you to separate statements with semicolons, start a block with a semicolon or write two semicolons in sequence:",
"\3\9stat ::= `;’",
"\4",
"Function calls and assignments can start with an open parenthesis.",
"This possibility leads to an ambiguity in Lua's grammar.",
"Consider the following fragment:",
"\3     a = b + c",
"\3     (print or io.write)('done')",
"\4",
"The grammar could see it in two ways:",
"\3     a = b + c(print or io.write)('done')",
"\3     a = b + c; (print or io.write)('done')",
"\4",
"The current parser always sees such constructions in the first way, interpreting the open parenthesis as the start of the arguments to a call.",
"To avoid this ambiguity, it is a good practice to always precede with a semicolon statements that start with a parenthesis:",
"\3     ;(print or io.write)('done')",
"\4",
"A block can be explicitly delimited to produce a single statement:",
"\3\9stat ::= do block end",
"\4",
"Explicit blocks are useful to control the scope of variable declarations.",
"Explicit blocks are also sometimes used to add a return statement in the middle of another block (see §3.3.4).",
},
{ title = "3.3.2 Chunks", typ = 1;
"\4",
"The unit of compilation of Lua is called a chunk.",
"Syntactically, a chunk is simply a block:",
"\3\9chunk ::= block",
"\4",
"Lua handles a chunk as the body of an anonymous function with a variable number of arguments (see §3.4.11).",
"As such, chunks can define local variables, receive arguments, and return values.",
"Moreover, such anonymous function is compiled as in the scope of an external local variable called \"_ENV\" (see §2.2).",
"The resulting function always has \"_ENV\" as its only upvalue, even if it does not use that variable.",
"\4",
"A chunk can be stored in a file or in a string inside the host program.",
"To execute a chunk, Lua first loads it, precompiling the chunk's code into instructions for a virtual machine, and then Lua executes the compiled code with an interpreter for the virtual machine.",
"\4",
"Chunks can also be precompiled into binary form; see program \"luac\" and function \"string.dump\" for details.",
"Programs in source and compiled forms are interchangeable; Lua automatically detects the file type and acts accordingly (see \"load\").",
},
{ title = "3.3.3 Assignment", typ = 1;
"\4",
"Lua allows multiple assignments.",
"Therefore, the syntax for assignment defines a list of variables on the left side and a list of expressions on the right side.",
"The elements in both lists are separated by commas:",
"\3\9stat ::= varlist `=’ explist",
"\3\9varlist ::= var {`,’ var}",
"\3\9explist ::= exp {`,’ exp}",
"\4",
"Expressions are discussed in §3.4.",
"\4",
"Before the assignment, the list of values is adjusted to the length of the list of variables.",
"If there are more values than needed, the excess values are thrown away.",
"If there are fewer values than needed, the list is extended with as many  nil's as needed.",
"If the list of expressions ends with a function call, then all values returned by that call enter the list of values, before the adjustment (except when the call is enclosed in parentheses; see §3.4).",
"\4",
"The assignment statement first evaluates all its expressions and only then the assignments are performed.",
"Thus the code",
"\3     i = 3",
"\3     i, a[i] = i+1, 20",
"\4",
"sets \"a[3]\" to 20, without affecting \"a[4]\" because the \"i\" in \"a[i]\" is evaluated (to 3) before it is assigned 4.",
"Similarly, the line",
"\3     x, y = y, x",
"\4",
"exchanges the values of \"x\" and \"y\", and",
"\3     x, y, z = y, z, x",
"\4",
"cyclically permutes the values of \"x\", \"y\", and \"z\".",
"\4",
"The meaning of assignments to global variables and table fields can be changed via metatables.",
"An assignment to an indexed variable \"t[i] = val\" is equivalent to \"settable_event(t,i,val)\".",
"(See §2.4 for a complete description of the \"settable_event\" function.",
"This function is not defined or callable in Lua.",
"We use it here only for explanatory purposes.)",
"\4",
"An assignment to a global name \"x = val\" is equivalent to the assignment \"_ENV.x = val\" (see §2.2).",
},
{ title = "3.3.4 Control Structures", typ = 1;
"\4",
"The control structures if, while, and repeat have the usual meaning and familiar syntax:",
"\3\9stat ::= while exp do block end",
"\3\9stat ::= repeat block until exp",
"\3\9stat ::= if exp then block {elseif exp then block} [else block] end",
"\4",
"Lua also has a for statement, in two flavors (see §3.3.5).",
"\4",
"The condition expression of a control structure can return any value.",
"Both false and nil are considered false.",
"All values different from nil and false are considered true (in particular, the number 0 and the empty string are also true).",
"\4",
"In the repeat-until loop, the inner block does not end at the until keyword, but only after the condition.",
"So, the condition can refer to local variables declared inside the loop block.",
"\4",
"The goto statement transfers the program control to a label.",
"For syntactical reasons, labels in Lua are considered statements too:",
"\3\9stat ::= goto Name",
"\3\9stat ::= label",
"\3\9label ::= `::’ Name `::’",
"\4",
"A label is visible in the entire block where it is defined, except inside nested blocks where a label with the same name is defined and inside nested functions.",
"A goto may jump to any visible label as long as it does not enter into the scope of a local variable.",
"\4",
"Labels and empty statements are called void statements, as they perform no actions.",
"\4",
"The break statement terminates the execution of a while, repeat, or for loop, skipping to the next statement after the loop:",
"\3\9stat ::= break",
"\4",
"A break ends the innermost enclosing loop.",
"\4",
"The return statement is used to return values from a function or a chunk (which is an anonymous function).",
"Functions can return more than one value, so the syntax for the return statement is",
"\3\9stat ::= return [explist] [`;’]",
"\4",
"The return statement can only be written as the last statement of a block.",
"If it is really necessary to return in the middle of a block, then an explicit inner block can be used, as in the idiom \"do return end\", because now return is the last statement in its (inner) block.",
},
{ title = "3.3.5 For Statement", typ = 1;
"\4",
"The for statement has two forms: one numeric and one generic.",
"\4",
"The numeric for loop repeats a block of code while a control variable runs through an arithmetic progression.",
"It has the following syntax:",
"\3\9stat ::= for Name `=’ exp `,’ exp [`,’ exp] do block end",
"\4",
"The block is repeated for name starting at the value of the first exp, until it passes the second exp by steps of the third exp.",
"More precisely, a for statement like",
"\3     for v = e1, e2, e3 do block end",
"\4",
"is equivalent to the code:",
"\3     do",
"\3       local var, limit, step = tonumber(e1), tonumber(e2), tonumber(e3)",
"\3       if not (var and limit and step) then error() end",
"\3       var = var - step",
"\3       while true do",
"\3         var = var + step",
"\3         if (step >= 0 and var > limit) or (step < 0 and var < limit) then",
"\3           break",
"\3         end",
"\3         local v = var",
"\3         block",
"\3       end",
"\3     end",
"\4",
"Note the following:",
"\2All three control expressions are evaluated only once, before the loop starts.",
"They must all result in numbers.",
"\2\"var\", \"limit\", and \"step\" are invisible variables.",
"The names shown here are for explanatory purposes only.",
"\2If the third expression (the step) is absent, then a step of 1 is used.",
"\2You can use break and goto to exit a for loop.",
"\2The loop variable \"v\" is local to the loop body.",
"If you need its value after the loop, assign it to another variable before exiting the loop.",
"\2",
"\4",
"The generic for statement works over functions, called iterators.",
"On each iteration, the iterator function is called to produce a new value, stopping when this new value is nil.",
"The generic for loop has the following syntax:",
"\3\9stat ::= for namelist in explist do block end",
"\3\9namelist ::= Name {`,’ Name}",
"\4",
"A for statement like",
"\3     for var_1, ..., var_n in explist do block end",
"\4",
"is equivalent to the code:",
"\3     do",
"\3       local f, s, var = explist",
"\3       while true do",
"\3         local var_1, ..., var_n = f(s, var)",
"\3         if var_1 == nil then break end",
"\3         var = var_1",
"\3         block",
"\3       end",
"\3     end",
"\4",
"Note the following:",
"\2\"explist\" is evaluated only once.",
"Its results are an iterator function, a state, and an initial value for the first iterator variable.",
"\2\"f\", \"s\", and \"var\" are invisible variables.",
"The names are here for explanatory purposes only.",
"\2You can use break to exit a for loop.",
"\2The loop variables \"var_i\" are local to the loop; you cannot use their values after the for ends.",
"If you need these values, then assign them to other variables before breaking or exiting the loop.",
"\2",
},
{ title = "3.3.6 Function Calls as Statements", typ = 1;
"\4",
"To allow possible side-effects, function calls can be executed as statements:",
"\3\9stat ::= functioncall",
"\4",
"In this case, all returned values are thrown away.",
"Function calls are explained in §3.4.10.",
},
{ title = "3.3.7 Local Declarations", typ = 1;
"\4",
"Local variables can be declared anywhere inside a block.",
"The declaration can include an initial assignment:",
"\3\9stat ::= local namelist [`=’ explist]",
"\4",
"If present, an initial assignment has the same semantics of a multiple assignment (see §3.3.3).",
"Otherwise, all variables are initialized with nil.",
"\4",
"A chunk is also a block (see §3.3.2), and so local variables can be declared in a chunk outside any explicit block.",
"\4",
"The visibility rules for local variables are explained in §3.5.",
},
},
{ title = "3.4 Expressions", typ = 1;
"\4",
"The basic expressions in Lua are the following:",
"\3\9exp ::= prefixexp",
"\3\9exp ::= nil | false | true",
"\3\9exp ::= Numeral",
"\3\9exp ::= LiteralString",
"\3\9exp ::= functiondef",
"\3\9exp ::= tableconstructor",
"\3\9exp ::= `...’",
"\3\9exp ::= exp binop exp",
"\3\9exp ::= unop exp",
"\3\9prefixexp ::= var | functioncall | `(’ exp `)’",
"\4",
"Numerals and literal strings are explained in §3.1; variables are explained in §3.2; function definitions are explained in §3.4.11; function calls are explained in §3.4.10; table constructors are explained in §3.4.9.",
"Vararg expressions, denoted by three dots (\"...\"), can only be used when directly inside a vararg function; they are explained in §3.4.11.",
"\4",
"Binary operators comprise arithmetic operators (see §3.4.1), bitwise operators (see §3.4.2), relational operators (see §3.4.4), logical operators (see §3.4.5), and the concatenation operator (see §3.4.6).",
"Unary operators comprise the unary minus (see §3.4.1), the unary bitwise not (see §3.4.2), the unary logical not (see §3.4.5), and the unary length operator (see §3.4.7).",
"\4",
"Both function calls and vararg expressions can result in multiple values.",
"If a function call is used as a statement (see §3.3.6), then its return list is adjusted to zero elements, thus discarding all returned values.",
"If an expression is used as the last (or the only) element of a list of expressions, then no adjustment is made (unless the expression is enclosed in parentheses).",
"In all other contexts, Lua adjusts the result list to one element, either discarding all values except the first one or adding a single nil if there are no values.",
"\4",
"Here are some examples:",
"\3     f()                -- adjusted to 0 results",
"\3     g(f(), x)          -- f() is adjusted to 1 result",
"\3     g(x, f())          -- g gets x plus all results from f()",
"\3     a,b,c = f(), x     -- f() is adjusted to 1 result (c gets nil)",
"\3     a,b = ...          -- a gets the first vararg parameter, b gets",
"\3                        -- the second (both a and b can get nil if there",
"\3                        -- is no corresponding vararg parameter)",
"\3     a,b,c = x, f()     -- f() is adjusted to 2 results",
"\3     a,b,c = f()        -- f() is adjusted to 3 results",
"\3     return f()         -- returns all results from f()",
"\3     return ...         -- returns all received vararg parameters",
"\3     return x,y,f()     -- returns x, y, and all results from f()",
"\3     {f()}              -- creates a list with all results from f()",
"\3     {...}              -- creates a list with all vararg parameters",
"\3     {f(), nil}         -- f() is adjusted to 1 result",
"\4",
"Any expression enclosed in parentheses always results in only one value.",
"Thus, \"(f(x,y,z))\" is always a single value, even if \"f\" returns several values.",
"(The value of \"(f(x,y,z))\" is the first value returned by \"f\" or nil if \"f\" does not return any values.)",
{ title = "3.4.1 Arithmetic Operators", typ = 1;
"\4",
"Lua supports the following arithmetic operators:",
"\2\"+\": addition",
"\2\"-\": subtraction",
"\2\"*\": multiplication",
"\2\"/\": float division",
"\2\"//\": floor division",
"\2\"%\": modulo",
"\2\"^\": exponentiation",
"\2\"-\": unary minus",
"\2",
"\4",
"With the exception of exponentiation and float division, the arithmetic operators work as follows: If both operands are integers, the operation is performed over integers and the result is an integer.",
"Otherwise, if both operands are numbers or strings that can be converted to numbers (see §3.4.3), then they are converted to floats, the operation is performed following the usual rules for floating-point arithmetic (usually the IEEE 754 standard), and the result is a float.",
"\4",
"Exponentiation and float division (\"/\") always convert their operands to floats and the result is always a float.",
"Exponentiation uses the ISO C function \"pow\", so that it works for non-integer exponents too.",
"\4",
"Floor division (\"//\") is a division that rounds the quotient towards minus infinite, that is, the floor of the division of its operands.",
"\4",
"Modulo is defined as the remainder of a division that rounds the quotient towards minus infinite (floor division).",
"\4",
"In case of overflows in integer arithmetic, all operations wrap around, according to the usual rules of two-complement arithmetic.",
"(In other words, they return the unique representable integer that is equal modulo 2^64 to the mathematical result.)",
},
{ title = "3.4.2 Bitwise Operators", typ = 1;
"\4",
"Lua supports the following bitwise operators:",
"\2\"&\": bitwise and",
"\2\"&#124;\": bitwise or",
"\2\"~\": bitwise exclusive or",
"\2\">>\": right shift",
"\2\"<<\": left shift",
"\2\"~\": unary bitwise not",
"\2",
"\4",
"All bitwise operations convert its operands to integers (see §3.4.3), operate on all bits of those integers, and result in an integer.",
"\4",
"Both right and left shifts fill the vacant bits with zeros.",
"Negative displacements shift to the other direction; displacements with absolute values equal to or higher than the number of bits in an integer result in zero (as all bits are shifted out).",
},
{ title = "3.4.3 Coercions and Conversions", typ = 1;
"\4",
"Lua provides some automatic conversions between some types and representations at run time.",
"Bitwise operators always convert float operands to integers.",
"Exponentiation and float division always convert integer operands to floats.",
"All other arithmetic operations applied to mixed numbers (integers and floats) convert the integer operand to a float; this is called the usual rule.",
"The C API also converts both integers to floats and floats to integers, as needed.",
"Moreover, string concatenation accepts numbers as arguments, besides strings.",
"\4",
"Lua also converts strings to numbers, whenever a number is expected.",
"\4",
"In a conversion from integer to float, if the integer value has an exact representation as a float, that is the result.",
"Otherwise, the conversion gets the nearest higher or the nearest lower representable value.",
"This kind of conversion never fails.",
"\4",
"The conversion from float to integer checks whether the float has an exact representation as an integer (that is, the float has an integral value and it is in the range of integer representation).",
"If it does, that representation is the result.",
"Otherwise, the conversion fails.",
"\4",
"The conversion from strings to numbers goes as follows: First, the string is converted to an integer or a float, following its syntax and the rules of the Lua lexer.",
"(The string may have also leading and trailing spaces and a sign.)",
"Then, the resulting number is converted to the required type (float or integer) according to the previous rules.",
"\4",
"The conversion from numbers to strings uses a non-specified human-readable format.",
"For complete control over how numbers are converted to strings, use the \"format\" function from the string library (see \"string.format\").",
},
{ title = "3.4.4 Relational Operators", typ = 1;
"\4",
"Lua supports the following relational operators:",
"\2\"==\": equality",
"\2\"~=\": inequality",
"\2\"<\": less than",
"\2\">\": greater than",
"\2\"<=\": less or equal",
"\2\">=\": greater or equal",
"\2",
"\4",
"These operators always result in false or true.",
"\4",
"Equality (\"==\") first compares the type of its operands.",
"If the types are different, then the result is false.",
"Otherwise, the values of the operands are compared.",
"Strings are compared in the obvious way.",
"Numbers follow the usual rule for binary operations: if both operands are integers, they are compared as integers; otherwise, they are converted to floats and compared as such.",
"\4",
"Tables, userdata, and threads are compared by reference: two objects are considered equal only if they are the same object.",
"Every time you create a new object (a table, userdata, or thread), this new object is different from any previously existing object.",
"Closures with the same reference are always equal.",
"Closures with any detectable difference (different behavior, different definition) are always different.",
"\4",
"You can change the way that Lua compares tables and userdata by using the \"eq\" metamethod (see §2.4).",
"\4",
"Equality comparisons do not convert strings to numbers or vice versa.",
"Thus, \"'0'==0\" evaluates to false, and \"t[0]\" and \"t['0']\" denote different entries in a table.",
"\4",
"The operator \"~=\" is exactly the negation of equality (\"==\").",
"\4",
"The order operators work as follows.",
"If both arguments are numbers, then they are compared following the usual rule for binary operations.",
"Otherwise, if both arguments are strings, then their values are compared according to the current locale.",
"Otherwise, Lua tries to call the \"lt\" or the \"le\" metamethod (see §2.4).",
"A comparison \"a > b\" is translated to \"b < a\" and \"a >= b\" is translated to \"b <= a\".",
},
{ title = "3.4.5 Logical Operators", typ = 1;
"\4",
"The logical operators in Lua are and, or, and not.",
"Like the control structures (see §3.3.4), all logical operators consider both false and nil as false and anything else as true.",
"\4",
"The negation operator not always returns false or true.",
"The conjunction operator and returns its first argument if this value is false or nil; otherwise, and returns its second argument.",
"The disjunction operator or returns its first argument if this value is different from nil and false; otherwise, or returns its second argument.",
"Both and and or use short-circuit evaluation; that is, the second operand is evaluated only if necessary.",
"Here are some examples:",
"\3     10 or 20            --> 10",
"\3     10 or error()       --> 10",
"\3     nil or \"a\"          --> \"a\"",
"\3     nil and 10          --> nil",
"\3     false and error()   --> false",
"\3     false and nil       --> false",
"\3     false or nil        --> nil",
"\3     10 and 20           --> 20",
"\4",
"(In this manual, \"-->\" indicates the result of the preceding expression.)",
},
{ title = "3.4.6 Concatenation", typ = 1;
"\4",
"The string concatenation operator in Lua is denoted by two dots (\"..\").",
"If both operands are strings or numbers, then they are converted to strings according to the rules described in §3.4.3.",
"Otherwise, the \"__concat\" metamethod is called (see §2.4).",
},
{ title = "3.4.7 The Length Operator", typ = 1;
"\4",
"The length operator is denoted by the unary prefix operator \"#\".",
"The length of a string is its number of bytes (that is, the usual meaning of string length when each character is one byte).",
"\4",
"A program can modify the behavior of the length operator for any value but strings through the \"__len\" metamethod (see §2.4).",
"\4",
"Unless a \"__len\" metamethod is given, the length of a table \"t\" is only defined if the table is a sequence, that is, the set of its positive numeric keys is equal to {1..n} for some non-negative integer n.",
"In that case, n is its length.",
"Note that a table like",
"\3     {10, 20, nil, 40}",
"\4",
"is not a sequence, because it has the key \"4\" but does not have the key \"3\".",
"(So, there is no n such that the set {1..n} is equal to the set of positive numeric keys of that table.)",
"Note, however, that non-numeric keys do not interfere with whether a table is a sequence.",
},
{ title = "3.4.8 Precedence", typ = 1;
"\4",
"Operator precedence in Lua follows the table below, from lower to higher priority:",
"\3     or",
"\3     and",
"\3     <     >     <=    >=    ~=    ==",
"\3     |",
"\3     ~",
"\3     &",
"\3     <<    >>",
"\3     ..",
"\3     +     -",
"\3     *     /     //    %",
"\3     unary operators (not   #     -     ~)",
"\3     ^",
"\4",
"As usual, you can use parentheses to change the precedences of an expression.",
"The concatenation (\"..\") and exponentiation (\"^\") operators are right associative.",
"All other binary operators are left associative.",
},
{ title = "3.4.9 Table Constructors", typ = 1;
"\4",
"Table constructors are expressions that create tables.",
"Every time a constructor is evaluated, a new table is created.",
"A constructor can be used to create an empty table or to create a table and initialize some of its fields.",
"The general syntax for constructors is",
"\3\9tableconstructor ::= `{’ [fieldlist] `}’",
"\3\9fieldlist ::= field {fieldsep field} [fieldsep]",
"\3\9field ::= `[’ exp `]’ `=’ exp | Name `=’ exp | exp",
"\3\9fieldsep ::= `,’ | `;’",
"\4",
"Each field of the form \"[exp1] = exp2\" adds to the new table an entry with key \"exp1\" and value \"exp2\".",
"A field of the form \"name = exp\" is equivalent to \"['name'] = exp\".",
"Finally, fields of the form \"exp\" are equivalent to \"[i] = exp\", where \"i\" are consecutive integers starting with 1.",
"Fields in the other formats do not affect this counting.",
"For example,",
"\3     a = { [f(1)] = g; \"x\", \"y\"; x = 1, f(x), [30] = 23; 45 }",
"\4",
"is equivalent to",
"\3     do",
"\3       local t = {}",
"\3       t[f(1)] = g",
"\3       t[1] = \"x\"         -- 1st exp",
"\3       t[2] = \"y\"         -- 2nd exp",
"\3       t.x = 1            -- t[\"x\"] = 1",
"\3       t[3] = f(x)        -- 3rd exp",
"\3       t[30] = 23",
"\3       t[4] = 45          -- 4th exp",
"\3       a = t",
"\3     end",
"\4",
"The order of the assignments in a constructor is undefined.",
"(This order would be relevant only when there are repeated keys.)",
"\4",
"If the last field in the list has the form \"exp\" and the expression is a function call or a vararg expression, then all values returned by this expression enter the list consecutively (see §3.4.10).",
"\4",
"The field list can have an optional trailing separator, as a convenience for machine-generated code.",
},
{ title = "3.4.10 Function Calls", typ = 1;
"\4",
"A function call in Lua has the following syntax:",
"\3\9functioncall ::= prefixexp args",
"\4",
"In a function call, first prefixexp and args are evaluated.",
"If the value of prefixexp has type function, then this function is called with the given arguments.",
"Otherwise, the prefixexp \"call\" metamethod is called, having as first parameter the value of prefixexp, followed by the original call arguments (see §2.4).",
"\4",
"The form",
"\3\9functioncall ::= prefixexp `:’ Name args",
"\4",
"can be used to call \"methods\".",
"A call \"v:name(args)\" is syntactic sugar for \"v.name(v,args)\", except that \"v\" is evaluated only once.",
"\4",
"Arguments have the following syntax:",
"\3\9args ::= `(’ [explist] `)’",
"\3\9args ::= tableconstructor",
"\3\9args ::= LiteralString",
"\4",
"All argument expressions are evaluated before the call.",
"A call of the form \"f{fields}\" is syntactic sugar for \"f({fields})\"; that is, the argument list is a single new table.",
"A call of the form \"f'string'\" (or \"f'string'\" or \"f[[string]]\") is syntactic sugar for \"f('string')\"; that is, the argument list is a single literal string.",
"\4",
"A call of the form \"return functioncall\" is called a tail call.",
"Lua implements proper tail calls (or proper tail recursion): in a tail call, the called function reuses the stack entry of the calling function.",
"Therefore, there is no limit on the number of nested tail calls that a program can execute.",
"However, a tail call erases any debug information about the calling function.",
"Note that a tail call only happens with a particular syntax, where the return has one single function call as argument; this syntax makes the calling function return exactly the returns of the called function.",
"So, none of the following examples are tail calls:",
"\3     return (f(x))        -- results adjusted to 1",
"\3     return 2 * f(x)",
"\3     return x, f(x)       -- additional results",
"\3     f(x); return         -- results discarded",
"\3     return x or f(x)     -- results adjusted to 1",
},
{ title = "3.4.11 Function Definitions", typ = 1;
"\4",
"The syntax for function definition is",
"\3\9functiondef ::= function funcbody",
"\3\9funcbody ::= `(’ [parlist] `)’ block end",
"\4",
"The following syntactic sugar simplifies function definitions:",
"\3\9stat ::= function funcname funcbody",
"\3\9stat ::= local function Name funcbody",
"\3\9funcname ::= Name {`.’ Name} [`:’ Name]",
"\4",
"The statement",
"\3     function f () body end",
"\4",
"translates to",
"\3     f = function () body end",
"\4",
"The statement",
"\3     function t.a.b.c.f () body end",
"\4",
"translates to",
"\3     t.a.b.c.f = function () body end",
"\4",
"The statement",
"\3     local function f () body end",
"\4",
"translates to",
"\3     local f; f = function () body end",
"\4",
"not to",
"\3     local f = function () body end",
"\4",
"(This only makes a difference when the body of the function contains references to \"f\".)",
"\4",
"A function definition is an executable expression, whose value has type function.",
"When Lua precompiles a chunk, all its function bodies are precompiled too.",
"Then, whenever Lua executes the function definition, the function is instantiated (or closed).",
"This function instance (or closure) is the final value of the expression.",
"\4",
"Parameters act as local variables that are initialized with the argument values:",
"\3\9parlist ::= namelist [`,’ `...’] | `...’",
"\4",
"When a function is called, the list of arguments is adjusted to the length of the list of parameters, unless the function is a vararg function, which is indicated by three dots (\"...\") at the end of its parameter list.",
"A vararg function does not adjust its argument list; instead, it collects all extra arguments and supplies them to the function through a vararg expression, which is also written as three dots.",
"The value of this expression is a list of all actual extra arguments, similar to a function with multiple results.",
"If a vararg expression is used inside another expression or in the middle of a list of expressions, then its return list is adjusted to one element.",
"If the expression is used as the last element of a list of expressions, then no adjustment is made (unless that last expression is enclosed in parentheses).",
"\4",
"As an example, consider the following definitions:",
"\3     function f(a, b) end",
"\3     function g(a, b, ...) end",
"\3     function r() return 1,2,3 end",
"\4",
"Then, we have the following mapping from arguments to parameters and to the vararg expression:",
"\3     CALL            PARAMETERS",
"\3     f(3)             a=3, b=nil",
"\3     f(3, 4)          a=3, b=4",
"\3     f(3, 4, 5)       a=3, b=4",
"\3     f(r(), 10)       a=1, b=10",
"\3     f(r())           a=1, b=2",
"\3     g(3)             a=3, b=nil, ... -->  (nothing)",
"\3     g(3, 4)          a=3, b=4,   ... -->  (nothing)",
"\3     g(3, 4, 5, 8)    a=3, b=4,   ... -->  5  8",
"\3     g(5, r())        a=5, b=1,   ... -->  2  3",
"\4",
"Results are returned using the return statement (see §3.3.4).",
"If control reaches the end of a function without encountering a return statement, then the function returns with no results.",
"\4",
"There is a system-dependent limit on the number of values that a function may return.",
"This limit is guaranteed to be larger than 1000.",
"\4",
"The colon syntax is used for defining methods, that is, functions that have an implicit extra parameter \"self\".",
"Thus, the statement",
"\3     function t.a.b.c:f (params) body end",
"\4",
"is syntactic sugar for",
"\3     t.a.b.c.f = function (self, params) body end",
},
},
{ title = "3.5 Visibility Rules", typ = 1;
"\4",
"Lua is a lexically scoped language.",
"The scope of a local variable begins at the first statement after its declaration and lasts until the last non-void statement of the innermost block that includes the declaration.",
"Consider the following example:",
"\3     x = 10                -- global variable",
"\3     do                    -- new block",
"\3       local x = x         -- new 'x', with value 10",
"\3       print(x)            --> 10",
"\3       x = x+1",
"\3       do                  -- another block",
"\3         local x = x+1     -- another 'x'",
"\3         print(x)          --> 12",
"\3       end",
"\3       print(x)            --> 11",
"\3     end",
"\3     print(x)              --> 10  (the global one)",
"\4",
"Notice that, in a declaration like \"local x = x\", the new \"x\" being declared is not in scope yet, and so the second \"x\" refers to the outside variable.",
"\4",
"Because of the lexical scoping rules, local variables can be freely accessed by functions defined inside their scope.",
"A local variable used by an inner function is called an upvalue, or external local variable, inside the inner function.",
"\4",
"Notice that each execution of a local statement defines new local variables.",
"Consider the following example:",
"\3     a = {}",
"\3     local x = 20",
"\3     for i=1,10 do",
"\3       local y = 0",
"\3       a[i] = function () y=y+1; return x+y end",
"\3     end",
"\4",
"The loop creates ten closures (that is, ten instances of the anonymous function).",
"Each of these closures uses a different \"y\" variable, while all of them share the same \"x\".",
},
},
{ title = "4. The Application Program Interface", typ = 2;
"\4",
"This section describes the C API for Lua, that is, the set of C functions available to the host program to communicate with Lua.",
"All API functions and related types and constants are declared in the header file \"lua.h\".",
"\4",
"Even when we use the term \"function\", any facility in the API may be provided as a macro instead.",
"Except where stated otherwise, all such macros use each of their arguments exactly once (except for the first argument, which is always a Lua state), and so do not generate any hidden side-effects.",
"\4",
"As in most C libraries, the Lua API functions do not check their arguments for validity or consistency.",
"However, you can change this behavior by compiling Lua with the macro \"LUA_USE_APICHECK\" defined.",
{ title = "4.1 The Stack", typ = 2;
"\4",
"Lua uses a virtual stack to pass values to and from C.",
"Each element in this stack represents a Lua value (nil, number, string, etc.).",
"\4",
"Whenever Lua calls C, the called function gets a new stack, which is independent of previous stacks and of stacks of C functions that are still active.",
"This stack initially contains any arguments to the C function and it is where the C function pushes its results to be returned to the caller (see \"lua_CFunction\").",
"\4",
"For convenience, most query operations in the API do not follow a strict stack discipline.",
"Instead, they can refer to any element in the stack by using an index: A positive index represents an absolute stack position (starting at 1); a negative index represents an offset relative to the top of the stack.",
"More specifically, if the stack has n elements, then index 1 represents the first element (that is, the element that was pushed onto the stack first) and index n represents the last element; index -1 also represents the last element (that is, the element at the top) and index -n represents the first element.",
},
{ title = "4.2 Stack Size", typ = 2;
"\4",
"When you interact with the Lua API, you are responsible for ensuring consistency.",
"In particular, you are responsible for controlling stack overflow.",
"You can use the function \"lua_checkstack\" to ensure that the stack has enough space for pushing new elements.",
"\4",
"Whenever Lua calls C, it ensures that the stack has space for at least \"LUA_MINSTACK\" extra slots.",
"\"LUA_MINSTACK\" is defined as 20, so that usually you do not have to worry about stack space unless your code has loops pushing elements onto the stack.",
"\4",
"When you call a Lua function without a fixed number of results (see \"lua_call\"), Lua ensures that the stack has enough space for all results, but it does not ensure any extra space.",
"So, before pushing anything in the stack after such a call you should use \"lua_checkstack\".",
},
{ title = "4.3 Valid and Acceptable Indices", typ = 2;
"\4",
"Any function in the API that receives stack indices works only with valid indices or acceptable indices.",
"\4",
"A valid index is an index that refers to a real position within the stack, that is, its position lies between 1 and the stack top (\"1 &le; abs(index) &le; top\").",
"Usually, functions that can modify the value at an index require valid indices.",
"\4",
"Unless otherwise noted, any function that accepts valid indices also accepts pseudo-indices, which represent some Lua values that are accessible to C code but which are not in the stack.",
"Pseudo-indices are used to access the registry and the upvalues of a C function (see §4.4).",
"\4",
"Functions that do not need a specific stack position, but only a value in the stack (e.g., query functions), can be called with acceptable indices.",
"An acceptable index can be any valid index, including the pseudo-indices, but it also can be any positive index after the stack top within the space allocated for the stack, that is, indices up to the stack size.",
"(Note that 0 is never an acceptable index.)",
"Except when noted otherwise, functions in the API work with acceptable indices.",
"\4",
"Acceptable indices serve to avoid extra tests against the stack top when querying the stack.",
"For instance, a C function can query its third argument without the need to first check whether there is a third argument, that is, without the need to check whether 3 is a valid index.",
"\4",
"For functions that can be called with acceptable indices, any non-valid index is treated as if it contains a value of a virtual type \"LUA_TNONE\", which behaves like a nil value.",
},
{ title = "4.4 C Closures", typ = 2;
"\4",
"When a C function is created, it is possible to associate some values with it, thus creating a C closure (see \"lua_pushcclosure\"); these values are called upvalues and are accessible to the function whenever it is called.",
"\4",
"Whenever a C function is called, its upvalues are located at specific pseudo-indices.",
"These pseudo-indices are produced by the macro \"lua_upvalueindex\".",
"The first value associated with a function is at position \"lua_upvalueindex(1)\", and so on.",
"Any access to \"lua_upvalueindex(n)\", where n is greater than the number of upvalues of the current function (but not greater than 256), produces an acceptable but invalid index.",
},
{ title = "4.5 Registry", typ = 2;
"\4",
"Lua provides a registry, a predefined table that can be used by any C code to store whatever Lua values it needs to store.",
"The registry table is always located at pseudo-index \"LUA_REGISTRYINDEX\", which is a valid index.",
"Any C library can store data into this table, but it must take care to choose keys that are different from those used by other libraries, to avoid collisions.",
"Typically, you should use as key a string containing your library name, or a light userdata with the address of a C object in your code, or any Lua object created by your code.",
"As with variable names, string keys starting with an underscore followed by uppercase letters are reserved for Lua.",
"\4",
"The integer keys in the registry are used by the reference mechanism (see \"luaL_ref\") and by some predefined values.",
"Therefore, integer keys must not be used for other purposes.",
"\4",
"When you create a new Lua state, its registry comes with some predefined values.",
"These predefined values are indexed with integer keys defined as constants in \"lua.h\".",
"The following constants are defined:",
"\2\"LUA_RIDX_MAINTHREAD\":  At this index the registry has the main thread of the state.",
"(The main thread is the one created together with the state.)",
"\2\"LUA_RIDX_GLOBALS\":  At this index the registry has the global environment.",
"\2",
},
{ title = "4.6 Error Handling in C", typ = 2;
"\4",
"Internally, Lua uses the C \"longjmp\" facility to handle errors.",
"(Lua will use exceptions if you compile it as C++; search for \"LUAI_THROW\" in the source code for details.)",
"When Lua faces any error (such as a memory allocation error, type errors, syntax errors, and runtime errors) it raises an error; that is, it does a long jump.",
"A protected environment uses \"setjmp\" to set a recovery point; any error jumps to the most recent active recovery point.",
"\4",
"If an error happens outside any protected environment, Lua calls a panic function (see \"lua_atpanic\") and then calls \"abort\", thus exiting the host application.",
"Your panic function can avoid this exit by never returning (e.g., doing a long jump to your own recovery point outside Lua).",
"\4",
"The panic function runs as if it were a message handler (see §2.3); in particular, the error message is at the top of the stack.",
"However, there is no guarantee about stack space.",
"To push anything on the stack, the panic function must first check the available space (see §4.2).",
"\4",
"Most functions in the API can raise an error, for instance due to a memory allocation error.",
"The documentation for each function indicates whether it can raise errors.",
"\4",
"Inside a C function you can raise an error by calling \"lua_error\".",
},
{ title = "4.7 Handling Yields in C", typ = 2;
"\4",
"Internally, Lua uses the C \"longjmp\" facility to yield a coroutine.",
"Therefore, if a C function \"foo\" calls an API function and this API function yields (directly or indirectly by calling another function that yields), Lua cannot return to \"foo\" any more, because the \"longjmp\" removes its frame from the C stack.",
"\4",
"To avoid this kind of problem, Lua raises an error whenever it tries to yield across an API call, except for three functions: \"lua_yieldk\", \"lua_callk\", and \"lua_pcallk\".",
"All those functions receive a continuation function (as a parameter named \"k\") to continue execution after a yield.",
"\4",
"We need to set some terminology to explain continuations.",
"We have a C function called from Lua which we will call the original function.",
"This original function then calls one of those three functions in the C API, which we will call the callee function, that then yields the current thread.",
"(This can happen when the callee function is \"lua_yieldk\", or when the callee function is either \"lua_callk\" or \"lua_pcallk\" and the function called by them yields.)",
"\4",
"Suppose the running thread yields while executing the callee function.",
"After the thread resumes, it eventually will finish running the callee function.",
"However, the callee function cannot return to the original function, because its frame in the C stack was destroyed by the yield.",
"Instead, Lua calls a continuation function, which was given as an argument to the callee function.",
"As the name implies, the continuation function should continue the task of the original function.",
"\4",
"As an illustration, consider the following function:",
"\3     int original_function (lua_State *L) {",
"\3       ...     /* code 1 */",
"\3       status = lua_pcall(L, n, m, h);  /* calls Lua */",
"\3       ...     /* code 2 */",
"\3     }",
"\4",
"Now we want to allow the Lua code being run by \"lua_pcall\" to yield.",
"First, we can rewrite our function like here:",
"\3     int k (lua_State *L, int status, lua_KContext ctx) {",
"\3       ...  /* code 2 */",
"\3     }",
"\3     int original_function (lua_State *L) {",
"\3       ...     /* code 1 */",
"\3       return k(L, lua_pcall(L, n, m, h), ctx);",
"\3     }",
"\4",
"In the above code, the new function \"k\" is a continuation function (with type \"lua_KFunction\"), which should do all the work that the original function was doing after calling \"lua_pcall\".",
"Now, we must inform Lua that it must call \"k\" if the Lua code being executed by \"lua_pcall\" gets interrupted in some way (errors or yielding), so we rewrite the code as here, replacing \"lua_pcall\" by \"lua_pcallk\":",
"\3     int original_function (lua_State *L) {",
"\3       ...     /* code 1 */",
"\3       return k(L, lua_pcallk(L, n, m, h, ctx2, k), ctx1);",
"\3     }",
"\4",
"Note the external, explicit call to the continuation: Lua will call the continuation only if needed, that is, in case of errors or resuming after a yield.",
"If the called function returns normally without ever yielding, \"lua_pcallk\" (and \"lua_callk\") will also return normally.",
"(Of course, instead of calling the continuation in that case, you can do the equivalent work directly inside the original function.)",
"\4",
"Besides the Lua state, the continuation function has two other parameters: the final status of the call plus the context value (\"ctx\") that was passed originally to \"lua_pcallk\".",
"(Lua does not use this context value; it only passes this value from the original function to the continuation function.)",
"For \"lua_pcallk\", the status is the same value that would be returned by \"lua_pcallk\", except that it is \"LUA_YIELD\" when being executed after a yield (instead of \"LUA_OK\").",
"For \"lua_yieldk\" and \"lua_callk\", the status is always \"LUA_YIELD\" when Lua calls the continuation.",
"(For these two functions, Lua will not call the continuation in case of errors, because they do not handle errors.)",
"Similarly, when using \"lua_callk\", you should call the continuation function with \"LUA_OK\" as the status.",
"(For \"lua_yieldk\", there is not much point in calling directly the continuation function, because \"lua_yieldk\" usually does not return.)",
"\4",
"Lua treats the continuation function as if it were the original function.",
"The continuation function receives the same Lua stack from the original function, in the same state it would be if the callee function had returned.",
"(For instance, after a \"lua_callk\" the function and its arguments are removed from the stack and replaced by the results from the call.)",
"It also has the same upvalues.",
"Whatever it returns is handled by Lua as if it were the return of the original function.",
},
{ title = "4.8 Functions and Types", typ = 2;
"\4",
"Here we list all functions and types from the C API in alphabetical order.",
"Each function has an indicator like this: [-o, +p, x]",
"\4",
"The first field, \"o\", is how many elements the function pops from the stack.",
"The second field, \"p\", is how many elements the function pushes onto the stack.",
"(Any function always pushes its results after popping its arguments.)",
"A field in the form \"x|y\" means the function can push (or pop) \"x\" or \"y\" elements, depending on the situation; an interrogation mark \"?\" means that we cannot know how many elements the function pops/pushes by looking only at its arguments (e.g., they may depend on what is on the stack).",
"The third field, \"x\", tells whether the function may raise errors: \"-\" means the function never raises any error; \"e\" means the function may raise errors; \"v\" means the function may raise an error on purpose.",
{ title = "lua_absindex", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_absindex (lua_State *L, int idx);",
"\4",
"Converts the acceptable index \"idx\" into an absolute index (that is, one that does not depend on the stack top).",
},
{ title = "lua_Alloc", typ = 2;
"\3typedef void * (*lua_Alloc) (void *ud,",
"\3                             void *ptr,",
"\3                             size_t osize,                             size_t nsize);",
"\4",
"The type of the memory-allocation function used by Lua states.",
"The allocator function must provide a functionality similar to \"realloc\", but not exactly the same.",
"Its arguments are \"ud\", an opaque pointer passed to \"lua_newstate\"; \"ptr\", a pointer to the block being allocated/reallocated/freed; \"osize\", the original size of the block or some code about what is being allocated; and \"nsize\", the new size of the block.",
"\4",
"When \"ptr\" is not \"NULL\", \"osize\" is the size of the block pointed by \"ptr\", that is, the size given when it was allocated or reallocated.",
"\4",
"When \"ptr\" is \"NULL\", \"osize\" encodes the kind of object that Lua is allocating.",
"\"osize\" is any of \"LUA_TSTRING\", \"LUA_TTABLE\", \"LUA_TFUNCTION\", \"LUA_TUSERDATA\", or \"LUA_TTHREAD\" when (and only when) Lua is creating a new object of that type.",
"When \"osize\" is some other value, Lua is allocating memory for something else.",
"\4",
"Lua assumes the following behavior from the allocator function:",
"\4",
"When \"nsize\" is zero, the allocator must behave like \"free\" and return \"NULL\".",
"\4",
"When \"nsize\" is not zero, the allocator must behave like \"realloc\".",
"The allocator returns \"NULL\" if and only if it cannot fulfill the request.",
"Lua assumes that the allocator never fails when \"osize >= nsize\".",
"\4",
"Here is a simple implementation for the allocator function.",
"It is used in the auxiliary library by \"luaL_newstate\".",
"\3     static void *l_alloc (void *ud, void *ptr, size_t osize,",
"\3                                                size_t nsize) {",
"\3       (void)ud;  (void)osize;  /* not used */",
"\3       if (nsize == 0) {",
"\3         free(ptr);",
"\3         return NULL;",
"\3       }",
"\3       else",
"\3         return realloc(ptr, nsize);",
"\3     }",
"\4",
"Note that Standard C ensures that \"free(NULL)\" has no effect and that \"realloc(NULL,size)\" is equivalent to \"malloc(size)\".",
"This code assumes that \"realloc\" does not fail when shrinking a block.",
"(Although Standard C does not ensure this behavior, it seems to be a safe assumption.)",
},
{ title = "lua_arith", typ = 2;
"\4",
"[-(2|1), +1, e]",
"void lua_arith (lua_State *L, int op);",
"\4",
"Performs an arithmetic or bitwise operation over the two values (or one, in the case of negations) at the top of the stack, with the value at the top being the second operand, pops these values, and pushes the result of the operation.",
"The function follows the semantics of the corresponding Lua operator (that is, it may call metamethods).",
"\4",
"The value of \"op\" must be one of the following constants:",
"\2\"LUA_OPADD\":  performs addition (\"+\")",
"\2\"LUA_OPSUB\":  performs subtraction (\"-\")",
"\2\"LUA_OPMUL\":  performs multiplication (\"*\")",
"\2\"LUA_OPDIV\":  performs float division (\"/\")",
"\2\"LUA_OPIDIV\":  performs floor division (\"//\")",
"\2\"LUA_OPMOD\":  performs modulo (\"%\")",
"\2\"LUA_OPPOW\":  performs exponentiation (\"^\")",
"\2\"LUA_OPUNM\":  performs mathematical negation (unary \"-\")",
"\2\"LUA_OPBNOT\":  performs bitwise negation (\"~\")",
"\2\"LUA_OPBAND\":  performs bitwise and (\"&\")",
"\2\"LUA_OPBOR\":  performs bitwise or (\"|\")",
"\2\"LUA_OPBXOR\":  performs bitwise exclusive or (\"~\")",
"\2\"LUA_OPSHL\":  performs left shift (\"<<\")",
"\2\"LUA_OPSHR\":  performs right shift (\">>\")",
"\2",
},
{ title = "lua_atpanic", typ = 2;
"\4",
"[-0, +0, -]",
"lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf);",
"\4",
"Sets a new panic function and returns the old one (see §4.6).",
},
{ title = "lua_call", typ = 2;
"\4",
"[-(nargs+1), +nresults, e]",
"void lua_call (lua_State *L, int nargs, int nresults);",
"\4",
"Calls a function.",
"\4",
"To call a function you must use the following protocol: first, the function to be called is pushed onto the stack; then, the arguments to the function are pushed in direct order; that is, the first argument is pushed first.",
"Finally you call \"lua_call\"; \"nargs\" is the number of arguments that you pushed onto the stack.",
"All arguments and the function value are popped from the stack when the function is called.",
"The function results are pushed onto the stack when the function returns.",
"The number of results is adjusted to \"nresults\", unless \"nresults\" is \"LUA_MULTRET\".",
"In this case, all results from the function are pushed.",
"Lua takes care that the returned values fit into the stack space.",
"The function results are pushed onto the stack in direct order (the first result is pushed first), so that after the call the last result is on the top of the stack.",
"\4",
"Any error inside the called function is propagated upwards (with a \"longjmp\").",
"\4",
"The following example shows how the host program can do the equivalent to this Lua code:",
"\3     a = f(\"how\", t.x, 14)",
"\4",
"Here it is in C:",
"\3     lua_getglobal(L, \"f\");                  /* function to be called */",
"\3     lua_pushliteral(L, \"how\");                       /* 1st argument */",
"\3     lua_getglobal(L, \"t\");                    /* table to be indexed */",
"\3     lua_getfield(L, -1, \"x\");        /* push result of t.x (2nd arg) */",
"\3     lua_remove(L, -2);                  /* remove 't' from the stack */",
"\3     lua_pushinteger(L, 14);                          /* 3rd argument */",
"\3     lua_call(L, 3, 1);     /* call 'f' with 3 arguments and 1 result */",
"\3     lua_setglobal(L, \"a\");                         /* set global 'a' */",
"\4",
"Note that the code above is balanced: at its end, the stack is back to its original configuration.",
"This is considered good programming practice.",
},
{ title = "lua_callk", typ = 2;
"\4",
"[-(nargs + 1), +nresults, e]",
"\3void lua_callk (lua_State *L,",
"\3                int nargs,",
"\3                int nresults,",
"\3                lua_KContext ctx,                lua_KFunction k);",
"\4",
"This function behaves exactly like \"lua_call\", but allows the called function to yield (see §4.7).",
},
{ title = "lua_CFunction", typ = 2;
"typedef int (*lua_CFunction) (lua_State *L);",
"\4",
"Type for C functions.",
"\4",
"In order to communicate properly with Lua, a C function must use the following protocol, which defines the way parameters and results are passed: a C function receives its arguments from Lua in its stack in direct order (the first argument is pushed first).",
"So, when the function starts, \"lua_gettop(L)\" returns the number of arguments received by the function.",
"The first argument (if any) is at index 1 and its last argument is at index \"lua_gettop(L)\".",
"To return values to Lua, a C function just pushes them onto the stack, in direct order (the first result is pushed first), and returns the number of results.",
"Any other value in the stack below the results will be properly discarded by Lua.",
"Like a Lua function, a C function called by Lua can also return many results.",
"\4",
"As an example, the following function receives a variable number of numerical arguments and returns their average and their sum:",
"\3     static int foo (lua_State *L) {",
"\3       int n = lua_gettop(L);    /* number of arguments */",
"\3       lua_Number sum = 0.0;",
"\3       int i;",
"\3       for (i = 1; i <= n; i++) {",
"\3         if (!lua_isnumber(L, i)) {",
"\3           lua_pushliteral(L, \"incorrect argument\");",
"\3           lua_error(L);",
"\3         }",
"\3         sum += lua_tonumber(L, i);",
"\3       }",
"\3       lua_pushnumber(L, sum/n);        /* first result */",
"\3       lua_pushnumber(L, sum);         /* second result */",
"\3       return 2;                   /* number of results */",
"\3     }",
},
{ title = "lua_checkstack", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_checkstack (lua_State *L, int n);",
"\4",
"Ensures that the stack has space for at least \"n\" extra slots.",
"It returns false if it cannot fulfill the request, either because it would cause the stack to be larger than a fixed maximum size (typically at least several thousand elements) or because it cannot allocate memory for the extra space.",
"This function never shrinks the stack; if the stack is already larger than the new size, it is left unchanged.",
},
{ title = "lua_close", typ = 2;
"\4",
"[-0, +0, -]",
"void lua_close (lua_State *L);",
"\4",
"Destroys all objects in the given Lua state (calling the corresponding garbage-collection metamethods, if any) and frees all dynamic memory used by this state.",
"On several platforms, you may not need to call this function, because all resources are naturally released when the host program ends.",
"On the other hand, long-running programs that create multiple states, such as daemons or web servers, will probably need to close states as soon as they are not needed.",
},
{ title = "lua_compare", typ = 2;
"\4",
"[-0, +0, e]",
"int lua_compare (lua_State *L, int index1, int index2, int op);",
"\4",
"Compares two Lua values.",
"Returns 1 if the value at index \"index1\" satisfies \"op\" when compared with the value at index \"index2\", following the semantics of the corresponding Lua operator (that is, it may call metamethods).",
"Otherwise returns 0.",
"Also returns 0 if any of the indices is not valid.",
"\4",
"The value of \"op\" must be one of the following constants:",
"\2\"LUA_OPEQ\":  compares for equality (\"==\")",
"\2\"LUA_OPLT\":  compares for less than (\"<\")",
"\2\"LUA_OPLE\":  compares for less or equal (\"<=\")",
"\2",
},
{ title = "lua_concat", typ = 2;
"\4",
"[-n, +1, e]",
"void lua_concat (lua_State *L, int n);",
"\4",
"Concatenates the \"n\" values at the top of the stack, pops them, and leaves the result at the top.",
"If \"n\" is 1, the result is the single value on the stack (that is, the function does nothing); if \"n\" is 0, the result is the empty string.",
"Concatenation is performed following the usual semantics of Lua (see §3.4.6).",
},
{ title = "lua_copy", typ = 2;
"\4",
"[-0, +0, -]",
"void lua_copy (lua_State *L, int fromidx, int toidx);",
"\4",
"Copies the element at index \"fromidx\" into the valid index \"toidx\", replacing the value at that position.",
"Values at other positions are not affected.",
},
{ title = "lua_createtable", typ = 2;
"\4",
"[-0, +1, e]",
"void lua_createtable (lua_State *L, int narr, int nrec);",
"\4",
"Creates a new empty table and pushes it onto the stack.",
"Parameter \"narr\" is a hint for how many elements the table will have as a sequence; parameter \"nrec\" is a hint for how many other elements the table will have.",
"Lua may use these hints to preallocate memory for the new table.",
"This pre-allocation is useful for performance when you know in advance how many elements the table will have.",
"Otherwise you can use the function \"lua_newtable\".",
},
{ title = "lua_dump", typ = 2;
"\4",
"[-0, +0, e]",
"\3int lua_dump (lua_State *L,",
"\3                        lua_Writer writer,",
"\3                        void *data,                        int strip);",
"\4",
"Dumps a function as a binary chunk.",
"Receives a Lua function on the top of the stack and produces a binary chunk that, if loaded again, results in a function equivalent to the one dumped.",
"As it produces parts of the chunk, \"lua_dump\" calls function \"writer\" (see \"lua_Writer\") with the given \"data\" to write them.",
"\4",
"If \"strip\" is true, the binary representation is created without debug information about the function.",
"\4",
"The value returned is the error code returned by the last call to the writer; 0 means no errors.",
"\4",
"This function does not pop the Lua function from the stack.",
},
{ title = "lua_error", typ = 2;
"\4",
"[-1, +0, v]",
"int lua_error (lua_State *L);",
"\4",
"Generates a Lua error, using the value at the top of the stack as the error object.",
"This function does a long jump, and therefore never returns (see \"luaL_error\").",
},
{ title = "lua_gc", typ = 2;
"\4",
"[-0, +0, e]",
"int lua_gc (lua_State *L, int what, int data);",
"\4",
"Controls the garbage collector.",
"\4",
"This function performs several tasks, according to the value of the parameter \"what\":",
"\2\"LUA_GCSTOP\":  stops the garbage collector.",
"\2\"LUA_GCRESTART\":  restarts the garbage collector.",
"\2\"LUA_GCCOLLECT\":  performs a full garbage-collection cycle.",
"\2\"LUA_GCCOUNT\":  returns the current amount of memory (in Kbytes) in use by Lua.",
"\2\"LUA_GCCOUNTB\":  returns the remainder of dividing the current amount of bytes of memory in use by Lua by 1024.",
"\2\"LUA_GCSTEP\":  performs an incremental step of garbage collection.",
"\2\"LUA_GCSETPAUSE\":  sets \"data\" as the new value for the pause of the collector (see §2.5) and returns the previous value of the pause.",
"\2\"LUA_GCSETSTEPMUL\":  sets \"data\" as the new value for the step multiplier of the collector (see §2.5) and returns the previous value of the step multiplier.",
"\2\"LUA_GCISRUNNING\":  returns a boolean that tells whether the collector is running (i.e., not stopped).",
"\2",
"\4",
"For more details about these options, see \"collectgarbage\".",
},
{ title = "lua_getallocf", typ = 2;
"\4",
"[-0, +0, -]",
"lua_Alloc lua_getallocf (lua_State *L, void **ud);",
"\4",
"Returns the memory-allocation function of a given state.",
"If \"ud\" is not \"NULL\", Lua stores in \"*ud\" the opaque pointer given when the memory-allocator function was set.",
},
{ title = "lua_getfield", typ = 2;
"\4",
"[-0, +1, e]",
"int lua_getfield (lua_State *L, int index, const char *k);",
"\4",
"Pushes onto the stack the value \"t[k]\", where \"t\" is the value at the given index.",
"As in Lua, this function may trigger a metamethod for the \"index\" event (see §2.4).",
"\4",
"Returns the type of the pushed value.",
},
{ title = "lua_getextraspace", typ = 2;
"\4",
"[-0, +0, -]",
"void *lua_getextraspace (lua_State *L);",
"\4",
"Returns a pointer to a raw memory area associated with the given Lua state.",
"The application can use this area for any purpose; Lua does not use it for anything.",
"\4",
"Each new thread has this area initialized with a copy of the area of the main thread.",
"\4",
"By default, this area has the size of a pointer to void, but you can recompile Lua with a different size for this area.",
"(See \"LUA_EXTRASPACE\" in \"luaconf.h\".)",
},
{ title = "lua_getglobal", typ = 2;
"\4",
"[-0, +1, e]",
"int lua_getglobal (lua_State *L, const char *name);",
"\4",
"Pushes onto the stack the value of the global \"name\".",
"Returns the type of that value.",
},
{ title = "lua_geti", typ = 2;
"\4",
"[-0, +1, e]",
"int lua_geti (lua_State *L, int index, lua_Integer i);",
"\4",
"Pushes onto the stack the value \"t[i]\", where \"t\" is the value at the given index.",
"As in Lua, this function may trigger a metamethod for the \"index\" event (see §2.4).",
"\4",
"Returns the type of the pushed value.",
},
{ title = "lua_getmetatable", typ = 2;
"\4",
"[-0, +(0|1), -]",
"int lua_getmetatable (lua_State *L, int index);",
"\4",
"If the value at the given index has a metatable, the function pushes that metatable onto the stack and returns 1.",
"Otherwise, the function returns 0 and pushes nothing on the stack.",
},
{ title = "lua_gettable", typ = 2;
"\4",
"[-1, +1, e]",
"int lua_gettable (lua_State *L, int index);",
"\4",
"Pushes onto the stack the value \"t[k]\", where \"t\" is the value at the given index and \"k\" is the value at the top of the stack.",
"\4",
"This function pops the key from the stack, pushing the resulting value in its place.",
"As in Lua, this function may trigger a metamethod for the \"index\" event (see §2.4).",
"\4",
"Returns the type of the pushed value.",
},
{ title = "lua_gettop", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_gettop (lua_State *L);",
"\4",
"Returns the index of the top element in the stack.",
"Because indices start at 1, this result is equal to the number of elements in the stack; in particular, 0 means an empty stack.",
},
{ title = "lua_getuservalue", typ = 2;
"\4",
"[-0, +1, -]",
"int lua_getuservalue (lua_State *L, int index);",
"\4",
"Pushes onto the stack the Lua value associated with the userdata at the given index.",
"\4",
"Returns the type of the pushed value.",
},
{ title = "lua_insert", typ = 2;
"\4",
"[-1, +1, -]",
"void lua_insert (lua_State *L, int index);",
"\4",
"Moves the top element into the given valid index, shifting up the elements above this index to open space.",
"This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.",
},
{ title = "lua_Integer", typ = 2;
"typedef ... lua_Integer;",
"\4",
"The type of integers in Lua.",
"\4",
"By default this type is \"long long\", (usually a 64-bit two-complement integer), but that can be changed to \"long\" or \"int\" (usually a 32-bit two-complement integer).",
"(See \"LUA_INT\" in \"luaconf.h\".)",
"\4",
"Lua also defines the constants \"LUA_MININTEGER\" and \"LUA_MAXINTEGER\", with the minimum and the maximum values that fit in this type.",
},
{ title = "lua_isboolean", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isboolean (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a boolean, and 0 otherwise.",
},
{ title = "lua_iscfunction", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_iscfunction (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a C function, and 0 otherwise.",
},
{ title = "lua_isfunction", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isfunction (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a function (either C or Lua), and 0 otherwise.",
},
{ title = "lua_isinteger", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isinteger (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is an integer (that is, the value is a number and is represented as an integer), and 0 otherwise.",
},
{ title = "lua_islightuserdata", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_islightuserdata (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a light userdata, and 0 otherwise.",
},
{ title = "lua_isnil", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isnil (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is nil, and 0 otherwise.",
},
{ title = "lua_isnone", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isnone (lua_State *L, int index);",
"\4",
"Returns 1 if the given index is not valid, and 0 otherwise.",
},
{ title = "lua_isnoneornil", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isnoneornil (lua_State *L, int index);",
"\4",
"Returns 1 if the given index is not valid or if the value at this index is nil, and 0 otherwise.",
},
{ title = "lua_isnumber", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isnumber (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a number or a string convertible to a number, and 0 otherwise.",
},
{ title = "lua_isstring", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isstring (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a string or a number (which is always convertible to a string), and 0 otherwise.",
},
{ title = "lua_istable", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_istable (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a table, and 0 otherwise.",
},
{ title = "lua_isthread", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isthread (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a thread, and 0 otherwise.",
},
{ title = "lua_isuserdata", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isuserdata (lua_State *L, int index);",
"\4",
"Returns 1 if the value at the given index is a userdata (either full or light), and 0 otherwise.",
},
{ title = "lua_isyieldable", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_isyieldable (lua_State *L);",
"\4",
"Returns 1 if the given coroutine can yield, and 0 otherwise.",
},
{ title = "lua_KContext", typ = 2;
"typedef ... lua_KContext;",
"\4",
"The type for continuation-function contexts.",
"It must be a numerical type.",
"This type is defined as \"intptr_t\" when \"intptr_t\" is available, so that it can store pointers too.",
"Otherwise, it is defined as \"ptrdiff_t\".",
},
{ title = "lua_KFunction", typ = 2;
"typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);",
"\4",
"Type for continuation functions (see §4.7).",
},
{ title = "lua_len", typ = 2;
"\4",
"[-0, +1, e]",
"void lua_len (lua_State *L, int index);",
"\4",
"Returns the length of the value at the given index.",
"It is equivalent to the \"#\" operator in Lua (see §3.4.7) and may trigger a metamethod for the \"length\" event (see §2.4).",
"The result is pushed on the stack.",
},
{ title = "lua_load", typ = 2;
"\4",
"[-0, +1, -]",
"\3int lua_load (lua_State *L,",
"\3              lua_Reader reader,",
"\3              void *data,",
"\3              const char *chunkname,              const char *mode);",
"\4",
"Loads a Lua chunk without running it.",
"If there are no errors, \"lua_load\" pushes the compiled chunk as a Lua function on top of the stack.",
"Otherwise, it pushes an error message.",
"\4",
"The return values of \"lua_load\" are:",
"\2\"LUA_OK\":  no errors;",
"\2\"LUA_ERRSYNTAX\":  syntax error during precompilation;",
"\2\"LUA_ERRMEM\":  memory allocation error;",
"\2\"LUA_ERRGCMM\":  error while running a \"__gc\" metamethod.",
"(This error has no relation with the chunk being loaded.",
"It is generated by the garbage collector.)",
"\2",
"\4",
"The \"lua_load\" function uses a user-supplied \"reader\" function to read the chunk (see \"lua_Reader\").",
"The \"data\" argument is an opaque value passed to the reader function.",
"\4",
"The \"chunkname\" argument gives a name to the chunk, which is used for error messages and in debug information (see §4.9).",
"\4",
"\"lua_load\" automatically detects whether the chunk is text or binary and loads it accordingly (see program \"luac\").",
"The string \"mode\" works as in function \"load\", with the addition that a \"NULL\" value is equivalent to the string \"bt\".",
"\4",
"\"lua_load\" uses the stack internally, so the reader function must always leave the stack unmodified when returning.",
"\4",
"If the resulting function has upvalues, its first upvalue is set to the value of the global environment stored at index \"LUA_RIDX_GLOBALS\" in the registry (see §4.5).",
"When loading main chunks, this upvalue will be the \"_ENV\" variable (see §2.2).",
"Other upvalues are initialized with nil.",
},
{ title = "lua_newstate", typ = 2;
"\4",
"[-0, +0, -]",
"lua_State *lua_newstate (lua_Alloc f, void *ud);",
"\4",
"Creates a new thread running in a new, independent state.",
"Returns \"NULL\" if it cannot create the thread or the state (due to lack of memory).",
"The argument \"f\" is the allocator function; Lua does all memory allocation for this state through this function.",
"The second argument, \"ud\", is an opaque pointer that Lua passes to the allocator in every call.",
},
{ title = "lua_newtable", typ = 2;
"\4",
"[-0, +1, e]",
"void lua_newtable (lua_State *L);",
"\4",
"Creates a new empty table and pushes it onto the stack.",
"It is equivalent to \"lua_createtable(L, 0, 0)\".",
},
{ title = "lua_newthread", typ = 2;
"\4",
"[-0, +1, e]",
"lua_State *lua_newthread (lua_State *L);",
"\4",
"Creates a new thread, pushes it on the stack, and returns a pointer to a \"lua_State\" that represents this new thread.",
"The new thread returned by this function shares with the original thread its global environment, but has an independent execution stack.",
"\4",
"There is no explicit function to close or to destroy a thread.",
"Threads are subject to garbage collection, like any Lua object.",
},
{ title = "lua_newuserdata", typ = 2;
"\4",
"[-0, +1, e]",
"void *lua_newuserdata (lua_State *L, size_t size);",
"\4",
"This function allocates a new block of memory with the given size, pushes onto the stack a new full userdata with the block address, and returns this address.",
"The host program can freely use this memory.",
},
{ title = "lua_next", typ = 2;
"\4",
"[-1, +(2|0), e]",
"int lua_next (lua_State *L, int index);",
"\4",
"Pops a key from the stack, and pushes a key-value pair from the table at the given index (the \"next\" pair after the given key).",
"If there are no more elements in the table, then \"lua_next\" returns 0 (and pushes nothing).",
"\4",
"A typical traversal looks like this:",
"\3     /* table is in the stack at index 't' */",
"\3     lua_pushnil(L);  /* first key */",
"\3     while (lua_next(L, t) != 0) {",
"\3       /* uses 'key' (at index -2) and 'value' (at index -1) */",
"\3       printf(\"%s - %s\\n\",",
"\3              lua_typename(L, lua_type(L, -2)),",
"\3              lua_typename(L, lua_type(L, -1)));",
"\3       /* removes 'value'; keeps 'key' for next iteration */",
"\3       lua_pop(L, 1);",
"\3     }",
"\4",
"While traversing a table, do not call \"lua_tolstring\" directly on a key, unless you know that the key is actually a string.",
"Recall that \"lua_tolstring\" may change the value at the given index; this confuses the next call to \"lua_next\".",
"\4",
"See function \"next\" for the caveats of modifying the table during its traversal.",
},
{ title = "lua_Number", typ = 2;
"typedef double lua_Number;",
"\4",
"The type of floats in Lua.",
"\4",
"By default this type is double, but that can be changed to a single float.",
"(See \"LUA_REAL\" in \"luaconf.h\".)",
},
{ title = "lua_numbertointeger", typ = 2;
"int lua_numbertointeger (lua_Number n, lua_Integer *p);",
"\4",
"Converts a Lua float to a Lua integer.",
"This macro assumes that \"n\" has an integral value.",
"If that value is within the range of Lua integers, it is converted to an integer and assigned to \"*p\".",
"The macro results in a boolean indicating whether the conversion was successful.",
"(Note that this range test can be tricky to do correctly without this macro, due to roundings.)",
"\4",
"This macro may evaluate its arguments more than once.",
},
{ title = "lua_pcall", typ = 2;
"\4",
"[-(nargs + 1), +(nresults|1), -]",
"int lua_pcall (lua_State *L, int nargs, int nresults, int msgh);",
"\4",
"Calls a function in protected mode.",
"\4",
"Both \"nargs\" and \"nresults\" have the same meaning as in \"lua_call\".",
"If there are no errors during the call, \"lua_pcall\" behaves exactly like \"lua_call\".",
"However, if there is any error, \"lua_pcall\" catches it, pushes a single value on the stack (the error message), and returns an error code.",
"Like \"lua_call\", \"lua_pcall\" always removes the function and its arguments from the stack.",
"\4",
"If \"msgh\" is 0, then the error message returned on the stack is exactly the original error message.",
"Otherwise, \"msgh\" is the stack index of a message handler.",
"(In the current implementation, this index cannot be a pseudo-index.)",
"In case of runtime errors, this function will be called with the error message and its return value will be the message returned on the stack by \"lua_pcall\".",
"\4",
"Typically, the message handler is used to add more debug information to the error message, such as a stack traceback.",
"Such information cannot be gathered after the return of \"lua_pcall\", since by then the stack has unwound.",
"\4",
"The \"lua_pcall\" function returns one of the following constants (defined in \"lua.h\"):",
"\2\"LUA_OK\" (0):  success.",
"\2\"LUA_ERRRUN\":  a runtime error.",
"\2\"LUA_ERRMEM\":  memory allocation error.",
"For such errors, Lua does not call the message handler.",
"\2\"LUA_ERRERR\":  error while running the message handler.",
"\2\"LUA_ERRGCMM\":  error while running a \"__gc\" metamethod.",
"(This error typically has no relation with the function being called.)",
"\2",
},
{ title = "lua_pcallk", typ = 2;
"\4",
"[-(nargs + 1), +(nresults|1), -]",
"\3int lua_pcallk (lua_State *L,",
"\3                int nargs,",
"\3                int nresults,",
"\3                int msgh,",
"\3                lua_KContext ctx,                lua_KFunction k);",
"\4",
"This function behaves exactly like \"lua_pcall\", but allows the called function to yield (see §4.7).",
},
{ title = "lua_pop", typ = 2;
"\4",
"[-n, +0, -]",
"void lua_pop (lua_State *L, int n);",
"\4",
"Pops \"n\" elements from the stack.",
},
{ title = "lua_pushboolean", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushboolean (lua_State *L, int b);",
"\4",
"Pushes a boolean value with value \"b\" onto the stack.",
},
{ title = "lua_pushcclosure", typ = 2;
"\4",
"[-n, +1, e]",
"void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);",
"\4",
"Pushes a new C closure onto the stack.",
"\4",
"When a C function is created, it is possible to associate some values with it, thus creating a C closure (see §4.4); these values are then accessible to the function whenever it is called.",
"To associate values with a C function, first these values must be pushed onto the stack (when there are multiple values, the first value is pushed first).",
"Then \"lua_pushcclosure\" is called to create and push the C function onto the stack, with the argument \"n\" telling how many values will be associated with the function.",
"\"lua_pushcclosure\" also pops these values from the stack.",
"\4",
"The maximum value for \"n\" is 255.",
"\4",
"When \"n\" is zero, this function creates a light C function, which is just a pointer to the C function.",
"In that case, it never raises a memory error.",
},
{ title = "lua_pushcfunction", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushcfunction (lua_State *L, lua_CFunction f);",
"\4",
"Pushes a C function onto the stack.",
"This function receives a pointer to a C function and pushes onto the stack a Lua value of type \"function\" that, when called, invokes the corresponding C function.",
"\4",
"Any function to be registered in Lua must follow the correct protocol to receive its parameters and return its results (see \"lua_CFunction\").",
"\4",
"\"lua_pushcfunction\" is defined as a macro:",
"\3     #define lua_pushcfunction(L,f)  lua_pushcclosure(L,f,0)",
"\4",
"Note that \"f\" is used twice.",
},
{ title = "lua_pushfstring", typ = 2;
"\4",
"[-0, +1, e]",
"const char *lua_pushfstring (lua_State *L, const char *fmt, ...);",
"\4",
"Pushes onto the stack a formatted string and returns a pointer to this string.",
"It is similar to the ISO C function \"sprintf\", but has some important differences:",
"\2You do not have to allocate space for the result: the result is a Lua string and Lua takes care of memory allocation (and deallocation, through garbage collection).",
"\2The conversion specifiers are quite restricted.",
"There are no flags, widths, or precisions.",
"The conversion specifiers can only be \"%%\" (inserts the character \"%\"), \"%s\" (inserts a zero-terminated string, with no size restrictions), \"%f\" (inserts a \"lua_Number\"), \"%L\" (inserts a \"lua_Integer\"), \"%p\" (inserts a pointer as a hexadecimal numeral), \"%d\" (inserts an \"int\"), \"%c\" (inserts an \"int\" as a one-byte character), and \"%U\" (inserts a \"long int\" as a UTF-8 byte sequence).",
"\2",
},
{ title = "lua_pushglobaltable", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushglobaltable (lua_State *L);",
"\4",
"Pushes the global environment onto the stack.",
},
{ title = "lua_pushinteger", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushinteger (lua_State *L, lua_Integer n);",
"\4",
"Pushes an integer with value \"n\" onto the stack.",
},
{ title = "lua_pushlightuserdata", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushlightuserdata (lua_State *L, void *p);",
"\4",
"Pushes a light userdata onto the stack.",
"\4",
"Userdata represent C values in Lua.",
"A light userdata represents a pointer, a \"void*\".",
"It is a value (like a number): you do not create it, it has no individual metatable, and it is not collected (as it was never created).",
"A light userdata is equal to \"any\" light userdata with the same C address.",
},
{ title = "lua_pushliteral", typ = 2;
"\4",
"[-0, +1, e]",
"const char *lua_pushliteral (lua_State *L, const char *s);",
"\4",
"This macro is equivalent to \"lua_pushlstring\", but can be used only when \"s\" is a literal string.",
"It automatically provides the string length.",
},
{ title = "lua_pushlstring", typ = 2;
"\4",
"[-0, +1, e]",
"const char *lua_pushlstring (lua_State *L, const char *s, size_t len);",
"\4",
"Pushes the string pointed to by \"s\" with size \"len\" onto the stack.",
"Lua makes (or reuses) an internal copy of the given string, so the memory at \"s\" can be freed or reused immediately after the function returns.",
"The string can contain any binary data, including embedded zeros.",
"\4",
"Returns a pointer to the internal copy of the string.",
},
{ title = "lua_pushnil", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushnil (lua_State *L);",
"\4",
"Pushes a nil value onto the stack.",
},
{ title = "lua_pushnumber", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushnumber (lua_State *L, lua_Number n);",
"\4",
"Pushes a float with value \"n\" onto the stack.",
},
{ title = "lua_pushstring", typ = 2;
"\4",
"[-0, +1, e]",
"const char *lua_pushstring (lua_State *L, const char *s);",
"\4",
"Pushes the zero-terminated string pointed to by \"s\" onto the stack.",
"Lua makes (or reuses) an internal copy of the given string, so the memory at \"s\" can be freed or reused immediately after the function returns.",
"\4",
"Returns a pointer to the internal copy of the string.",
"\4",
"If \"s\" is \"NULL\", pushes nil and returns \"NULL\".",
},
{ title = "lua_pushthread", typ = 2;
"\4",
"[-0, +1, -]",
"int lua_pushthread (lua_State *L);",
"\4",
"Pushes the thread represented by \"L\" onto the stack.",
"Returns 1 if this thread is the main thread of its state.",
},
{ title = "lua_pushvalue", typ = 2;
"\4",
"[-0, +1, -]",
"void lua_pushvalue (lua_State *L, int index);",
"\4",
"Pushes a copy of the element at the given index onto the stack.",
},
{ title = "lua_pushvfstring", typ = 2;
"\4",
"[-0, +1, e]",
"\3const char *lua_pushvfstring (lua_State *L,",
"\3                              const char *fmt,                              va_list argp);",
"\4",
"Equivalent to \"lua_pushfstring\", except that it receives a \"va_list\" instead of a variable number of arguments.",
},
{ title = "lua_rawequal", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_rawequal (lua_State *L, int index1, int index2);",
"\4",
"Returns 1 if the two values in indices \"index1\" and \"index2\" are primitively equal (that is, without calling metamethods).",
"Otherwise returns 0.",
"Also returns 0 if any of the indices are not valid.",
},
{ title = "lua_rawget", typ = 2;
"\4",
"[-1, +1, -]",
"int lua_rawget (lua_State *L, int index);",
"\4",
"Similar to \"lua_gettable\", but does a raw access (i.e., without metamethods).",
},
{ title = "lua_rawgeti", typ = 2;
"\4",
"[-0, +1, -]",
"int lua_rawgeti (lua_State *L, int index, lua_Integer n);",
"\4",
"Pushes onto the stack the value \"t[n]\", where \"t\" is the table at the given index.",
"The access is raw; that is, it does not invoke metamethods.",
"\4",
"Returns the type of the pushed value.",
},
{ title = "lua_rawgetp", typ = 2;
"\4",
"[-0, +1, -]",
"int lua_rawgetp (lua_State *L, int index, const void *p);",
"\4",
"Pushes onto the stack the value \"t[k]\", where \"t\" is the table at the given index and \"k\" is the pointer \"p\" represented as a light userdata.",
"The access is raw; that is, it does not invoke metamethods.",
"\4",
"Returns the type of the pushed value.",
},
{ title = "lua_rawlen", typ = 2;
"\4",
"[-0, +0, -]",
"size_t lua_rawlen (lua_State *L, int index);",
"\4",
"Returns the raw \"length\" of the value at the given index: for strings, this is the string length; for tables, this is the result of the length operator (\"#\") with no metamethods; for userdata, this is the size of the block of memory allocated for the userdata; for other values, it is 0.",
},
{ title = "lua_rawset", typ = 2;
"\4",
"[-2, +0, e]",
"void lua_rawset (lua_State *L, int index);",
"\4",
"Similar to \"lua_settable\", but does a raw assignment (i.e., without metamethods).",
},
{ title = "lua_rawseti", typ = 2;
"\4",
"[-1, +0, e]",
"void lua_rawseti (lua_State *L, int index, lua_Integer i);",
"\4",
"Does the equivalent of \"t[i] = v\", where \"t\" is the table at the given index and \"v\" is the value at the top of the stack.",
"\4",
"This function pops the value from the stack.",
"The assignment is raw; that is, it does not invoke metamethods.",
},
{ title = "lua_rawsetp", typ = 2;
"\4",
"[-1, +0, e]",
"void lua_rawsetp (lua_State *L, int index, const void *p);",
"\4",
"Does the equivalent of \"t[k] = v\", where \"t\" is the table at the given index, \"k\" is the pointer \"p\" represented as a light userdata, and \"v\" is the value at the top of the stack.",
"\4",
"This function pops the value from the stack.",
"The assignment is raw; that is, it does not invoke metamethods.",
},
{ title = "lua_Reader", typ = 2;
"\3typedef const char * (*lua_Reader) (lua_State *L,",
"\3                                    void *data,                                    size_t *size);",
"\4",
"The reader function used by \"lua_load\".",
"Every time it needs another piece of the chunk, \"lua_load\" calls the reader, passing along its \"data\" parameter.",
"The reader must return a pointer to a block of memory with a new piece of the chunk and set \"size\" to the block size.",
"The block must exist until the reader function is called again.",
"To signal the end of the chunk, the reader must return \"NULL\" or set \"size\" to zero.",
"The reader function may return pieces of any size greater than zero.",
},
{ title = "lua_register", typ = 2;
"\4",
"[-0, +0, e]",
"void lua_register (lua_State *L, const char *name, lua_CFunction f);",
"\4",
"Sets the C function \"f\" as the new value of global \"name\".",
"It is defined as a macro:",
"\3     #define lua_register(L,n,f) \\",
"\3            (lua_pushcfunction(L, f), lua_setglobal(L, n))",
},
{ title = "lua_remove", typ = 2;
"\4",
"[-1, +0, -]",
"void lua_remove (lua_State *L, int index);",
"\4",
"Removes the element at the given valid index, shifting down the elements above this index to fill the gap.",
"This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.",
},
{ title = "lua_replace", typ = 2;
"\4",
"[-1, +0, -]",
"void lua_replace (lua_State *L, int index);",
"\4",
"Moves the top element into the given valid index without shifting any element (therefore replacing the value at the given index), and then pops the top element.",
},
{ title = "lua_resume", typ = 2;
"\4",
"[-?, +?, -]",
"int lua_resume (lua_State *L, lua_State *from, int nargs);",
"\4",
"Starts and resumes a coroutine in a given thread.",
"\4",
"To start a coroutine, you push onto the thread stack the main function plus any arguments; then you call \"lua_resume\", with \"nargs\" being the number of arguments.",
"This call returns when the coroutine suspends or finishes its execution.",
"When it returns, the stack contains all values passed to \"lua_yield\", or all values returned by the body function.",
"\"lua_resume\" returns \"LUA_YIELD\" if the coroutine yields, \"LUA_OK\" if the coroutine finishes its execution without errors, or an error code in case of errors (see \"lua_pcall\").",
"\4",
"In case of errors, the stack is not unwound, so you can use the debug API over it.",
"The error message is on the top of the stack.",
"\4",
"To resume a coroutine, you remove any results from the last \"lua_yield\", put on its stack only the values to be passed as results from \"yield\", and then call \"lua_resume\".",
"\4",
"The parameter \"from\" represents the coroutine that is resuming \"L\".",
"If there is no such coroutine, this parameter can be \"NULL\".",
},
{ title = "lua_rotate", typ = 2;
"\4",
"[-0, +0, -]",
"void lua_rotate (lua_State *L, int idx, int n);",
"\4",
"Rotates the stack elements from \"idx\" to the top \"n\" positions in the direction of the top, for a positive \"n\", or \"-n\" positions in the direction of the bottom, for a negative \"n\".",
"The absolute value of \"n\" must not be greater than the size of the slice being rotated.",
},
{ title = "lua_setallocf", typ = 2;
"\4",
"[-0, +0, -]",
"void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);",
"\4",
"Changes the allocator function of a given state to \"f\" with user data \"ud\".",
},
{ title = "lua_setfield", typ = 2;
"\4",
"[-1, +0, e]",
"void lua_setfield (lua_State *L, int index, const char *k);",
"\4",
"Does the equivalent to \"t[k] = v\", where \"t\" is the value at the given index and \"v\" is the value at the top of the stack.",
"\4",
"This function pops the value from the stack.",
"As in Lua, this function may trigger a metamethod for the \"newindex\" event (see §2.4).",
},
{ title = "lua_setglobal", typ = 2;
"\4",
"[-1, +0, e]",
"void lua_setglobal (lua_State *L, const char *name);",
"\4",
"Pops a value from the stack and sets it as the new value of global \"name\".",
},
{ title = "lua_seti", typ = 2;
"\4",
"[-1, +0, e]",
"void lua_seti (lua_State *L, int index, lua_Integer n);",
"\4",
"Does the equivalent to \"t[n] = v\", where \"t\" is the value at the given index and \"v\" is the value at the top of the stack.",
"\4",
"This function pops the value from the stack.",
"As in Lua, this function may trigger a metamethod for the \"newindex\" event (see §2.4).",
},
{ title = "lua_setmetatable", typ = 2;
"\4",
"[-1, +0, -]",
"void lua_setmetatable (lua_State *L, int index);",
"\4",
"Pops a table from the stack and sets it as the new metatable for the value at the given index.",
},
{ title = "lua_settable", typ = 2;
"\4",
"[-2, +0, e]",
"void lua_settable (lua_State *L, int index);",
"\4",
"Does the equivalent to \"t[k] = v\", where \"t\" is the value at the given index, \"v\" is the value at the top of the stack, and \"k\" is the value just below the top.",
"\4",
"This function pops both the key and the value from the stack.",
"As in Lua, this function may trigger a metamethod for the \"newindex\" event (see §2.4).",
},
{ title = "lua_settop", typ = 2;
"\4",
"[-?, +?, -]",
"void lua_settop (lua_State *L, int index);",
"\4",
"Accepts any index, or 0, and sets the stack top to this index.",
"If the new top is larger than the old one, then the new elements are filled with nil.",
"If \"index\" is 0, then all stack elements are removed.",
},
{ title = "lua_setuservalue", typ = 2;
"\4",
"[-1, +0, -]",
"void lua_setuservalue (lua_State *L, int index);",
"\4",
"Pops a value from the stack and sets it as the new value associated to the userdata at the given index.",
},
{ title = "lua_State", typ = 2;
"typedef struct lua_State lua_State;",
"\4",
"An opaque structure that points to a thread and indirectly (through the thread) to the whole state of a Lua interpreter.",
"The Lua library is fully reentrant: it has no global variables.",
"All information about a state is accessible through this structure.",
"\4",
"A pointer to this structure must be passed as the first argument to every function in the library, except to \"lua_newstate\", which creates a Lua state from scratch.",
},
{ title = "lua_status", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_status (lua_State *L);",
"\4",
"Returns the status of the thread \"L\".",
"\4",
"The status can be 0 (\"LUA_OK\") for a normal thread, an error code if the thread finished the execution of a \"lua_resume\" with an error, or \"LUA_YIELD\" if the thread is suspended.",
"\4",
"You can only call functions in threads with status \"LUA_OK\".",
"You can resume threads with status \"LUA_OK\" (to start a new coroutine) or \"LUA_YIELD\" (to resume a coroutine).",
},
{ title = "lua_stringtonumber", typ = 2;
"\4",
"[-0, +1, -]",
"size_t lua_stringtonumber (lua_State *L, const char *s);",
"\4",
"Converts the zero-terminated string \"s\" to a number, pushes that number into the stack, and returns the total size of the string, that is, its length plus one.",
"The conversion can result in an integer or a float, according to the lexical conventions of Lua (see §3.1).",
"The string may have leading and trailing spaces and a sign.",
"If the string is not a valid numeral, returns 0 and pushes nothing.",
"(Note that the result can be used as a boolean, true if the conversion succeeds.)",
},
{ title = "lua_toboolean", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_toboolean (lua_State *L, int index);",
"\4",
"Converts the Lua value at the given index to a C boolean value (0 or 1).",
"Like all tests in Lua, \"lua_toboolean\" returns true for any Lua value different from false and nil; otherwise it returns false.",
"(If you want to accept only actual boolean values, use \"lua_isboolean\" to test the value's type.)",
},
{ title = "lua_tocfunction", typ = 2;
"\4",
"[-0, +0, -]",
"lua_CFunction lua_tocfunction (lua_State *L, int index);",
"\4",
"Converts a value at the given index to a C function.",
"That value must be a C function; otherwise, returns \"NULL\".",
},
{ title = "lua_tointeger", typ = 2;
"\4",
"[-0, +0, -]",
"lua_Integer lua_tointeger (lua_State *L, int index);",
"\4",
"Equivalent to \"lua_tointegerx\" with \"isnum\" equal to \"NULL\".",
},
{ title = "lua_tointegerx", typ = 2;
"\4",
"[-0, +0, -]",
"lua_Integer lua_tointegerx (lua_State *L, int index, int *isnum);",
"\4",
"Converts the Lua value at the given index to the signed integral type \"lua_Integer\".",
"The Lua value must be an integer, or a number or string convertible to an integer (see §3.4.3); otherwise, \"lua_tointegerx\" returns 0.",
"\4",
"If \"isnum\" is not \"NULL\", its referent is assigned a boolean value that indicates whether the operation succeeded.",
},
{ title = "lua_tolstring", typ = 2;
"\4",
"[-0, +0, e]",
"const char *lua_tolstring (lua_State *L, int index, size_t *len);",
"\4",
"Converts the Lua value at the given index to a C string.",
"If \"len\" is not \"NULL\", it also sets \"*len\" with the string length.",
"The Lua value must be a string or a number; otherwise, the function returns \"NULL\".",
"If the value is a number, then \"lua_tolstring\" also changes the actual value in the stack to a string.",
"(This change confuses \"lua_next\" when \"lua_tolstring\" is applied to keys during a table traversal.)",
"\4",
"\"lua_tolstring\" returns a fully aligned pointer to a string inside the Lua state.",
"This string always has a zero (\"\\0\") after its last character (as in C), but can contain other zeros in its body.",
"\4",
"Because Lua has garbage collection, there is no guarantee that the pointer returned by \"lua_tolstring\" will be valid after the corresponding Lua value is removed from the stack.",
},
{ title = "lua_tonumber", typ = 2;
"\4",
"[-0, +0, -]",
"lua_Number lua_tonumber (lua_State *L, int index);",
"\4",
"Equivalent to \"lua_tonumberx\" with \"isnum\" equal to \"NULL\".",
},
{ title = "lua_tonumberx", typ = 2;
"\4",
"[-0, +0, -]",
"lua_Number lua_tonumberx (lua_State *L, int index, int *isnum);",
"\4",
"Converts the Lua value at the given index to the C type \"lua_Number\" (see \"lua_Number\").",
"The Lua value must be a number or a string convertible to a number (see §3.4.3); otherwise, \"lua_tonumberx\" returns 0.",
"\4",
"If \"isnum\" is not \"NULL\", its referent is assigned a boolean value that indicates whether the operation succeeded.",
},
{ title = "lua_topointer", typ = 2;
"\4",
"[-0, +0, -]",
"const void *lua_topointer (lua_State *L, int index);",
"\4",
"Converts the value at the given index to a generic C pointer (\"void*\").",
"The value can be a userdata, a table, a thread, or a function; otherwise, \"lua_topointer\" returns \"NULL\".",
"Different objects will give different pointers.",
"There is no way to convert the pointer back to its original value.",
"\4",
"Typically this function is used only for debug information.",
},
{ title = "lua_tostring", typ = 2;
"\4",
"[-0, +0, e]",
"const char *lua_tostring (lua_State *L, int index);",
"\4",
"Equivalent to \"lua_tolstring\" with \"len\" equal to \"NULL\".",
},
{ title = "lua_tothread", typ = 2;
"\4",
"[-0, +0, -]",
"lua_State *lua_tothread (lua_State *L, int index);",
"\4",
"Converts the value at the given index to a Lua thread (represented as \"lua_State*\").",
"This value must be a thread; otherwise, the function returns \"NULL\".",
},
{ title = "lua_touserdata", typ = 2;
"\4",
"[-0, +0, -]",
"void *lua_touserdata (lua_State *L, int index);",
"\4",
"If the value at the given index is a full userdata, returns its block address.",
"If the value is a light userdata, returns its pointer.",
"Otherwise, returns \"NULL\".",
},
{ title = "lua_type", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_type (lua_State *L, int index);",
"\4",
"Returns the type of the value in the given valid index, or \"LUA_TNONE\" for a non-valid (but acceptable) index.",
"The types returned by \"lua_type\" are coded by the following constants defined in \"lua.h\": \"LUA_TNIL\", \"LUA_TNUMBER\", \"LUA_TBOOLEAN\", \"LUA_TSTRING\", \"LUA_TTABLE\", \"LUA_TFUNCTION\", \"LUA_TUSERDATA\", \"LUA_TTHREAD\", and \"LUA_TLIGHTUSERDATA\".",
},
{ title = "lua_typename", typ = 2;
"\4",
"[-0, +0, -]",
"const char *lua_typename (lua_State *L, int tp);",
"\4",
"Returns the name of the type encoded by the value \"tp\", which must be one the values returned by \"lua_type\".",
},
{ title = "lua_Unsigned", typ = 2;
"typedef ... lua_Unsigned;",
"\4",
"The unsigned version of \"lua_Integer\".",
},
{ title = "lua_upvalueindex", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_upvalueindex (int i);",
"\4",
"Returns the pseudo-index that represents the \"i\"-th upvalue of the running function (see §4.4).",
},
{ title = "lua_version", typ = 2;
"\4",
"[-0, +0, v]",
"const lua_Number *lua_version (lua_State *L);",
"\4",
"Returns the address of the version number stored in the Lua core.",
"When called with a valid \"lua_State\", returns the address of the version used to create that state.",
"When called with \"NULL\", returns the address of the version running the call.",
},
{ title = "lua_Writer", typ = 2;
"\3typedef int (*lua_Writer) (lua_State *L,",
"\3                           const void* p,",
"\3                           size_t sz,                           void* ud);",
"\4",
"The type of the writer function used by \"lua_dump\".",
"Every time it produces another piece of chunk, \"lua_dump\" calls the writer, passing along the buffer to be written (\"p\"), its size (\"sz\"), and the \"data\" parameter supplied to \"lua_dump\".",
"\4",
"The writer returns an error code: 0 means no errors; any other value means an error and stops \"lua_dump\" from calling the writer again.",
},
{ title = "lua_xmove", typ = 2;
"\4",
"[-?, +?, -]",
"void lua_xmove (lua_State *from, lua_State *to, int n);",
"\4",
"Exchange values between different threads of the same state.",
"\4",
"This function pops \"n\" values from the stack \"from\", and pushes them onto the stack \"to\".",
},
{ title = "lua_yield", typ = 2;
"\4",
"[-?, +?, e]",
"int lua_yield (lua_State *L, int nresults);",
"\4",
"This function is equivalent to \"lua_yieldk\", but it has no continuation (see §4.7).",
"Therefore, when the thread resumes, it continues the function that called the function calling \"lua_yield\".",
},
{ title = "lua_yieldk", typ = 2;
"\4",
"[-?, +?, e]",
"\3int lua_yieldk (lua_State *L,",
"\3                int nresults,",
"\3                lua_KContext ctx,                lua_KFunction k);",
"\4",
"Yields a coroutine (thread).",
"\4",
"When a C function calls \"lua_yieldk\", the running coroutine suspends its execution, and the call to \"lua_resume\" that started this coroutine returns.",
"The parameter \"nresults\" is the number of values from the stack that will be passed as results to \"lua_resume\".",
"\4",
"When the coroutine is resumed again, Lua calls the given continuation function \"k\" to continue the execution of the C function that yielded (see §4.7).",
"This continuation function receives the same stack from the previous function, with the \"n\" results removed and replaced by the arguments passed to \"lua_resume\".",
"Moreover, the continuation function receives the value \"ctx\" that was passed to \"lua_yieldk\".",
"\4",
"Usually, this function does not return; when the coroutine eventually resumes, it continues executing the continuation function.",
"However, there is one special case, which is when this function is called from inside a line hook (see §4.9).",
"In that case, \"lua_yieldk\" should be called with no continuation (probably in the form of \"lua_yield\"), and the hook should return immediately after the call.",
"Lua will yield and, when the coroutine resumes again, it will continue the normal execution of the (Lua) function that triggered the hook.",
"\4",
"This function can raise an error if it is called from a thread with a pending C call with no continuation function, or it is called from a thread that is not running inside a resume (e.g., the main thread).",
},
},
{ title = "4.9 The Debug Interface", typ = 2;
"\4",
"Lua has no built-in debugging facilities.",
"Instead, it offers a special interface by means of functions and hooks.",
"This interface allows the construction of different kinds of debuggers, profilers, and other tools that need \"inside information\" from the interpreter.",
{ title = "lua_Debug", typ = 2;
"\3typedef struct lua_Debug {",
"\3  int event;",
"\3  const char *name;           /* (n) */",
"\3  const char *namewhat;       /* (n) */",
"\3  const char *what;           /* (S) */",
"\3  const char *source;         /* (S) */",
"\3  int currentline;            /* (l) */",
"\3  int linedefined;            /* (S) */",
"\3  int lastlinedefined;        /* (S) */",
"\3  unsigned char nups;         /* (u) number of upvalues */",
"\3  unsigned char nparams;      /* (u) number of parameters */",
"\3  char isvararg;              /* (u) */",
"\3  char istailcall;            /* (t) */",
"\3  char short_src[LUA_IDSIZE]; /* (S) */",
"\3  /* private part */",
"\3  other fields} lua_Debug;",
"\4",
"A structure used to carry different pieces of information about a function or an activation record.",
"\"lua_getstack\" fills only the private part of this structure, for later use.",
"To fill the other fields of \"lua_Debug\" with useful information, call \"lua_getinfo\".",
"\4",
"The fields of \"lua_Debug\" have the following meaning:",
"\2\"source\":  the name of the chunk that created the function.",
"If \"source\" starts with a \"@\", it means that the function was defined in a file where the file name follows the \"@\".",
"If \"source\" starts with a \"=\", the remainder of its contents describe the source in a user-dependent manner.",
"Otherwise, the function was defined in a string where \"source\" is that string.",
"\2\"short_src\":  a \"printable\" version of \"source\", to be used in error messages.",
"\2\"linedefined\":  the line number where the definition of the function starts.",
"\2\"lastlinedefined\":  the line number where the definition of the function ends.",
"\2\"what\":  the string \"Lua\" if the function is a Lua function, \"C\" if it is a C function, \"main\" if it is the main part of a chunk.",
"\2\"currentline\":  the current line where the given function is executing.",
"When no line information is available, \"currentline\" is set to -1.",
"\2\"name\":  a reasonable name for the given function.",
"Because functions in Lua are first-class values, they do not have a fixed name: some functions can be the value of multiple global variables, while others can be stored only in a table field.",
"The \"lua_getinfo\" function checks how the function was called to find a suitable name.",
"If it cannot find a name, then \"name\" is set to \"NULL\".",
"\2\"namewhat\":  explains the \"name\" field.",
"The value of \"namewhat\" can be \"global\", \"local\", \"method\", \"field\", \"upvalue\", or \"\" (the empty string), according to how the function was called.",
"(Lua uses the empty string when no other option seems to apply.)",
"\2\"istailcall\":  true if this function invocation was called by a tail call.",
"In this case, the caller of this level is not in the stack.",
"\2\"nups\":  the number of upvalues of the function.",
"\2\"nparams\":  the number of fixed parameters of the function (always 0 for C functions).",
"\2\"isvararg\":  true if the function is a vararg function (always true for C functions).",
"\2",
},
{ title = "lua_gethook", typ = 2;
"\4",
"[-0, +0, -]",
"lua_Hook lua_gethook (lua_State *L);",
"\4",
"Returns the current hook function.",
},
{ title = "lua_gethookcount", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_gethookcount (lua_State *L);",
"\4",
"Returns the current hook count.",
},
{ title = "lua_gethookmask", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_gethookmask (lua_State *L);",
"\4",
"Returns the current hook mask.",
},
{ title = "lua_getinfo", typ = 2;
"\4",
"[-(0|1), +(0|1|2), e]",
"int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);",
"\4",
"Gets information about a specific function or function invocation.",
"\4",
"To get information about a function invocation, the parameter \"ar\" must be a valid activation record that was filled by a previous call to \"lua_getstack\" or given as argument to a hook (see \"lua_Hook\").",
"\4",
"To get information about a function you push it onto the stack and start the \"what\" string with the character \">\".",
"(In that case, \"lua_getinfo\" pops the function from the top of the stack.)",
"For instance, to know in which line a function \"f\" was defined, you can write the following code:",
"\3     lua_Debug ar;",
"\3     lua_getglobal(L, \"f\");  /* get global 'f' */",
"\3     lua_getinfo(L, \">S\", &ar);",
"\3     printf(\"%d\\n\", ar.linedefined);",
"\4",
"Each character in the string \"what\" selects some fields of the structure \"ar\" to be filled or a value to be pushed on the stack:",
"\2\"n\":  fills in the field \"name\" and \"namewhat\";",
"\2\"S\":  fills in the fields \"source\", \"short_src\", \"linedefined\", \"lastlinedefined\", and \"what\";",
"\2\"l\":  fills in the field \"currentline\";",
"\2\"t\":  fills in the field \"istailcall\";",
"\2\"u\":  fills in the fields \"nups\", \"nparams\", and \"isvararg\";",
"\2\"f\":  pushes onto the stack the function that is running at the given level;",
"\2\"L\":  pushes onto the stack a table whose indices are the numbers of the lines that are valid on the function.",
"(A valid line is a line with some associated code, that is, a line where you can put a break point.",
"Non-valid lines include empty lines and comments.)",
"\4",
"If this option is given together with option \"f\", its table is pushed after the function.",
"\2",
"\4",
"This function returns 0 on error (for instance, an invalid option in \"what\").",
},
{ title = "lua_getlocal", typ = 2;
"\4",
"[-0, +(0|1), -]",
"const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);",
"\4",
"Gets information about a local variable of a given activation record or a given function.",
"\4",
"In the first case, the parameter \"ar\" must be a valid activation record that was filled by a previous call to \"lua_getstack\" or given as argument to a hook (see \"lua_Hook\").",
"The index \"n\" selects which local variable to inspect; see \"debug.getlocal\" for details about variable indices and names.",
"\4",
"\"lua_getlocal\" pushes the variable's value onto the stack and returns its name.",
"\4",
"In the second case, \"ar\" must be \"NULL\" and the function to be inspected must be at the top of the stack.",
"In this case, only parameters of Lua functions are visible (as there is no information about what variables are active) and no values are pushed onto the stack.",
"\4",
"Returns \"NULL\" (and pushes nothing) when the index is greater than the number of active local variables.",
},
{ title = "lua_getstack", typ = 2;
"\4",
"[-0, +0, -]",
"int lua_getstack (lua_State *L, int level, lua_Debug *ar);",
"\4",
"Gets information about the interpreter runtime stack.",
"\4",
"This function fills parts of a \"lua_Debug\" structure with an identification of the activation record of the function executing at a given level.",
"Level 0 is the current running function, whereas level n+1 is the function that has called level n (except for tail calls, which do not count on the stack).",
"When there are no errors, \"lua_getstack\" returns 1; when called with a level greater than the stack depth, it returns 0.",
},
{ title = "lua_getupvalue", typ = 2;
"\4",
"[-0, +(0|1), -]",
"const char *lua_getupvalue (lua_State *L, int funcindex, int n);",
"\4",
"Gets information about a closure's upvalue.",
"(For Lua functions, upvalues are the external local variables that the function uses, and that are consequently included in its closure.)",
"\"lua_getupvalue\" gets the index \"n\" of an upvalue, pushes the upvalue's value onto the stack, and returns its name.",
"\"funcindex\" points to the closure in the stack.",
"(Upvalues have no particular order, as they are active through the whole function.",
"So, they are numbered in an arbitrary order.)",
"\4",
"Returns \"NULL\" (and pushes nothing) when the index is greater than the number of upvalues.",
"For C functions, this function uses the empty string \"\" as a name for all upvalues.",
},
{ title = "lua_Hook", typ = 2;
"typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);",
"\4",
"Type for debugging hook functions.",
"\4",
"Whenever a hook is called, its \"ar\" argument has its field \"event\" set to the specific event that triggered the hook.",
"Lua identifies these events with the following constants: \"LUA_HOOKCALL\", \"LUA_HOOKRET\", \"LUA_HOOKTAILCALL\", \"LUA_HOOKLINE\", and \"LUA_HOOKCOUNT\".",
"Moreover, for line events, the field \"currentline\" is also set.",
"To get the value of any other field in \"ar\", the hook must call \"lua_getinfo\".",
"\4",
"For call events, \"event\" can be \"LUA_HOOKCALL\", the normal value, or \"LUA_HOOKTAILCALL\", for a tail call; in this case, there will be no corresponding return event.",
"\4",
"While Lua is running a hook, it disables other calls to hooks.",
"Therefore, if a hook calls back Lua to execute a function or a chunk, this execution occurs without any calls to hooks.",
"\4",
"Hook functions cannot have continuations, that is, they cannot call \"lua_yieldk\", \"lua_pcallk\", or \"lua_callk\" with a non-null \"k\".",
"\4",
"Hook functions can yield under the following conditions: Only count and line events can yield and they cannot yield any value; to yield a hook function must finish its execution calling \"lua_yield\" with \"nresults\" equal to zero.",
},
{ title = "lua_sethook", typ = 2;
"\4",
"[-0, +0, -]",
"void lua_sethook (lua_State *L, lua_Hook f, int mask, int count);",
"\4",
"Sets the debugging hook function.",
"\4",
"Argument \"f\" is the hook function.",
"\"mask\" specifies on which events the hook will be called: it is formed by a bitwise or of the constants \"LUA_MASKCALL\", \"LUA_MASKRET\", \"LUA_MASKLINE\", and \"LUA_MASKCOUNT\".",
"The \"count\" argument is only meaningful when the mask includes \"LUA_MASKCOUNT\".",
"For each event, the hook is called as explained below:",
"\2The call hook:  is called when the interpreter calls a function.",
"The hook is called just after Lua enters the new function, before the function gets its arguments.",
"\2The return hook:  is called when the interpreter returns from a function.",
"The hook is called just before Lua leaves the function.",
"There is no standard way to access the values to be returned by the function.",
"\2The line hook:  is called when the interpreter is about to start the execution of a new line of code, or when it jumps back in the code (even to the same line).",
"(This event only happens while Lua is executing a Lua function.)",
"\2The count hook:  is called after the interpreter executes every \"count\" instructions.",
"(This event only happens while Lua is executing a Lua function.)",
"\2",
"\4",
"A hook is disabled by setting \"mask\" to zero.",
},
{ title = "lua_setlocal", typ = 2;
"\4",
"[-(0|1), +0, -]",
"const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);",
"\4",
"Sets the value of a local variable of a given activation record.",
"Parameters \"ar\" and \"n\" are as in \"lua_getlocal\" (see \"lua_getlocal\").",
"\"lua_setlocal\" assigns the value at the top of the stack to the variable and returns its name.",
"It also pops the value from the stack.",
"\4",
"Returns \"NULL\" (and pops nothing) when the index is greater than the number of active local variables.",
},
{ title = "lua_setupvalue", typ = 2;
"\4",
"[-(0|1), +0, -]",
"const char *lua_setupvalue (lua_State *L, int funcindex, int n);",
"\4",
"Sets the value of a closure's upvalue.",
"It assigns the value at the top of the stack to the upvalue and returns its name.",
"It also pops the value from the stack.",
"Parameters \"funcindex\" and \"n\" are as in the \"lua_getupvalue\" (see \"lua_getupvalue\").",
"\4",
"Returns \"NULL\" (and pops nothing) when the index is greater than the number of upvalues.",
},
{ title = "lua_upvalueid", typ = 2;
"\4",
"[-0, +0, -]",
"void *lua_upvalueid (lua_State *L, int funcindex, int n);",
"\4",
"Returns a unique identifier for the upvalue numbered \"n\" from the closure at index \"funcindex\".",
"Parameters \"funcindex\" and \"n\" are as in the \"lua_getupvalue\" (see \"lua_getupvalue\") (but \"n\" cannot be greater than the number of upvalues).",
"\4",
"These unique identifiers allow a program to check whether different closures share upvalues.",
"Lua closures that share an upvalue (that is, that access a same external local variable) will return identical ids for those upvalue indices.",
},
{ title = "lua_upvaluejoin", typ = 2;
"\4",
"[-0, +0, -]",
"\3void lua_upvaluejoin (lua_State *L, int funcindex1, int n1,                                    int funcindex2, int n2);",
"\4",
"Make the \"n1\"-th upvalue of the Lua closure at index \"funcindex1\" refer to the \"n2\"-th upvalue of the Lua closure at index \"funcindex2\".",
},
},
},
{ title = "5. The Auxiliary Library", typ = 2;
"\4",
"The auxiliary library provides several convenient functions to interface C with Lua.",
"While the basic API provides the primitive functions for all interactions between C and Lua, the auxiliary library provides higher-level functions for some common tasks.",
"\4",
"All functions and types from the auxiliary library are defined in header file \"lauxlib.h\" and have a prefix \"luaL_\".",
"\4",
"All functions in the auxiliary library are built on top of the basic API, and so they provide nothing that cannot be done with that API.",
"Nevertheless, the use of the auxiliary library ensures more consistency to your code.",
"\4",
"Several functions in the auxiliary library use internally some extra stack slots.",
"When a function in the auxiliary library uses less than five slots, it does not check the stack size; it simply assumes that there are enough slots.",
"\4",
"Several functions in the auxiliary library are used to check C function arguments.",
"Because the error message is formatted for arguments (e.g., \"bad argument #1\"), you should not use these functions for other stack values.",
"\4",
"Functions called \"luaL_check*\" always raise an error if the check is not satisfied.",
{ title = "5.1 Functions and Types", typ = 2;
"\4",
"Here we list all functions and types from the auxiliary library in alphabetical order.",
{ title = "luaL_addchar", typ = 2;
"\4",
"[-?, +?, e]",
"void luaL_addchar (luaL_Buffer *B, char c);",
"\4",
"Adds the byte \"c\" to the buffer \"B\" (see \"luaL_Buffer\").",
},
{ title = "luaL_addlstring", typ = 2;
"\4",
"[-?, +?, e]",
"void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l);",
"\4",
"Adds the string pointed to by \"s\" with length \"l\" to the buffer \"B\" (see \"luaL_Buffer\").",
"The string can contain embedded zeros.",
},
{ title = "luaL_addsize", typ = 2;
"\4",
"[-?, +?, e]",
"void luaL_addsize (luaL_Buffer *B, size_t n);",
"\4",
"Adds to the buffer \"B\" (see \"luaL_Buffer\") a string of length \"n\" previously copied to the buffer area (see \"luaL_prepbuffer\").",
},
{ title = "luaL_addstring", typ = 2;
"\4",
"[-?, +?, e]",
"void luaL_addstring (luaL_Buffer *B, const char *s);",
"\4",
"Adds the zero-terminated string pointed to by \"s\" to the buffer \"B\" (see \"luaL_Buffer\").",
},
{ title = "luaL_addvalue", typ = 2;
"\4",
"[-1, +?, e]",
"void luaL_addvalue (luaL_Buffer *B);",
"\4",
"Adds the value at the top of the stack to the buffer \"B\" (see \"luaL_Buffer\").",
"Pops the value.",
"\4",
"This is the only function on string buffers that can (and must) be called with an extra element on the stack, which is the value to be added to the buffer.",
},
{ title = "luaL_argcheck", typ = 2;
"\4",
"[-0, +0, v]",
"\3void luaL_argcheck (lua_State *L,",
"\3                    int cond,",
"\3                    int arg,                    const char *extramsg);",
"\4",
"Checks whether \"cond\" is true.",
"If it is not, raises an error with a standard message (see \"luaL_argerror\").",
},
{ title = "luaL_argerror", typ = 2;
"\4",
"[-0, +0, v]",
"int luaL_argerror (lua_State *L, int arg, const char *extramsg);",
"\4",
"Raises an error reporting a problem with argument \"arg\" of the C function that called it, using a standard message that includes \"extramsg\" as a comment:",
"\3     bad argument #arg to 'funcname' (extramsg)",
"\4",
"This function never returns.",
},
{ title = "luaL_Buffer", typ = 2;
"typedef struct luaL_Buffer luaL_Buffer;",
"\4",
"Type for a string buffer.",
"\4",
"A string buffer allows C code to build Lua strings piecemeal.",
"Its pattern of use is as follows:",
"\2First declare a variable \"b\" of type \"luaL_Buffer\".",
"\2Then initialize it with a call \"luaL_buffinit(L, &b)\".",
"\2Then add string pieces to the buffer calling any of the \"luaL_add*\" functions.",
"\2Finish by calling \"luaL_pushresult(&b)\".",
"This call leaves the final string on the top of the stack.",
"\2",
"\4",
"If you know beforehand the total size of the resulting string, you can use the buffer like this:",
"\2First declare a variable \"b\" of type \"luaL_Buffer\".",
"\2Then initialize it and preallocate a space of size \"sz\" with a call \"luaL_buffinitsize(L, &b, sz)\".",
"\2Then copy the string into that space.",
"\2Finish by calling \"luaL_pushresultsize(&b, sz)\", where \"sz\" is the total size of the resulting string copied into that space.",
"\2",
"\4",
"During its normal operation, a string buffer uses a variable number of stack slots.",
"So, while using a buffer, you cannot assume that you know where the top of the stack is.",
"You can use the stack between successive calls to buffer operations as long as that use is balanced; that is, when you call a buffer operation, the stack is at the same level it was immediately after the previous buffer operation.",
"(The only exception to this rule is \"luaL_addvalue\".)",
"After calling \"luaL_pushresult\" the stack is back to its level when the buffer was initialized, plus the final string on its top.",
},
{ title = "luaL_buffinit", typ = 2;
"\4",
"[-0, +0, -]",
"void luaL_buffinit (lua_State *L, luaL_Buffer *B);",
"\4",
"Initializes a buffer \"B\".",
"This function does not allocate any space; the buffer must be declared as a variable (see \"luaL_Buffer\").",
},
{ title = "luaL_buffinitsize", typ = 2;
"\4",
"[-?, +?, e]",
"char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz);",
"\4",
"Equivalent to the sequence \"luaL_buffinit\", \"luaL_prepbuffsize\".",
},
{ title = "luaL_callmeta", typ = 2;
"\4",
"[-0, +(0|1), e]",
"int luaL_callmeta (lua_State *L, int obj, const char *e);",
"\4",
"Calls a metamethod.",
"\4",
"If the object at index \"obj\" has a metatable and this metatable has a field \"e\", this function calls this field passing the object as its only argument.",
"In this case this function returns true and pushes onto the stack the value returned by the call.",
"If there is no metatable or no metamethod, this function returns false (without pushing any value on the stack).",
},
{ title = "luaL_checkany", typ = 2;
"\4",
"[-0, +0, v]",
"void luaL_checkany (lua_State *L, int arg);",
"\4",
"Checks whether the function has an argument of any type (including nil) at position \"arg\".",
},
{ title = "luaL_checkinteger", typ = 2;
"\4",
"[-0, +0, v]",
"lua_Integer luaL_checkinteger (lua_State *L, int arg);",
"\4",
"Checks whether the function argument \"arg\" is an integer (or can be converted to an integer) and returns this integer cast to a \"lua_Integer\".",
},
{ title = "luaL_checklstring", typ = 2;
"\4",
"[-0, +0, v]",
"const char *luaL_checklstring (lua_State *L, int arg, size_t *l);",
"\4",
"Checks whether the function argument \"arg\" is a string and returns this string; if \"l\" is not \"NULL\" fills \"*l\" with the string's length.",
"\4",
"This function uses \"lua_tolstring\" to get its result, so all conversions and caveats of that function apply here.",
},
{ title = "luaL_checknumber", typ = 2;
"\4",
"[-0, +0, v]",
"lua_Number luaL_checknumber (lua_State *L, int arg);",
"\4",
"Checks whether the function argument \"arg\" is a number and returns this number.",
},
{ title = "luaL_checkoption", typ = 2;
"\4",
"[-0, +0, v]",
"\3int luaL_checkoption (lua_State *L,",
"\3                      int arg,",
"\3                      const char *def,                      const char *const lst[]);",
"\4",
"Checks whether the function argument \"arg\" is a string and searches for this string in the array \"lst\" (which must be NULL-terminated).",
"Returns the index in the array where the string was found.",
"Raises an error if the argument is not a string or if the string cannot be found.",
"\4",
"If \"def\" is not \"NULL\", the function uses \"def\" as a default value when there is no argument \"arg\" or when this argument is nil.",
"\4",
"This is a useful function for mapping strings to C enums.",
"(The usual convention in Lua libraries is to use strings instead of numbers to select options.)",
},
{ title = "luaL_checkstack", typ = 2;
"\4",
"[-0, +0, v]",
"void luaL_checkstack (lua_State *L, int sz, const char *msg);",
"\4",
"Grows the stack size to \"top + sz\" elements, raising an error if the stack cannot grow to that size.",
"\"msg\" is an additional text to go into the error message (or \"NULL\" for no additional text).",
},
{ title = "luaL_checkstring", typ = 2;
"\4",
"[-0, +0, v]",
"const char *luaL_checkstring (lua_State *L, int arg);",
"\4",
"Checks whether the function argument \"arg\" is a string and returns this string.",
"\4",
"This function uses \"lua_tolstring\" to get its result, so all conversions and caveats of that function apply here.",
},
{ title = "luaL_checktype", typ = 2;
"\4",
"[-0, +0, v]",
"void luaL_checktype (lua_State *L, int arg, int t);",
"\4",
"Checks whether the function argument \"arg\" has type \"t\".",
"See \"lua_type\" for the encoding of types for \"t\".",
},
{ title = "luaL_checkudata", typ = 2;
"\4",
"[-0, +0, v]",
"void *luaL_checkudata (lua_State *L, int arg, const char *tname);",
"\4",
"Checks whether the function argument \"arg\" is a userdata of the type \"tname\" (see \"luaL_newmetatable\") and returns the userdata address (see \"lua_touserdata\").",
},
{ title = "luaL_checkversion", typ = 2;
"\4",
"[-0, +0, -]",
"void luaL_checkversion (lua_State *L);",
"\4",
"Checks whether the core running the call, the core that created the Lua state, and the code making the call are all using the same version of Lua.",
"Also checks whether the core running the call and the core that created the Lua state are using the same address space.",
},
{ title = "luaL_dofile", typ = 2;
"\4",
"[-0, +?, e]",
"int luaL_dofile (lua_State *L, const char *filename);",
"\4",
"Loads and runs the given file.",
"It is defined as the following macro:",
"\3     (luaL_loadfile(L, filename) || lua_pcall(L, 0, LUA_MULTRET, 0))",
"\4",
"It returns false if there are no errors or true in case of errors.",
},
{ title = "luaL_dostring", typ = 2;
"\4",
"[-0, +?, -]",
"int luaL_dostring (lua_State *L, const char *str);",
"\4",
"Loads and runs the given string.",
"It is defined as the following macro:",
"\3     (luaL_loadstring(L, str) || lua_pcall(L, 0, LUA_MULTRET, 0))",
"\4",
"It returns false if there are no errors or true in case of errors.",
},
{ title = "luaL_error", typ = 2;
"\4",
"[-0, +0, v]",
"int luaL_error (lua_State *L, const char *fmt, ...);",
"\4",
"Raises an error.",
"The error message format is given by \"fmt\" plus any extra arguments, following the same rules of \"lua_pushfstring\".",
"It also adds at the beginning of the message the file name and the line number where the error occurred, if this information is available.",
"\4",
"This function never returns, but it is an idiom to use it in C functions as \"return luaL_error(args)\".",
},
{ title = "luaL_execresult", typ = 2;
"\4",
"[-0, +3, e]",
"int luaL_execresult (lua_State *L, int stat);",
"\4",
"This function produces the return values for process-related functions in the standard library (\"os.execute\" and \"io.close\").",
},
{ title = "luaL_fileresult", typ = 2;
"\4",
"[-0, +(1|3), e]",
"int luaL_fileresult (lua_State *L, int stat, const char *fname);",
"\4",
"This function produces the return values for file-related functions in the standard library (\"io.open\", \"os.rename\", \"file:seek\", etc.).",
},
{ title = "luaL_getmetafield", typ = 2;
"\4",
"[-0, +(0|1), e]",
"int luaL_getmetafield (lua_State *L, int obj, const char *e);",
"\4",
"Pushes onto the stack the field \"e\" from the metatable of the object at index \"obj\" and returns the type of pushed value.",
"If the object does not have a metatable, or if the metatable does not have this field, pushes nothing and returns \"LUA_TNIL\".",
},
{ title = "luaL_getmetatable", typ = 2;
"\4",
"[-0, +1, -]",
"int luaL_getmetatable (lua_State *L, const char *tname);",
"\4",
"Pushes onto the stack the metatable associated with name \"tname\" in the registry (see \"luaL_newmetatable\").",
"If there is no metatable associated with \"tname\", returns false and pushes nil.",
},
{ title = "luaL_getsubtable", typ = 2;
"\4",
"[-0, +1, e]",
"int luaL_getsubtable (lua_State *L, int idx, const char *fname);",
"\4",
"Ensures that the value \"t[fname]\", where \"t\" is the value at index \"idx\", is a table, and pushes that table onto the stack.",
"Returns true if it finds a previous table there and false if it creates a new table.",
},
{ title = "luaL_gsub", typ = 2;
"\4",
"[-0, +1, e]",
"\3const char *luaL_gsub (lua_State *L,",
"\3                       const char *s,",
"\3                       const char *p,                       const char *r);",
"\4",
"Creates a copy of string \"s\" by replacing any occurrence of the string \"p\" with the string \"r\".",
"Pushes the resulting string on the stack and returns it.",
},
{ title = "luaL_len", typ = 2;
"\4",
"[-0, +0, e]",
"lua_Integer luaL_len (lua_State *L, int index);",
"\4",
"Returns the \"length\" of the value at the given index as a number; it is equivalent to the \"#\" operator in Lua (see §3.4.7).",
"Raises an error if the result of the operation is not an integer.",
"(This case only can happen through metamethods.)",
},
{ title = "luaL_loadbuffer", typ = 2;
"\4",
"[-0, +1, -]",
"\3int luaL_loadbuffer (lua_State *L,",
"\3                     const char *buff,",
"\3                     size_t sz,                     const char *name);",
"\4",
"Equivalent to \"luaL_loadbufferx\" with \"mode\" equal to \"NULL\".",
},
{ title = "luaL_loadbufferx", typ = 2;
"\4",
"[-0, +1, -]",
"\3int luaL_loadbufferx (lua_State *L,",
"\3                      const char *buff,",
"\3                      size_t sz,",
"\3                      const char *name,                      const char *mode);",
"\4",
"Loads a buffer as a Lua chunk.",
"This function uses \"lua_load\" to load the chunk in the buffer pointed to by \"buff\" with size \"sz\".",
"\4",
"This function returns the same results as \"lua_load\".",
"\"name\" is the chunk name, used for debug information and error messages.",
"The string \"mode\" works as in function \"lua_load\".",
},
{ title = "luaL_loadfile", typ = 2;
"\4",
"[-0, +1, e]",
"int luaL_loadfile (lua_State *L, const char *filename);",
"\4",
"Equivalent to \"luaL_loadfilex\" with \"mode\" equal to \"NULL\".",
},
{ title = "luaL_loadfilex", typ = 2;
"\4",
"[-0, +1, e]",
"\3int luaL_loadfilex (lua_State *L, const char *filename,                                            const char *mode);",
"\4",
"Loads a file as a Lua chunk.",
"This function uses \"lua_load\" to load the chunk in the file named \"filename\".",
"If \"filename\" is \"NULL\", then it loads from the standard input.",
"The first line in the file is ignored if it starts with a \"#\".",
"\4",
"The string \"mode\" works as in function \"lua_load\".",
"\4",
"This function returns the same results as \"lua_load\", but it has an extra error code \"LUA_ERRFILE\" if it cannot open/read the file or the file has a wrong mode.",
"\4",
"As \"lua_load\", this function only loads the chunk; it does not run it.",
},
{ title = "luaL_loadstring", typ = 2;
"\4",
"[-0, +1, -]",
"int luaL_loadstring (lua_State *L, const char *s);",
"\4",
"Loads a string as a Lua chunk.",
"This function uses \"lua_load\" to load the chunk in the zero-terminated string \"s\".",
"\4",
"This function returns the same results as \"lua_load\".",
"\4",
"Also as \"lua_load\", this function only loads the chunk; it does not run it.",
},
{ title = "luaL_newlib", typ = 2;
"\4",
"[-0, +1, e]",
"void luaL_newlib (lua_State *L, const luaL_Reg l[]);",
"\4",
"Creates a new table and registers there the functions in list \"l\".",
"\4",
"It is implemented as the following macro:",
"\3     (luaL_newlibtable(L,l), luaL_setfuncs(L,l,0))",
"\4",
"The array \"l\" must be the actual array, not a pointer to it.",
},
{ title = "luaL_newlibtable", typ = 2;
"\4",
"[-0, +1, e]",
"void luaL_newlibtable (lua_State *L, const luaL_Reg l[]);",
"\4",
"Creates a new table with a size optimized to store all entries in the array \"l\" (but does not actually store them).",
"It is intended to be used in conjunction with \"luaL_setfuncs\" (see \"luaL_newlib\").",
"\4",
"It is implemented as a macro.",
"The array \"l\" must be the actual array, not a pointer to it.",
},
{ title = "luaL_newmetatable", typ = 2;
"\4",
"[-0, +1, e]",
"int luaL_newmetatable (lua_State *L, const char *tname);",
"\4",
"If the registry already has the key \"tname\", returns 0.",
"Otherwise, creates a new table to be used as a metatable for userdata, adds to this new table the pair \"__name = tname\", adds to the registry the pair \"[tname] = new table\", and returns 1.",
"(The entry \"__name\" is used by some error-reporting functions.)",
"\4",
"In both cases pushes onto the stack the final value associated with \"tname\" in the registry.",
},
{ title = "luaL_newstate", typ = 2;
"\4",
"[-0, +0, -]",
"lua_State *luaL_newstate (void);",
"\4",
"Creates a new Lua state.",
"It calls \"lua_newstate\" with an allocator based on the standard C \"realloc\" function and then sets a panic function (see §4.6) that prints an error message to the standard error output in case of fatal errors.",
"\4",
"Returns the new state, or \"NULL\" if there is a memory allocation error.",
},
{ title = "luaL_openlibs", typ = 2;
"\4",
"[-0, +0, e]",
"void luaL_openlibs (lua_State *L);",
"\4",
"Opens all standard Lua libraries into the given state.",
},
{ title = "luaL_optinteger", typ = 2;
"\4",
"[-0, +0, v]",
"\3lua_Integer luaL_optinteger (lua_State *L,",
"\3                             int arg,                             lua_Integer d);",
"\4",
"If the function argument \"arg\" is an integer (or convertible to an integer), returns this integer.",
"If this argument is absent or is nil, returns \"d\".",
"Otherwise, raises an error.",
},
{ title = "luaL_optlstring", typ = 2;
"\4",
"[-0, +0, v]",
"\3const char *luaL_optlstring (lua_State *L,",
"\3                             int arg,",
"\3                             const char *d,                             size_t *l);",
"\4",
"If the function argument \"arg\" is a string, returns this string.",
"If this argument is absent or is nil, returns \"d\".",
"Otherwise, raises an error.",
"\4",
"If \"l\" is not \"NULL\", fills the position \"*l\" with the result's length.",
},
{ title = "luaL_optnumber", typ = 2;
"\4",
"[-0, +0, v]",
"lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number d);",
"\4",
"If the function argument \"arg\" is a number, returns this number.",
"If this argument is absent or is nil, returns \"d\".",
"Otherwise, raises an error.",
},
{ title = "luaL_optstring", typ = 2;
"\4",
"[-0, +0, v]",
"\3const char *luaL_optstring (lua_State *L,",
"\3                            int arg,                            const char *d);",
"\4",
"If the function argument \"arg\" is a string, returns this string.",
"If this argument is absent or is nil, returns \"d\".",
"Otherwise, raises an error.",
},
{ title = "luaL_prepbuffer", typ = 2;
"\4",
"[-?, +?, e]",
"char *luaL_prepbuffer (luaL_Buffer *B);",
"\4",
"Equivalent to \"luaL_prepbuffsize\" with the predefined size \"LUAL_BUFFERSIZE\".",
},
{ title = "luaL_prepbuffsize", typ = 2;
"\4",
"[-?, +?, e]",
"char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz);",
"\4",
"Returns an address to a space of size \"sz\" where you can copy a string to be added to buffer \"B\" (see \"luaL_Buffer\").",
"After copying the string into this space you must call \"luaL_addsize\" with the size of the string to actually add it to the buffer.",
},
{ title = "luaL_pushresult", typ = 2;
"\4",
"[-?, +1, e]",
"void luaL_pushresult (luaL_Buffer *B);",
"\4",
"Finishes the use of buffer \"B\" leaving the final string on the top of the stack.",
},
{ title = "luaL_pushresultsize", typ = 2;
"\4",
"[-?, +1, e]",
"void luaL_pushresultsize (luaL_Buffer *B, size_t sz);",
"\4",
"Equivalent to the sequence \"luaL_addsize\", \"luaL_pushresult\".",
},
{ title = "luaL_ref", typ = 2;
"\4",
"[-1, +0, e]",
"int luaL_ref (lua_State *L, int t);",
"\4",
"Creates and returns a reference, in the table at index \"t\", for the object at the top of the stack (and pops the object).",
"\4",
"A reference is a unique integer key.",
"As long as you do not manually add integer keys into table \"t\", \"luaL_ref\" ensures the uniqueness of the key it returns.",
"You can retrieve an object referred by reference \"r\" by calling \"lua_rawgeti(L, t, r)\".",
"Function \"luaL_unref\" frees a reference and its associated object.",
"\4",
"If the object at the top of the stack is nil, \"luaL_ref\" returns the constant \"LUA_REFNIL\".",
"The constant \"LUA_NOREF\" is guaranteed to be different from any reference returned by \"luaL_ref\".",
},
{ title = "luaL_Reg", typ = 2;
"\3typedef struct luaL_Reg {",
"\3  const char *name;",
"\3  lua_CFunction func;} luaL_Reg;",
"\4",
"Type for arrays of functions to be registered by \"luaL_setfuncs\".",
"\"name\" is the function name and \"func\" is a pointer to the function.",
"Any array of \"luaL_Reg\" must end with a sentinel entry in which both \"name\" and \"func\" are \"NULL\".",
},
{ title = "luaL_requiref", typ = 2;
"\4",
"[-0, +1, e]",
"\3void luaL_requiref (lua_State *L, const char *modname,                    lua_CFunction openf, int glb);",
"\4",
"If \"modname\" is not already present in \"package.loaded\", calls function \"openf\" with string \"modname\" as an argument and sets the call result in \"package.loaded[modname]\", as if that function has been called through \"require\".",
"\4",
"If \"glb\" is true, also stores the module into global \"modname\".",
"\4",
"Leaves a copy of the module on the stack.",
},
{ title = "luaL_setfuncs", typ = 2;
"\4",
"[-nup, +0, e]",
"void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup);",
"\4",
"Registers all functions in the array \"l\" (see \"luaL_Reg\") into the table on the top of the stack (below optional upvalues, see next).",
"\4",
"When \"nup\" is not zero, all functions are created sharing \"nup\" upvalues, which must be previously pushed on the stack on top of the library table.",
"These values are popped from the stack after the registration.",
},
{ title = "luaL_setmetatable", typ = 2;
"\4",
"[-0, +0, -]",
"void luaL_setmetatable (lua_State *L, const char *tname);",
"\4",
"Sets the metatable of the object at the top of the stack as the metatable associated with name \"tname\" in the registry (see \"luaL_newmetatable\").",
},
{ title = "luaL_Stream", typ = 2;
"\3typedef struct luaL_Stream {",
"\3  FILE *f;",
"\3  lua_CFunction closef;} luaL_Stream;",
"\4",
"The standard representation for file handles, which is used by the standard I/O library.",
"\4",
"A file handle is implemented as a full userdata, with a metatable called \"LUA_FILEHANDLE\" (where \"LUA_FILEHANDLE\" is a macro with the actual metatable's name).",
"The metatable is created by the I/O library (see \"luaL_newmetatable\").",
"\4",
"This userdata must start with the structure \"luaL_Stream\"; it can contain other data after this initial structure.",
"Field \"f\" points to the corresponding C stream (or it can be \"NULL\" to indicate an incompletely created handle).",
"Field \"closef\" points to a Lua function that will be called to close the stream when the handle is closed or collected; this function receives the file handle as its sole argument and must return either true (in case of success) or nil plus an error message (in case of error).",
"Once Lua calls this field, the field value is changed to \"NULL\" to signal that the handle is closed.",
},
{ title = "luaL_testudata", typ = 2;
"\4",
"[-0, +0, e]",
"void *luaL_testudata (lua_State *L, int arg, const char *tname);",
"\4",
"This function works like \"luaL_checkudata\", except that, when the test fails, it returns \"NULL\" instead of raising an error.",
},
{ title = "luaL_tolstring", typ = 2;
"\4",
"[-0, +1, e]",
"const char *luaL_tolstring (lua_State *L, int idx, size_t *len);",
"\4",
"Converts any Lua value at the given index to a C string in a reasonable format.",
"The resulting string is pushed onto the stack and also returned by the function.",
"If \"len\" is not \"NULL\", the function also sets \"*len\" with the string length.",
"\4",
"If the value has a metatable with a \"__tostring\" field, then \"luaL_tolstring\" calls the corresponding metamethod with the value as argument, and uses the result of the call as its result.",
},
{ title = "luaL_traceback", typ = 2;
"\4",
"[-0, +1, e]",
"\3void luaL_traceback (lua_State *L, lua_State *L1, const char *msg,                     int level);",
"\4",
"Creates and pushes a traceback of the stack \"L1\".",
"If \"msg\" is not \"NULL\" it is appended at the beginning of the traceback.",
"The \"level\" parameter tells at which level to start the traceback.",
},
{ title = "luaL_typename", typ = 2;
"\4",
"[-0, +0, -]",
"const char *luaL_typename (lua_State *L, int index);",
"\4",
"Returns the name of the type of the value at the given index.",
},
{ title = "luaL_unref", typ = 2;
"\4",
"[-0, +0, -]",
"void luaL_unref (lua_State *L, int t, int ref);",
"\4",
"Releases reference \"ref\" from the table at index \"t\" (see \"luaL_ref\").",
"The entry is removed from the table, so that the referred object can be collected.",
"The reference \"ref\" is also freed to be used again.",
"\4",
"If \"ref\" is \"LUA_NOREF\" or \"LUA_REFNIL\", \"luaL_unref\" does nothing.",
},
{ title = "luaL_where", typ = 2;
"\4",
"[-0, +1, e]",
"void luaL_where (lua_State *L, int lvl);",
"\4",
"Pushes onto the stack a string identifying the current position of the control at level \"lvl\" in the call stack.",
"Typically this string has the following format:",
"\3     chunkname:currentline:",
"\4",
"Level 0 is the running function, level 1 is the function that called the running function, etc.",
"\4",
"This function is used to build a prefix for error messages.",
},
},
},
{ title = "6. Standard Libraries", typ = 3;
"\4",
"The standard Lua libraries provide useful functions that are implemented directly through the C API.",
"Some of these functions provide essential services to the language (e.g., \"type\" and \"getmetatable\"); others provide access to \"outside\" services (e.g., I/O); and others could be implemented in Lua itself, but are quite useful or have critical performance requirements that deserve an implementation in C (e.g., \"table.sort\").",
"\4",
"All libraries are implemented through the official C API and are provided as separate C modules.",
"Currently, Lua has the following standard libraries:",
"\2basic library (§6.1);",
"\2coroutine library (§6.2);",
"\2package library (§6.3);",
"\2string manipulation (§6.4);",
"\2basic UTF-8 support (§6.5);",
"\2table manipulation (§6.6);",
"\2mathematical functions (§6.7) (sin, log, etc.);",
"\2input and output (§6.8);",
"\2operating system facilities (§6.9);",
"\2debug facilities (§6.10).",
"\2",
"\4",
"Except for the basic and the package libraries, each library provides all its functions as fields of a global table or as methods of its objects.",
"\4",
"To have access to these libraries, the C host program should call the \"luaL_openlibs\" function, which opens all standard libraries.",
"Alternatively, the host program can open them individually by using \"luaL_requiref\" to call \"luaopen_base\" (for the basic library), \"luaopen_package\" (for the package library), \"luaopen_coroutine\" (for the coroutine library), \"luaopen_string\" (for the string library), \"luaopen_utf8\" (for the UTF8 library), \"luaopen_table\" (for the table library), \"luaopen_math\" (for the mathematical library), \"luaopen_io\" (for the I/O library), \"luaopen_os\" (for the operating system library), and \"luaopen_debug\" (for the debug library).",
"These functions are declared in \"lualib.h\".",
{ title = "6.1 Basic Functions", typ = 4;
"\4",
"The basic library provides core functions to Lua.",
"If you do not include this library in your application, you should check carefully whether you need to provide implementations for some of its facilities.",
"\4",
{ title = "assert (v [, message])", typ = 4;
"\4",
"Calls \"error\" if the value of its argument \"v\" is false (i.e., nil or false); otherwise, returns all its arguments.",
"In case of error, \"message\" is the error object; when absent, it defaults to \"assertion failed!\"",
"\4",
},
{ title = "collectgarbage ([opt [, arg]])", typ = 4;
"\4",
"This function is a generic interface to the garbage collector.",
"It performs different functions according to its first argument, \"opt\":",
"\2\"collect\":  performs a full garbage-collection cycle.",
"This is the default option.",
"\2\"stop\":  stops automatic execution of the garbage collector.",
"The collector will run only when explicitly invoked, until a call to restart it.",
"\2\"restart\":  restarts automatic execution of the garbage collector.",
"\2\"count\":  returns the total memory in use by Lua in Kbytes.",
"The value has a fractional part, so that it multiplied by 1024 gives the exact number of bytes in use by Lua (except for overflows).",
"\2\"step\":  performs a garbage-collection step.",
"The step \"size\" is controlled by \"arg\".",
"With a zero value, the collector will perform one basic (indivisible) step.",
"For non-zero values, the collector will perform as if that amount of memory (in KBytes) had been allocated by Lua.",
"Returns true if the step finished a collection cycle.",
"\2\"setpause\":  sets \"arg\" as the new value for the pause of the collector (see §2.5).",
"Returns the previous value for pause.",
"\2\"setstepmul\":  sets \"arg\" as the new value for the step multiplier of the collector (see §2.5).",
"Returns the previous value for step.",
"\2\"isrunning\":  returns a boolean that tells whether the collector is running (i.e., not stopped).",
"\2",
"\4",
},
{ title = "dofile ([filename])", typ = 4;
"Opens the named file and executes its contents as a Lua chunk.",
"When called without arguments, \"dofile\" executes the contents of the standard input (\"stdin\").",
"Returns all values returned by the chunk.",
"In case of errors, \"dofile\" propagates the error to its caller (that is, \"dofile\" does not run in protected mode).",
"\4",
},
{ title = "error (message [, level])", typ = 4;
"Terminates the last protected function called and returns \"message\" as the error object.",
"Function \"error\" never returns.",
"\4",
"Usually, \"error\" adds some information about the error position at the beginning of the message, if the message is a string.",
"The \"level\" argument specifies how to get the error position.",
"With level 1 (the default), the error position is where the \"error\" function was called.",
"Level 2 points the error to where the function that called \"error\" was called; and so on.",
"Passing a level 0 avoids the addition of error position information to the message.",
"\4",
},
{ title = "_G", typ = 4;
"A global variable (not a function) that holds the global environment (see §2.2).",
"Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.",
"\4",
},
{ title = "getmetatable (object)", typ = 4;
"\4",
"If \"object\" does not have a metatable, returns nil.",
"Otherwise, if the object's metatable has a \"__metatable\" field, returns the associated value.",
"Otherwise, returns the metatable of the given object.",
"\4",
},
{ title = "ipairs (t)", typ = 4;
"\4",
"Returns three values (an iterator function, the table \"t\", and 0) so that the construction",
"\3     for i,v in ipairs(t) do body end",
"\4",
"will iterate over the key-value pairs (\"1,t[1]\"), (\"2,t[2]\"), ..., up to the first nil value.",
"\4",
},
{ title = "load (chunk [, chunkname [, mode [, env]]])", typ = 4;
"\4",
"Loads a chunk.",
"\4",
"If \"chunk\" is a string, the chunk is this string.",
"If \"chunk\" is a function, \"load\" calls it repeatedly to get the chunk pieces.",
"Each call to \"chunk\" must return a string that concatenates with previous results.",
"A return of an empty string, nil, or no value signals the end of the chunk.",
"\4",
"If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns nil plus the error message.",
"\4",
"If the resulting function has upvalues, the first upvalue is set to the value of \"env\", if that parameter is given, or to the value of the global environment.",
"Other upvalues are initialized with nil.",
"(When you load a main chunk, the resulting function will always have exactly one upvalue, the \"_ENV\" variable (see §2.2).",
"However, when you load a binary chunk created from a function (see \"string.dump\"), the resulting function can have an arbitrary number of upvalues.)",
"All upvalues are fresh, that is, they are not shared with any other function.",
"\4",
"\"chunkname\" is used as the name of the chunk for error messages and debug information (see §4.9).",
"When absent, it defaults to \"chunk\", if \"chunk\" is a string, or to \"=(load)\" otherwise.",
"\4",
"The string \"mode\" controls whether the chunk can be text or binary (that is, a precompiled chunk).",
"It may be the string \"b\" (only binary chunks), \"t\" (only text chunks), or \"bt\" (both binary and text).",
"The default is \"bt\".",
"\4",
"Lua does not check the consistency of binary chunks.",
"Maliciously crafted binary chunks can crash the interpreter.",
"\4",
},
{ title = "loadfile ([filename [, mode [, env]]])", typ = 4;
"\4",
"Similar to \"load\", but gets the chunk from file \"filename\" or from the standard input, if no file name is given.",
"\4",
},
{ title = "next (table [, index])", typ = 4;
"\4",
"Allows a program to traverse all fields of a table.",
"Its first argument is a table and its second argument is an index in this table.",
"\"next\" returns the next index of the table and its associated value.",
"When called with nil as its second argument, \"next\" returns an initial index and its associated value.",
"When called with the last index, or with nil in an empty table, \"next\" returns nil.",
"If the second argument is absent, then it is interpreted as nil.",
"In particular, you can use \"next(t)\" to check whether a table is empty.",
"\4",
"The order in which the indices are enumerated is not specified, even for numeric indices.",
"(To traverse a table in numeric order, use a numerical for.)",
"\4",
"The behavior of \"next\" is undefined if, during the traversal, you assign any value to a non-existent field in the table.",
"You may however modify existing fields.",
"In particular, you may clear existing fields.",
"\4",
},
{ title = "pairs (t)", typ = 4;
"\4",
"If \"t\" has a metamethod \"__pairs\", calls it with \"t\" as argument and returns the first three results from the call.",
"\4",
"Otherwise, returns three values: the \"next\" function, the table \"t\", and nil, so that the construction",
"\3     for k,v in pairs(t) do body end",
"\4",
"will iterate over all key-value pairs of table \"t\".",
"\4",
"See function \"next\" for the caveats of modifying the table during its traversal.",
"\4",
},
{ title = "pcall (f [, arg1, ...])", typ = 4;
"\4",
"Calls function \"f\" with the given arguments in protected mode.",
"This means that any error inside \"f\" is not propagated; instead, \"pcall\" catches the error and returns a status code.",
"Its first result is the status code (a boolean), which is true if the call succeeds without errors.",
"In such case, \"pcall\" also returns all results from the call, after this first result.",
"In case of any error, \"pcall\" returns false plus the error message.",
"\4",
},
{ title = "print (...)", typ = 4;
"Receives any number of arguments and prints their values to \"stdout\", using the \"tostring\" function to convert each argument to a string.",
"\"print\" is not intended for formatted output, but only as a quick way to show a value, for instance for debugging.",
"For complete control over the output, use \"string.format\" and \"io.write\".",
"\4",
},
{ title = "rawequal (v1, v2)", typ = 4;
"Checks whether \"v1\" is equal to \"v2\", without invoking any metamethod.",
"Returns a boolean.",
"\4",
},
{ title = "rawget (table, index)", typ = 4;
"Gets the real value of \"table[index]\", without invoking any metamethod.",
"\"table\" must be a table; \"index\" may be any value.",
"\4",
},
{ title = "rawlen (v)", typ = 4;
"Returns the length of the object \"v\", which must be a table or a string, without invoking any metamethod.",
"Returns an integer.",
"\4",
},
{ title = "rawset (table, index, value)", typ = 4;
"Sets the real value of \"table[index]\" to \"value\", without invoking any metamethod.",
"\"table\" must be a table, \"index\" any value different from nil and NaN, and \"value\" any Lua value.",
"\4",
"This function returns \"table\".",
"\4",
},
{ title = "select (index, ...)", typ = 4;
"\4",
"If \"index\" is a number, returns all arguments after argument number \"index\"; a negative number indexes from the end (-1 is the last argument).",
"Otherwise, \"index\" must be the string \"#\", and \"select\" returns the total number of extra arguments it received.",
"\4",
},
{ title = "setmetatable (table, metatable)", typ = 4;
"\4",
"Sets the metatable for the given table.",
"(You cannot change the metatable of other types from Lua, only from C.)",
"If \"metatable\" is nil, removes the metatable of the given table.",
"If the original metatable has a \"__metatable\" field, raises an error.",
"\4",
"This function returns \"table\".",
"\4",
},
{ title = "tonumber (e [, base])", typ = 4;
"\4",
"When called with no \"base\", \"tonumber\" tries to convert its argument to a number.",
"If the argument is already a number or a string convertible to a number, then \"tonumber\" returns this number; otherwise, it returns nil.",
"\4",
"The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see §3.1).",
"(The string may have leading and trailing spaces and a sign.)",
"\4",
"When called with \"base\", then \"e\" must be a string to be interpreted as an integer numeral in that base.",
"The base may be any integer between 2 and 36, inclusive.",
"In bases above 10, the letter \"A\" (in either upper or lower case) represents 10, \"B\" represents 11, and so forth, with \"Z\" representing 35.",
"If the string \"e\" is not a valid numeral in the given base, the function returns nil.",
"\4",
},
{ title = "tostring (v)", typ = 4;
"Receives a value of any type and converts it to a string in a human-readable format.",
"Floats always produce strings with some floating-point indication (either a decimal dot or an exponent).",
"(For complete control of how numbers are converted, use \"string.format\".)",
"\4",
"If the metatable of \"v\" has a \"__tostring\" field, then \"tostring\" calls the corresponding value with \"v\" as argument, and uses the result of the call as its result.",
"\4",
},
{ title = "type (v)", typ = 4;
"Returns the type of its only argument, coded as a string.",
"The possible results of this function are \"nil\" (a string, not the value nil), \"number\", \"string\", \"boolean\", \"table\", \"function\", \"thread\", and \"userdata\".",
"\4",
},
{ title = "_VERSION", typ = 4;
"A global variable (not a function) that holds a string containing the current interpreter version.",
"The current value of this variable is \"Lua 5.3\".",
"\4",
},
{ title = "xpcall (f, msgh [, arg1, ...])", typ = 4;
"\4",
"This function is similar to \"pcall\", except that it sets a new message handler \"msgh\".",
},
},
{ title = "6.2 Coroutine Manipulation", typ = 3;
"\4",
"The operations related to coroutines comprise a sub-library of the basic library and come inside the table \"coroutine\".",
"See §2.6 for a general description of coroutines.",
"\4",
{ title = "coroutine.create (f)", typ = 3;
"\4",
"Creates a new coroutine, with body \"f\".",
"\"f\" must be a Lua function.",
"Returns this new coroutine, an object with type \"thread\".",
"\4",
},
{ title = "coroutine.isyieldable ()", typ = 3;
"\4",
"Returns true when the running coroutine can yield.",
"\4",
"A running coroutine is yieldable if it is not the main thread and it is not inside a non-yieldable C function.",
"\4",
},
{ title = "coroutine.resume (co [, val1, ...])", typ = 3;
"\4",
"Starts or continues the execution of coroutine \"co\".",
"The first time you resume a coroutine, it starts running its body.",
"The values \"val1\", ... are passed as the arguments to the body function.",
"If the coroutine has yielded, \"resume\" restarts it; the values \"val1\", ... are passed as the results from the yield.",
"\4",
"If the coroutine runs without any errors, \"resume\" returns true plus any values passed to \"yield\" (when the coroutine yields) or any values returned by the body function (when the coroutine terminates).",
"If there is any error, \"resume\" returns false plus the error message.",
"\4",
},
{ title = "coroutine.running ()", typ = 3;
"\4",
"Returns the running coroutine plus a boolean, true when the running coroutine is the main one.",
"\4",
},
{ title = "coroutine.status (co)", typ = 3;
"\4",
"Returns the status of coroutine \"co\", as a string: \"running\", if the coroutine is running (that is, it called \"status\"); \"suspended\", if the coroutine is suspended in a call to \"yield\", or if it has not started running yet; \"normal\" if the coroutine is active but not running (that is, it has resumed another coroutine); and \"dead\" if the coroutine has finished its body function, or if it has stopped with an error.",
"\4",
},
{ title = "coroutine.wrap (f)", typ = 3;
"\4",
"Creates a new coroutine, with body \"f\".",
"\"f\" must be a Lua function.",
"Returns a function that resumes the coroutine each time it is called.",
"Any arguments passed to the function behave as the extra arguments to \"resume\".",
"Returns the same values returned by \"resume\", except the first boolean.",
"In case of error, propagates the error.",
"\4",
},
{ title = "coroutine.yield (...)", typ = 3;
"\4",
"Suspends the execution of the calling coroutine.",
"Any arguments to \"yield\" are passed as extra results to \"resume\".",
},
},
{ title = "6.3 Modules", typ = 3;
"\4",
"The package library provides basic facilities for loading modules in Lua.",
"It exports one function directly in the global environment: \"require\".",
"Everything else is exported in a table \"package\".",
"\4",
{ title = "require (modname)", typ = 3;
"\4",
"Loads the given module.",
"The function starts by looking into the \"package.loaded\" table to determine whether \"modname\" is already loaded.",
"If it is, then \"require\" returns the value stored at \"package.loaded[modname]\".",
"Otherwise, it tries to find a loader for the module.",
"\4",
"To find a loader, \"require\" is guided by the \"package.searchers\" sequence.",
"By changing this sequence, we can change how \"require\" looks for a module.",
"The following explanation is based on the default configuration for \"package.searchers\".",
"\4",
"First \"require\" queries \"package.preload[modname]\".",
"If it has a value, this value (which must be a function) is the loader.",
"Otherwise \"require\" searches for a Lua loader using the path stored in \"package.path\".",
"If that also fails, it searches for a C loader using the path stored in \"package.cpath\".",
"If that also fails, it tries an all-in-one loader (see \"package.searchers\").",
"\4",
"Once a loader is found, \"require\" calls the loader with two arguments: \"modname\" and an extra value dependent on how it got the loader.",
"(If the loader came from a file, this extra value is the file name.)",
"If the loader returns any non-nil value, \"require\" assigns the returned value to \"package.loaded[modname]\".",
"If the loader does not return a non-nil value and has not assigned any value to \"package.loaded[modname]\", then \"require\" assigns true to this entry.",
"In any case, \"require\" returns the final value of \"package.loaded[modname]\".",
"\4",
"If there is any error loading or running the module, or if it cannot find any loader for the module, then \"require\" raises an error.",
"\4",
},
{ title = "package.config", typ = 3;
"\4",
"A string describing some compile-time configurations for packages.",
"This string is a sequence of lines:",
"\2The first line is the directory separator string.",
"Default is \"\\\" for Windows and \"/\" for all other systems.",
"\2The second line is the character that separates templates in a path.",
"Default is \";\".",
"\2The third line is the string that marks the substitution points in a template.",
"Default is \"?\".",
"\2The fourth line is a string that, in a path in Windows, is replaced by the executable's directory.",
"Default is \"!\".",
"\2The fifth line is a mark to ignore all text after it when building the \"luaopen_\" function name.",
"Default is \"-\".",
"\2",
"\4",
},
{ title = "package.cpath", typ = 3;
"\4",
"The path used by \"require\" to search for a C loader.",
"\4",
"Lua initializes the C path \"package.cpath\" in the same way it initializes the Lua path \"package.path\", using the environment variable \"LUA_CPATH_5_3\" or the environment variable \"LUA_CPATH\" or a default path defined in \"luaconf.h\".",
"\4",
},
{ title = "package.loaded", typ = 3;
"\4",
"A table used by \"require\" to control which modules are already loaded.",
"When you require a module \"modname\" and \"package.loaded[modname]\" is not false, \"require\" simply returns the value stored there.",
"\4",
"This variable is only a reference to the real table; assignments to this variable do not change the table used by \"require\".",
"\4",
},
{ title = "package.loadlib (libname, funcname)", typ = 3;
"\4",
"Dynamically links the host program with the C library \"libname\".",
"\4",
"If \"funcname\" is \"*\", then it only links with the library, making the symbols exported by the library available to other dynamically linked libraries.",
"Otherwise, it looks for a function \"funcname\" inside the library and returns this function as a C function.",
"So, \"funcname\" must follow the \"lua_CFunction\" prototype (see \"lua_CFunction\").",
"\4",
"This is a low-level function.",
"It completely bypasses the package and module system.",
"Unlike \"require\", it does not perform any path searching and does not automatically adds extensions.",
"\"libname\" must be the complete file name of the C library, including if necessary a path and an extension.",
"\"funcname\" must be the exact name exported by the C library (which may depend on the C compiler and linker used).",
"\4",
"This function is not supported by Standard C.",
"As such, it is only available on some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus other Unix systems that support the \"dlfcn\" standard).",
"\4",
},
{ title = "package.path", typ = 3;
"\4",
"The path used by \"require\" to search for a Lua loader.",
"\4",
"At start-up, Lua initializes this variable with the value of the environment variable \"LUA_PATH_5_3\" or the environment variable \"LUA_PATH\" or with a default path defined in \"luaconf.h\", if those environment variables are not defined.",
"Any \";;\" in the value of the environment variable is replaced by the default path.",
"\4",
},
{ title = "package.preload", typ = 3;
"\4",
"A table to store loaders for specific modules (see \"require\").",
"\4",
"This variable is only a reference to the real table; assignments to this variable do not change the table used by \"require\".",
"\4",
},
{ title = "package.searchers", typ = 3;
"\4",
"A table used by \"require\" to control how to load modules.",
"\4",
"Each entry in this table is a searcher function.",
"When looking for a module, \"require\" calls each of these searchers in ascending order, with the module name (the argument given to \"require\") as its sole parameter.",
"The function can return another function (the module loader) plus an extra value that will be passed to that loader, or a string explaining why it did not find that module (or nil if it has nothing to say).",
"\4",
"Lua initializes this table with four searcher functions.",
"\4",
"The first searcher simply looks for a loader in the \"package.preload\" table.",
"\4",
"The second searcher looks for a loader as a Lua library, using the path stored at \"package.path\".",
"The search is done as described in function \"package.searchpath\".",
"\4",
"The third searcher looks for a loader as a C library, using the path given by the variable \"package.cpath\".",
"Again, the search is done as described in function \"package.searchpath\".",
"For instance, if the C path is the string",
"\3     \"./?.so;./?.dll;/usr/local/?/init.so\"",
"\4",
"the searcher for module \"foo\" will try to open the files \"./foo.so\", \"./foo.dll\", and \"/usr/local/foo/init.so\", in that order.",
"Once it finds a C library, this searcher first uses a dynamic link facility to link the application with the library.",
"Then it tries to find a C function inside the library to be used as the loader.",
"The name of this C function is the string \"luaopen_\" concatenated with a copy of the module name where each dot is replaced by an underscore.",
"Moreover, if the module name has a hyphen, its suffix after (and including) the first hyphen is removed.",
"For instance, if the module name is \"a.b.c-v2.1\", the function name will be \"luaopen_a_b_c\".",
"\4",
"The fourth searcher tries an all-in-one loader.",
"It searches the C path for a library for the root name of the given module.",
"For instance, when requiring \"a.b.c\", it will search for a C library for \"a\".",
"If found, it looks into it for an open function for the submodule; in our example, that would be \"luaopen_a_b_c\".",
"With this facility, a package can pack several C submodules into one single library, with each submodule keeping its original open function.",
"\4",
"All searchers except the first one (preload) return as the extra value the file name where the module was found, as returned by \"package.searchpath\".",
"The first searcher returns no extra value.",
"\4",
},
{ title = "package.searchpath (name, path [, sep [, rep]])", typ = 3;
"\4",
"Searches for the given \"name\" in the given \"path\".",
"\4",
"A path is a string containing a sequence of templates separated by semicolons.",
"For each template, the function replaces each interrogation mark (if any) in the template with a copy of \"name\" wherein all occurrences of \"sep\" (a dot, by default) were replaced by \"rep\" (the system's directory separator, by default), and then tries to open the resulting file name.",
"\4",
"For instance, if the path is the string",
"\3     \"./?.lua;./?.lc;/usr/local/?/init.lua\"",
"\4",
"the search for the name \"foo.a\" will try to open the files \"./foo/a.lua\", \"./foo/a.lc\", and \"/usr/local/foo/a/init.lua\", in that order.",
"\4",
"Returns the resulting name of the first file that it can open in read mode (after closing the file), or nil plus an error message if none succeeds.",
"(This error message lists all file names it tried to open.)",
},
},
{ title = "6.4 String Manipulation", typ = 3;
"\4",
"This library provides generic functions for string manipulation, such as finding and extracting substrings, and pattern matching.",
"When indexing a string in Lua, the first character is at position 1 (not at 0, as in C).",
"Indices are allowed to be negative and are interpreted as indexing backwards, from the end of the string.",
"Thus, the last character is at position -1, and so on.",
"\4",
"The string library provides all its functions inside the table \"string\".",
"It also sets a metatable for strings where the \"__index\" field points to the \"string\" table.",
"Therefore, you can use the string functions in object-oriented style.",
"For instance, \"string.byte(s,i)\" can be written as \"s:byte(i)\".",
"\4",
"The string library assumes one-byte character encodings.",
"\4",
{ title = "string.byte (s [, i [, j]])", typ = 3;
"Returns the internal numerical codes of the characters \"s[i]\", \"s[i+1]\", ..., \"s[j]\".",
"The default value for \"i\" is 1; the default value for \"j\" is \"i\".",
"These indices are corrected following the same rules of function \"string.sub\".",
"\4",
"Numerical codes are not necessarily portable across platforms.",
"\4",
},
{ title = "string.char (...)", typ = 3;
"Receives zero or more integers.",
"Returns a string with length equal to the number of arguments, in which each character has the internal numerical code equal to its corresponding argument.",
"\4",
"Numerical codes are not necessarily portable across platforms.",
"\4",
},
{ title = "string.dump (function [, strip])", typ = 3;
"\4",
"Returns a string containing a binary representation (a binary chunk) of the given function, so that a later \"load\" on this string returns a copy of the function (but with new upvalues).",
"If \"strip\" is a true value, the binary representation is created without debug information about the function (local variable names, lines, etc.).",
"\4",
"Functions with upvalues have only their number of upvalues saved.",
"When (re)loaded, those upvalues receive fresh instances containing nil.",
"(You can use the debug library to serialize and reload the upvalues of a function in a way adequate to your needs.)",
"\4",
},
{ title = "string.find (s, pattern [, init [, plain]])", typ = 3;
"\4",
"Looks for the first match of \"pattern\" (see §6.4.1) in the string \"s\".",
"If it finds a match, then \"find\" returns the indices of \"s\" where this occurrence starts and ends; otherwise, it returns nil.",
"A third, optional numerical argument \"init\" specifies where to start the search; its default value is 1 and can be negative.",
"A value of true as a fourth, optional argument \"plain\" turns off the pattern matching facilities, so the function does a plain \"find substring\" operation, with no characters in \"pattern\" being considered magic.",
"Note that if \"plain\" is given, then \"init\" must be given as well.",
"\4",
"If the pattern has captures, then in a successful match the captured values are also returned, after the two indices.",
"\4",
},
{ title = "string.format (formatstring, ...)", typ = 3;
"\4",
"Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string).",
"The format string follows the same rules as the ISO C function \"sprintf\".",
"The only differences are that the options/modifiers \"*\", \"h\", \"L\", \"l\", \"n\", and \"p\" are not supported and that there is an extra option, \"q\".",
"The \"q\" option formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter.",
"For instance, the call",
"\3     string.format('%q', 'a string with \"quotes\" and \\n new line')",
"\4",
"may produce the string:",
"\3     \"a string with \\\"quotes\\\" and \\",
"\3      new line\"",
"\4",
"Options \"A\" and \"a\" (when available), \"E\", \"e\", \"f\", \"G\", and \"g\" all expect a number as argument.",
"Options \"c\", \"d\", \"i\", \"o\", \"u\", \"X\", and \"x\" expect an integer.",
"Option \"q\" expects a string; option \"s\" expects a string without embedded zeros.",
"If the argument to option \"s\" is not a string, it is converted to one following the same rules of \"tostring\".",
"\4",
},
{ title = "string.gmatch (s, pattern)", typ = 3;
"Returns an iterator function that, each time it is called, returns the next captures from \"pattern\" (see §6.4.1) over the string \"s\".",
"If \"pattern\" specifies no captures, then the whole match is produced in each call.",
"\4",
"As an example, the following loop will iterate over all the words from string \"s\", printing one per line:",
"\3     s = \"hello world from Lua\"",
"\3     for w in string.gmatch(s, \"%a+\") do",
"\3       print(w)",
"\3     end",
"\4",
"The next example collects all pairs \"key=value\" from the given string into a table:",
"\3     t = {}",
"\3     s = \"from=world, to=Lua\"",
"\3     for k, v in string.gmatch(s, \"(%w+)=(%w+)\") do",
"\3       t[k] = v",
"\3     end",
"\4",
"For this function, a caret \"^\" at the start of a pattern does not work as an anchor, as this would prevent the iteration.",
"\4",
},
{ title = "string.gsub (s, pattern, repl [, n])", typ = 3;
"Returns a copy of \"s\" in which all (or the first \"n\", if given) occurrences of the \"pattern\" (see §6.4.1) have been replaced by a replacement string specified by \"repl\", which can be a string, a table, or a function.",
"\"gsub\" also returns, as its second value, the total number of matches that occurred.",
"The name \"gsub\" comes from Global SUBstitution.",
"\4",
"If \"repl\" is a string, then its value is used for replacement.",
"The character \"%\" works as an escape character: any sequence in \"repl\" of the form \"%d\", with d between 1 and 9, stands for the value of the d-th captured substring.",
"The sequence \"%0\" stands for the whole match.",
"The sequence \"%%\" stands for a single \"%\".",
"\4",
"If \"repl\" is a table, then the table is queried for every match, using the first capture as the key.",
"\4",
"If \"repl\" is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order.",
"\4",
"In any case, if the pattern specifies no captures, then it behaves as if the whole pattern was inside a capture.",
"\4",
"If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is false or nil, then there is no replacement (that is, the original match is kept in the string).",
"\4",
"Here are some examples:",
"\3     x = string.gsub(\"hello world\", \"(%w+)\", \"%1 %1\")",
"\3     --> x=\"hello hello world world\"",
"\3     x = string.gsub(\"hello world\", \"%w+\", \"%0 %0\", 1)",
"\3     --> x=\"hello hello world\"",
"\3     x = string.gsub(\"hello world from Lua\", \"(%w+)%s*(%w+)\", \"%2 %1\")",
"\3     --> x=\"world hello Lua from\"",
"\3     x = string.gsub(\"home = $HOME, user = $USER\", \"%$(%w+)\", os.getenv)",
"\3     --> x=\"home = /home/roberto, user = roberto\"",
"\3     x = string.gsub(\"4+5 = $return 4+5$\", \"%$(.-)%$\", function (s)",
"\3           return load(s)()",
"\3         end)",
"\3     --> x=\"4+5 = 9\"",
"\3     local t = {name=\"lua\", version=\"5.3\"}",
"\3     x = string.gsub(\"$name-$version.tar.gz\", \"%$(%w+)\", t)",
"\3     --> x=\"lua-5.3.tar.gz\"",
"\4",
},
{ title = "string.len (s)", typ = 3;
"Receives a string and returns its length.",
"The empty string \"\" has length 0.",
"Embedded zeros are counted, so \"a\\000bc\\000\" has length 5.",
"\4",
},
{ title = "string.lower (s)", typ = 3;
"Receives a string and returns a copy of this string with all uppercase letters changed to lowercase.",
"All other characters are left unchanged.",
"The definition of what an uppercase letter is depends on the current locale.",
"\4",
},
{ title = "string.match (s, pattern [, init])", typ = 3;
"Looks for the first match of \"pattern\" (see §6.4.1) in the string \"s\".",
"If it finds one, then \"match\" returns the captures from the pattern; otherwise it returns nil.",
"If \"pattern\" specifies no captures, then the whole match is returned.",
"A third, optional numerical argument \"init\" specifies where to start the search; its default value is 1 and can be negative.",
"\4",
},
{ title = "string.pack (fmt, v1, v2, ...)", typ = 3;
"\4",
"Returns a binary string containing the values \"v1\", \"v2\", etc.",
"packed (that is, serialized in binary form) according to the format string \"fmt\" (see §6.4.2).",
"\4",
},
{ title = "string.packsize (fmt)", typ = 3;
"\4",
"Returns the size of a string resulting from \"string.pack\" with the given format.",
"The format string cannot have the variable-length options \"s\" or \"z\" (see §6.4.2).",
"\4",
},
{ title = "string.rep (s, n [, sep])", typ = 3;
"Returns a string that is the concatenation of \"n\" copies of the string \"s\" separated by the string \"sep\".",
"The default value for \"sep\" is the empty string (that is, no separator).",
"Returns the empty string if \"n\" is not positive.",
"\4",
},
{ title = "string.reverse (s)", typ = 3;
"Returns a string that is the string \"s\" reversed.",
"\4",
},
{ title = "string.sub (s, i [, j])", typ = 3;
"Returns the substring of \"s\" that starts at \"i\"  and continues until \"j\"; \"i\" and \"j\" can be negative.",
"If \"j\" is absent, then it is assumed to be equal to -1 (which is the same as the string length).",
"In particular, the call \"string.sub(s,1,j)\" returns a prefix of \"s\" with length \"j\", and \"string.sub(s, -i)\" returns a suffix of \"s\" with length \"i\".",
"\4",
"If, after the translation of negative indices, \"i\" is less than 1, it is corrected to 1.",
"If \"j\" is greater than the string length, it is corrected to that length.",
"If, after these corrections, \"i\" is greater than \"j\", the function returns the empty string.",
"\4",
},
{ title = "string.unpack (fmt, s [, pos])", typ = 3;
"\4",
"Returns the values packed in string \"s\" (see \"string.pack\") according to the format string \"fmt\" (see §6.4.2).",
"An optional \"pos\" marks where to start reading in \"s\" (default is 1).",
"After the read values, this function also returns the index of the first unread byte in \"s\".",
"\4",
},
{ title = "string.upper (s)", typ = 3;
"Receives a string and returns a copy of this string with all lowercase letters changed to uppercase.",
"All other characters are left unchanged.",
"The definition of what a lowercase letter is depends on the current locale.",
},
{ title = "6.4.1 Patterns", typ = 3;
"\4",
"Patterns in Lua are described by regular strings, which are interpreted as patterns by the pattern-matching functions \"string.find\", \"string.gmatch\", \"string.gsub\", and \"string.match\".",
"This section describes the syntax and the meaning (that is, what they match) of these strings.",
{ title = "Character Class:", typ = 3;
"\4",
"A character class is used to represent a set of characters.",
"The following combinations are allowed in describing a character class:",
"\2x:  (where x is not one of the magic characters \"^$()%.[]*+-?\") represents the character x itself.",
"\2\".\":  (a dot) represents all characters.",
"\2\"%a\":  represents all letters.",
"\2\"%c\":  represents all control characters.",
"\2\"%d\":  represents all digits.",
"\2\"%g\":  represents all printable characters except space.",
"\2\"%l\":  represents all lowercase letters.",
"\2\"%p\":  represents all punctuation characters.",
"\2\"%s\":  represents all space characters.",
"\2\"%u\":  represents all uppercase letters.",
"\2\"%w\":  represents all alphanumeric characters.",
"\2\"%x\":  represents all hexadecimal digits.",
"\2\"%x\":  (where x is any non-alphanumeric character) represents the character x.",
"This is the standard way to escape the magic characters.",
"Any non-alphanumeric character (including all punctuations, even the non-magical) can be preceded by a \"%\" when used to represent itself in a pattern.",
"\2\"[set]\":  represents the class which is the union of all characters in set.",
"A range of characters can be specified by separating the end characters of the range, in ascending order, with a \"-\".",
"All classes \"%\"x described above can also be used as components in set.",
"All other characters in set represent themselves.",
"For example, \"[%w_]\" (or \"[_%w]\") represents all alphanumeric characters plus the underscore, \"[0-7]\" represents the octal digits, and \"[0-7%l%-]\" represents the octal digits plus the lowercase letters plus the \"-\" character.",
"\4",
"The interaction between ranges and classes is not defined.",
"Therefore, patterns like \"[%a-z]\" or \"[a-%%]\" have no meaning.",
"\2\"[^set]\":  represents the complement of set, where set is interpreted as above.",
"\2",
"\4",
"For all classes represented by single letters (\"%a\", \"%c\", etc.), the corresponding uppercase letter represents the complement of the class.",
"For instance, \"%S\" represents all non-space characters.",
"\4",
"The definitions of letter, space, and other character groups depend on the current locale.",
"In particular, the class \"[a-z]\" may not be equivalent to \"%l\".",
},
{ title = "Pattern Item:", typ = 3;
"\4",
"A pattern item can be",
"\2a single character class, which matches any single character in the class;",
"\2a single character class followed by \"*\", which matches zero or more repetitions of characters in the class.",
"These repetition items will always match the longest possible sequence;",
"\2a single character class followed by \"+\", which matches one or more repetitions of characters in the class.",
"These repetition items will always match the longest possible sequence;",
"\2a single character class followed by \"-\", which also matches zero or more repetitions of characters in the class.",
"Unlike \"*\", these repetition items will always match the shortest possible sequence;",
"\2a single character class followed by \"?\", which matches zero or one occurrence of a character in the class.",
"It always matches one occurrence if possible;",
"\2\"%n\", for n between 1 and 9; such item matches a substring equal to the n-th captured string (see below);",
"\2\"%bxy\", where x and y are two distinct characters; such item matches strings that start with x, end with y, and where the x and y are balanced.",
"This means that, if one reads the string from left to right, counting +1 for an x and -1 for a y, the ending y is the first y where the count reaches 0.",
"For instance, the item \"%b()\" matches expressions with balanced parentheses.",
"\2\"%f[set]\", a frontier pattern; such item matches an empty string at any position such that the next character belongs to set and the previous character does not belong to set.",
"The set set is interpreted as previously described.",
"The beginning and the end of the subject are handled as if they were the character \"\\0\".",
"\2",
},
{ title = "Pattern:", typ = 3;
"\4",
"A pattern is a sequence of pattern items.",
"A caret \"^\" at the beginning of a pattern anchors the match at the beginning of the subject string.",
"A \"$\" at the end of a pattern anchors the match at the end of the subject string.",
"At other positions, \"^\" and \"$\" have no special meaning and represent themselves.",
},
{ title = "Captures:", typ = 3;
"\4",
"A pattern can contain sub-patterns enclosed in parentheses; they describe captures.",
"When a match succeeds, the substrings of the subject string that match captures are stored (captured) for future use.",
"Captures are numbered according to their left parentheses.",
"For instance, in the pattern \"(a*(.)%w(%s*))\", the part of the string matching \"a*(.)%w(%s*)\" is stored as the first capture (and therefore has number 1); the character matching \".\" is captured with number 2, and the part matching \"%s*\" has number 3.",
"\4",
"As a special case, the empty capture \"()\" captures the current string position (a number).",
"For instance, if we apply the pattern \"()aa()\" on the string \"flaaap\", there will be two captures: 3 and 5.",
},
},
{ title = "6.4.2 Format Strings for Pack and Unpack", typ = 3;
"\4",
"The first argument to \"string.pack\", \"string.packsize\", and \"string.unpack\" is a format string, which describes the layout of the structure being created or read.",
"\4",
"A format string is a sequence of conversion options.",
"The conversion options are as follows:",
"\2\"<\": sets little endian",
"\2\">\": sets big endian",
"\2\"=\": sets native endian",
"\2\"![n]\": sets maximum alignment to \"n\" (default is native alignment)",
"\2\"b\": a signed byte (\"char\")",
"\2\"B\": an unsigned byte (\"char\")",
"\2\"h\": a signed \"short\" (native size)",
"\2\"H\": an unsigned \"short\" (native size)",
"\2\"l\": a signed \"long\" (native size)",
"\2\"L\": an unsigned \"long\" (native size)",
"\2\"j\": a \"lua_Integer\"",
"\2\"J\": a \"lua_Unsigned\"",
"\2\"T\": a \"size_t\" (native size)",
"\2\"i[n]\": a signed \"int\" with \"n\" bytes (default is native size)",
"\2\"I[n]\": an unsigned \"int\" with \"n\" bytes (default is native size)",
"\2\"f\": a \"float\" (native size)",
"\2\"d\": a \"double\" (native size)",
"\2\"n\": a \"lua_Number\"",
"\2\"cn\": a fixed-sized string with \"n\" bytes",
"\2\"z\": a zero-terminated string",
"\2\"s[n]\": a string preceded by its length coded as an unsigned integer with \"n\" bytes (default is a \"size_t\")",
"\2\"x\": one byte of padding",
"\2\"Xop\": an empty item that aligns according to option \"op\" (which is otherwise ignored)",
"\2\" \": (empty space) ignored",
"\2",
"\4",
"(A \"[n]\" means an optional integral numeral.)",
"Except for padding, spaces, and configurations (options \"xX <=>!\"), each option corresponds to an argument (in \"string.pack\") or a result (in \"string.unpack\").",
"\4",
"For options \"!n\", \"sn\", \"in\", and \"In\", \"n\" can be any integer between 1 and 16.",
"All integral options check overflows; \"string.pack\" checks whether the given value fits in the given size; \"string.unpack\" checks whether the read value fits in a Lua integer.",
"\4",
"Any format string starts as if prefixed by \"!1=\", that is, with maximum alignment of 1 (no alignment) and native endianness.",
"\4",
"Alignment works as follows: For each option, the format gets extra padding until the data starts at an offset that is a multiple of the minimum between the option size and the maximum alignment; this minimum must be a power of 2.",
"Options \"c\" and \"z\" are not aligned; option \"s\" follows the alignment of its starting integer.",
"\4",
"All padding is filled with zeros by \"string.pack\" (and ignored by \"string.unpack\").",
},
},
{ title = "6.5 UTF-8 Support", typ = 3;
"\4",
"This library provides basic support for UTF-8 encoding.",
"It provides all its functions inside the table \"utf8\".",
"This library does not provide any support for Unicode other than the handling of the encoding.",
"Any operation that needs the meaning of a character, such as character classification, is outside its scope.",
"\4",
"Unless stated otherwise, all functions that expect a byte position as a parameter assume that the given position is either the start of a byte sequence or one plus the length of the subject string.",
"As in the string library, negative indices count from the end of the string.",
"\4",
{ title = "utf8.char (...)", typ = 3;
"Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.",
"\4",
},
{ title = "utf8.charpattern", typ = 3;
"The pattern (a string, not a function) \"[\\0-\\x7F\\xC2-\\xF4][\\x80-\\xBF]*\" (see §6.4.1), which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.",
"\4",
},
{ title = "utf8.codes (s)", typ = 3;
"\4",
"Returns values so that the construction",
"\3     for p, c in utf8.codes(s) do body end",
"\4",
"will iterate over all characters in string \"s\", with \"p\" being the position (in bytes) and \"c\" the code point of each character.",
"It raises an error if it meets any invalid byte sequence.",
"\4",
},
{ title = "utf8.codepoint (s [, i [, j]])", typ = 3;
"Returns the codepoints (as integers) from all characters in \"s\" that start between byte position \"i\" and \"j\" (both included).",
"The default for \"i\" is 1 and for \"j\" is \"i\".",
"It raises an error if it meets any invalid byte sequence.",
"\4",
},
{ title = "utf8.len (s [, i [, j]])", typ = 3;
"Returns the number of UTF-8 characters in string \"s\" that start between positions \"i\" and \"j\" (both inclusive).",
"The default for \"i\" is 1 and for \"j\" is -1.",
"If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.",
"\4",
},
{ title = "utf8.offset (s, n [, i])", typ = 3;
"Returns the position (in bytes) where the encoding of the \"n\"-th character of \"s\" (counting from position \"i\") starts.",
"A negative \"n\" gets characters before position \"i\".",
"The default for \"i\" is 1 when \"n\" is non-negative and \"#s + 1\" otherwise, so that \"utf8.offset(s, -n)\" gets the offset of the \"n\"-th character from the end of the string.",
"If the specified character is neither in the subject nor right after its end, the function returns nil.",
"\4",
"As a special case, when \"n\" is 0 the function returns the start of the encoding of the character that contains the \"i\"-th byte of \"s\".",
"\4",
"This function assumes that \"s\" is a valid UTF-8 string.",
},
},
{ title = "6.6 Table Manipulation", typ = 3;
"\4",
"This library provides generic functions for table manipulation.",
"It provides all its functions inside the table \"table\".",
"\4",
"Remember that, whenever an operation needs the length of a table, the table must be a proper sequence or have a \"__len\" metamethod (see §3.4.7).",
"All functions ignore non-numeric keys in the tables given as arguments.",
"\4",
{ title = "table.concat (list [, sep [, i [, j]]])", typ = 3;
"\4",
"Given a list where all elements are strings or numbers, returns the string \"list[i]..sep..list[i+1] ... sep..list[j]\".",
"The default value for \"sep\" is the empty string, the default for \"i\" is 1, and the default for \"j\" is \"#list\".",
"If \"i\" is greater than \"j\", returns the empty string.",
"\4",
},
{ title = "table.insert (list, [pos,] value)", typ = 3;
"\4",
"Inserts element \"value\" at position \"pos\" in \"list\", shifting up the elements \"list[pos], list[pos+1], ..., list[#list]\".",
"The default value for \"pos\" is \"#list+1\", so that a call \"table.insert(t,x)\" inserts \"x\" at the end of list \"t\".",
"\4",
},
{ title = "table.move (a1, f, e, t [,a2])", typ = 3;
"\4",
"Moves elements from table \"a1\" to table \"a2\".",
"This function performs the equivalent to the following multiple assignment: \"a2[t],... = a1[f],...,a1[e]\".",
"The default for \"a2\" is \"a1\".",
"The destination range can overlap with the source range.",
"Index \"f\" must be positive.",
"\4",
},
{ title = "table.pack (...)", typ = 3;
"\4",
"Returns a new table with all parameters stored into keys 1, 2, etc.",
"and with a field \"n\" with the total number of parameters.",
"Note that the resulting table may not be a sequence.",
"\4",
},
{ title = "table.remove (list [, pos])", typ = 3;
"\4",
"Removes from \"list\" the element at position \"pos\", returning the value of the removed element.",
"When \"pos\" is an integer between 1 and \"#list\", it shifts down the elements \"list[pos+1], list[pos+2], ..., list[#list]\" and erases element \"list[#list]\"; The index \"pos\" can also be 0 when \"#list\" is 0, or \"#list + 1\"; in those cases, the function erases the element \"list[pos]\".",
"\4",
"The default value for \"pos\" is \"#list\", so that a call \"table.remove(l)\" removes the last element of list \"l\".",
"\4",
},
{ title = "table.sort (list [, comp])", typ = 3;
"\4",
"Sorts list elements in a given order, in-place, from \"list[1]\" to \"list[#list]\".",
"If \"comp\" is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that \"not comp(list[i+1],list[i])\" will be true after the sort).",
"If \"comp\" is not given, then the standard Lua operator \"<\" is used instead.",
"\4",
"The sort algorithm is not stable; that is, elements considered equal by the given order may have their relative positions changed by the sort.",
"\4",
},
{ title = "table.unpack (list [, i [, j]])", typ = 3;
"\4",
"Returns the elements from the given list.",
"This function is equivalent to",
"\3     return list[i], list[i+1], ..., list[j]",
"\4",
"By default, \"i\" is 1 and \"j\" is \"#list\".",
},
},
{ title = "6.7 Mathematical Functions", typ = 3;
"\4",
"This library provides basic mathematical functions.",
"It provides all its functions and constants inside the table \"math\".",
"Functions with the annotation \"integer/float\" give integer results for integer arguments and float results for float (or mixed) arguments.",
"Rounding functions (\"math.ceil\", \"math.floor\", and \"math.modf\") return an integer when the result fits in the range of an integer, or a float otherwise.",
"\4",
{ title = "math.abs (x)", typ = 3;
"\4",
"Returns the absolute value of \"x\". (integer/float)",
"\4",
},
{ title = "math.acos (x)", typ = 3;
"\4",
"Returns the arc cosine of \"x\" (in radians).",
"\4",
},
{ title = "math.asin (x)", typ = 3;
"\4",
"Returns the arc sine of \"x\" (in radians).",
"\4",
},
{ title = "math.atan (y [, x])", typ = 3;
"\4",
"Returns the arc tangent of \"y/x\" (in radians), but uses the signs of both parameters to find the quadrant of the result.",
"(It also handles correctly the case of \"x\" being zero.)",
"\4",
"The default value for \"x\" is 1, so that the call \"math.atan(y)\" returns the arc tangent of \"y\".",
"\4",
},
{ title = "math.ceil (x)", typ = 3;
"\4",
"Returns the smallest integral value larger than or equal to \"x\".",
"\4",
},
{ title = "math.cos (x)", typ = 3;
"\4",
"Returns the cosine of \"x\" (assumed to be in radians).",
"\4",
},
{ title = "math.deg (x)", typ = 3;
"\4",
"Converts the angle \"x\" from radians to degrees.",
"\4",
},
{ title = "math.exp (x)", typ = 3;
"\4",
"Returns the value e^x (where \"e\" is the base of natural logarithms).",
"\4",
},
{ title = "math.floor (x)", typ = 3;
"\4",
"Returns the largest integral value smaller than or equal to \"x\".",
"\4",
},
{ title = "math.fmod (x, y)", typ = 3;
"\4",
"Returns the remainder of the division of \"x\" by \"y\" that rounds the quotient towards zero. (integer/float)",
"\4",
},
{ title = "math.huge", typ = 3;
"\4",
"The float value \"HUGE_VAL\", a value larger than any other numerical value.",
"\4",
},
{ title = "math.log (x [, base])", typ = 3;
"\4",
"Returns the logarithm of \"x\" in the given base.",
"The default for \"base\" is e (so that the function returns the natural logarithm of \"x\").",
"\4",
},
{ title = "math.max (x, ...)", typ = 3;
"\4",
"Returns the argument with the maximum value, according to the Lua operator \"<\". (integer/float)",
"\4",
},
{ title = "math.maxinteger", typ = 3;
"An integer with the maximum value for an integer.",
"\4",
},
{ title = "math.min (x, ...)", typ = 3;
"\4",
"Returns the argument with the minimum value, according to the Lua operator \"<\". (integer/float)",
"\4",
},
{ title = "math.mininteger", typ = 3;
"An integer with the minimum value for an integer.",
"\4",
},
{ title = "math.modf (x)", typ = 3;
"\4",
"Returns the integral part of \"x\" and the fractional part of \"x\".",
"Its second result is always a float.",
"\4",
},
{ title = "math.pi", typ = 3;
"\4",
"The value of &pi;.",
"\4",
},
{ title = "math.rad (x)", typ = 3;
"\4",
"Converts the angle \"x\" from degrees to radians.",
"\4",
},
{ title = "math.random ([m [, n]])", typ = 3;
"\4",
"When called without arguments, returns a pseudo-random float with uniform distribution in the range  [0,1).",
"When called with two integers \"m\" and \"n\", \"math.random\" returns a pseudo-random integer with uniform distribution in the range [m, n].",
"(The value m-n cannot be negative and must fit in a Lua integer.)",
"The call \"math.random(n)\" is equivalent to \"math.random(1,n)\".",
"\4",
"This function is an interface to the underling pseudo-random generator function provided by C.",
"No guarantees can be given for its statistical properties.",
"\4",
},
{ title = "math.randomseed (x)", typ = 3;
"\4",
"Sets \"x\" as the \"seed\" for the pseudo-random generator: equal seeds produce equal sequences of numbers.",
"\4",
},
{ title = "math.sin (x)", typ = 3;
"\4",
"Returns the sine of \"x\" (assumed to be in radians).",
"\4",
},
{ title = "math.sqrt (x)", typ = 3;
"\4",
"Returns the square root of \"x\".",
"(You can also use the expression \"x^0.5\" to compute this value.)",
"\4",
},
{ title = "math.tan (x)", typ = 3;
"\4",
"Returns the tangent of \"x\" (assumed to be in radians).",
"\4",
},
{ title = "math.tointeger (x)", typ = 3;
"\4",
"If the value \"x\" is convertible to an integer, returns that integer.",
"Otherwise, returns nil.",
"\4",
},
{ title = "math.type (x)", typ = 3;
"\4",
"Returns \"integer\" if \"x\" is an integer, \"float\" if it is a float, or nil if \"x\" is not a number.",
"\4",
},
{ title = "math.ult (m, n)", typ = 3;
"\4",
"Returns a boolean, true if integer \"m\" is below integer \"n\" when they are compared as unsigned integers.",
},
},
{ title = "6.8 Input and Output Facilities", typ = 3;
"\4",
"The I/O library provides two different styles for file manipulation.",
"The first one uses implicit file handles; that is, there are operations to set a default input file and a default output file, and all input/output operations are over these default files.",
"The second style uses explicit file handles.",
"\4",
"When using implicit file handles, all operations are supplied by table \"io\".",
"When using explicit file handles, the operation \"io.open\" returns a file handle and then all operations are supplied as methods of the file handle.",
"\4",
"The table \"io\" also provides three predefined file handles with their usual meanings from C: \"io.stdin\", \"io.stdout\", and \"io.stderr\".",
"The I/O library never closes these files.",
"\4",
"Unless otherwise stated, all I/O functions return nil on failure (plus an error message as a second result and a system-dependent error code as a third result) and some value different from nil on success.",
"On non-POSIX systems, the computation of the error message and error code in case of errors may be not thread safe, because they rely on the global C variable \"errno\".",
"\4",
{ title = "io.close ([file])", typ = 3;
"\4",
"Equivalent to \"file:close()\".",
"Without a \"file\", closes the default output file.",
"\4",
},
{ title = "io.flush ()", typ = 3;
"\4",
"Equivalent to \"io.output():flush()\".",
"\4",
},
{ title = "io.input ([file])", typ = 3;
"\4",
"When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file.",
"When called with a file handle, it simply sets this file handle as the default input file.",
"When called without parameters, it returns the current default input file.",
"\4",
"In case of errors this function raises the error, instead of returning an error code.",
"\4",
},
{ title = "io.lines ([filename ...])", typ = 3;
"\4",
"Opens the given file name in read mode and returns an iterator function that works like \"file:lines(...)\" over the opened file.",
"When the iterator function detects the end of file, it returns no values (to finish the loop) and automatically closes the file.",
"\4",
"The call \"io.lines()\" (with no file name) is equivalent to \"io.input():lines('*l')\"; that is, it iterates over the lines of the default input file.",
"In this case it does not close the file when the loop ends.",
"\4",
"In case of errors this function raises the error, instead of returning an error code.",
"\4",
},
{ title = "io.open (filename [, mode])", typ = 3;
"\4",
"This function opens a file, in the mode specified in the string \"mode\".",
"It returns a new file handle, or, in case of errors, nil plus an error message.",
"\4",
"The \"mode\" string can be any of the following:",
"\2\"r\":  read mode (the default);",
"\2\"w\":  write mode;",
"\2\"a\":  append mode;",
"\2\"r+\":  update mode, all previous data is preserved;",
"\2\"w+\":  update mode, all previous data is erased;",
"\2\"a+\":  append update mode, previous data is preserved,   writing is only allowed at the end of file.",
"\2",
"\4",
"The \"mode\" string can also have a \"b\" at the end, which is needed in some systems to open the file in binary mode.",
"\4",
},
{ title = "io.output ([file])", typ = 3;
"\4",
"Similar to \"io.input\", but operates over the default output file.",
"\4",
},
{ title = "io.popen (prog [, mode])", typ = 3;
"\4",
"This function is system dependent and is not available on all platforms.",
"\4",
"Starts program \"prog\" in a separated process and returns a file handle that you can use to read data from this program (if \"mode\" is \"r\", the default) or to write data to this program (if \"mode\" is \"w\").",
"\4",
},
{ title = "io.read (...)", typ = 3;
"\4",
"Equivalent to \"io.input():read(...)\".",
"\4",
},
{ title = "io.tmpfile ()", typ = 3;
"\4",
"Returns a handle for a temporary file.",
"This file is opened in update mode and it is automatically removed when the program ends.",
"\4",
},
{ title = "io.type (obj)", typ = 3;
"\4",
"Checks whether \"obj\" is a valid file handle.",
"Returns the string \"file\" if \"obj\" is an open file handle, \"closed file\" if \"obj\" is a closed file handle, or nil if \"obj\" is not a file handle.",
"\4",
},
{ title = "io.write (...)", typ = 3;
"\4",
"Equivalent to \"io.output():write(...)\".",
"\4",
},
{ title = "file:close ()", typ = 3;
"\4",
"Closes \"file\".",
"Note that files are automatically closed when their handles are garbage collected, but that takes an unpredictable amount of time to happen.",
"\4",
"When closing a file handle created with \"io.popen\", \"file:close\" returns the same values returned by \"os.execute\".",
"\4",
},
{ title = "file:flush ()", typ = 3;
"\4",
"Saves any written data to \"file\".",
"\4",
},
{ title = "file:lines (...)", typ = 3;
"\4",
"Returns an iterator function that, each time it is called, reads the file according to the given formats.",
"When no format is given, uses \"l\" as a default.",
"As an example, the construction",
"\3     for c in file:lines(1) do body end",
"\4",
"will iterate over all characters of the file, starting at the current position.",
"Unlike \"io.lines\", this function does not close the file when the loop ends.",
"\4",
"In case of errors this function raises the error, instead of returning an error code.",
"\4",
},
{ title = "file:read (...)", typ = 3;
"\4",
"Reads the file \"file\", according to the given formats, which specify what to read.",
"For each format, the function returns a string or a number with the characters read, or nil if it cannot read data with the specified format.",
"(In this latter case, the function does not read subsequent formats.)",
"When called without formats, it uses a default format that reads the next line (see below).",
"\4",
"The available formats are",
"\2\"n\":  reads a numeral and returns it as a float or an integer, following the lexical conventions of Lua.",
"(The numeral may have leading spaces and a sign.)",
"This format always reads the longest input sequence that is a valid prefix for a number; if that prefix does not form a valid number (e.g., an empty string, \"0x\", or \"3.4e-\"), it is discarded and the function returns nil.",
"\2\"i\":  reads an integral number and returns it as an integer.",
"\2\"a\":  reads the whole file, starting at the current position.",
"On end of file, it returns the empty string.",
"\2\"l\":  reads the next line skipping the end of line, returning nil on end of file.",
"This is the default format.",
"\2\"L\":  reads the next line keeping the end-of-line character (if present), returning nil on end of file.",
"\2number:  reads a string with up to this number of bytes, returning nil on end of file.",
"If \"number\" is zero, it reads nothing and returns an empty string, or nil on end of file.",
"\2",
"\4",
"The formats \"l\" and \"L\" should be used only for text files.",
"\4",
},
{ title = "file:seek ([whence [, offset]])", typ = 3;
"\4",
"Sets and gets the file position, measured from the beginning of the file, to the position given by \"offset\" plus a base specified by the string \"whence\", as follows:",
"\2\"set\":  base is position 0 (beginning of the file);",
"\2\"cur\":  base is current position;",
"\2\"end\":  base is end of file;",
"\2",
"\4",
"In case of success, \"seek\" returns the final file position, measured in bytes from the beginning of the file.",
"If \"seek\" fails, it returns nil, plus a string describing the error.",
"\4",
"The default value for \"whence\" is \"cur\", and for \"offset\" is 0.",
"Therefore, the call \"file:seek()\" returns the current file position, without changing it; the call \"file:seek('set')\" sets the position to the beginning of the file (and returns 0); and the call \"file:seek('end')\" sets the position to the end of the file, and returns its size.",
"\4",
},
{ title = "file:setvbuf (mode [, size])", typ = 3;
"\4",
"Sets the buffering mode for an output file.",
"There are three available modes:",
"\2\"no\":  no buffering; the result of any output operation appears immediately.",
"\2\"full\":  full buffering; output operation is performed only when the buffer is full or when you explicitly \"flush\" the file (see \"io.flush\").",
"\2\"line\":  line buffering; output is buffered until a newline is output or there is any input from some special files (such as a terminal device).",
"\2",
"\4",
"For the last two cases, \"size\" specifies the size of the buffer, in bytes.",
"The default is an appropriate size.",
"\4",
},
{ title = "file:write (...)", typ = 3;
"\4",
"Writes the value of each of its arguments to \"file\".",
"The arguments must be strings or numbers.",
"\4",
"In case of success, this function returns \"file\".",
"Otherwise it returns nil plus a string describing the error.",
},
},
{ title = "6.9 Operating System Facilities", typ = 3;
"\4",
"This library is implemented through table \"os\".",
"\4",
{ title = "os.clock ()", typ = 3;
"\4",
"Returns an approximation of the amount in seconds of CPU time used by the program.",
"\4",
},
{ title = "os.date ([format [, time]])", typ = 3;
"\4",
"Returns a string or a table containing date and time, formatted according to the given string \"format\".",
"\4",
"If the \"time\" argument is present, this is the time to be formatted (see the \"os.time\" function for a description of this value).",
"Otherwise, \"date\" formats the current time.",
"\4",
"If \"format\" starts with \"!\", then the date is formatted in Coordinated Universal Time.",
"After this optional character, if \"format\" is the string \"*t\", then \"date\" returns a table with the following fields: \"year\" (four digits), \"month\" (1-12), \"day\" (1-31), \"hour\" (0-23), \"min\" (0-59), \"sec\" (0-61), \"wday\" (weekday, Sunday is 1), \"yday\" (day of the year), and \"isdst\" (daylight saving flag, a boolean).",
"This last field may be absent if the information is not available.",
"\4",
"If \"format\" is not \"*t\", then \"date\" returns the date as a string, formatted according to the same rules as the ISO C function \"strftime\".",
"\4",
"When called without arguments, \"date\" returns a reasonable date and time representation that depends on the host system and on the current locale (that is, \"os.date()\" is equivalent to \"os.date('%c')\").",
"\4",
"On non-POSIX systems, this function may be not thread safe because of its reliance on C function \"gmtime\" and C function \"localtime\".",
"\4",
},
{ title = "os.difftime (t2, t1)", typ = 3;
"\4",
"Returns the difference, in seconds, from time \"t1\" to time \"t2\" (where the times are values returned by \"os.time\").",
"In POSIX, Windows, and some other systems, this value is exactly \"t2\"-\"t1\".",
"\4",
},
{ title = "os.execute ([command])", typ = 3;
"\4",
"This function is equivalent to the ISO C function \"system\".",
"It passes \"command\" to be executed by an operating system shell.",
"Its first result is true if the command terminated successfully, or nil otherwise.",
"After this first result the function returns a string plus a number, as follows:",
"\2\"exit\":  the command terminated normally; the following number is the exit status of the command.",
"\2\"signal\":  the command was terminated by a signal; the following number is the signal that terminated the command.",
"\2",
"\4",
"When called without a \"command\", \"os.execute\" returns a boolean that is true if a shell is available.",
"\4",
},
{ title = "os.exit ([code [, close]])", typ = 3;
"\4",
"Calls the ISO C function \"exit\" to terminate the host program.",
"If \"code\" is true, the returned status is \"EXIT_SUCCESS\"; if \"code\" is false, the returned status is \"EXIT_FAILURE\"; if \"code\" is a number, the returned status is this number.",
"The default value for \"code\" is true.",
"\4",
"If the optional second argument \"close\" is true, closes the Lua state before exiting.",
"\4",
},
{ title = "os.getenv (varname)", typ = 3;
"\4",
"Returns the value of the process environment variable \"varname\", or nil if the variable is not defined.",
"\4",
},
{ title = "os.remove (filename)", typ = 3;
"\4",
"Deletes the file (or empty directory, on POSIX systems) with the given name.",
"If this function fails, it returns nil, plus a string describing the error and the error code.",
"\4",
},
{ title = "os.rename (oldname, newname)", typ = 3;
"\4",
"Renames file or directory named \"oldname\" to \"newname\".",
"If this function fails, it returns nil, plus a string describing the error and the error code.",
"\4",
},
{ title = "os.setlocale (locale [, category])", typ = 3;
"\4",
"Sets the current locale of the program.",
"\"locale\" is a system-dependent string specifying a locale; \"category\" is an optional string describing which category to change: \"all\", \"collate\", \"ctype\", \"monetary\", \"numeric\", or \"time\"; the default category is \"all\".",
"The function returns the name of the new locale, or nil if the request cannot be honored.",
"\4",
"If \"locale\" is the empty string, the current locale is set to an implementation-defined native locale.",
"If \"locale\" is the string \"C\", the current locale is set to the standard C locale.",
"\4",
"When called with nil as the first argument, this function only returns the name of the current locale for the given category.",
"\4",
"This function may be not thread safe because of its reliance on C function \"setlocale\".",
"\4",
},
{ title = "os.time ([table])", typ = 3;
"\4",
"Returns the current time when called without arguments, or a time representing the date and time specified by the given table.",
"This table must have fields \"year\", \"month\", and \"day\", and may have fields \"hour\" (default is 12), \"min\" (default is 0), \"sec\" (default is 0), and \"isdst\" (default is nil).",
"For a description of these fields, see the \"os.date\" function.",
"\4",
"The returned value is a number, whose meaning depends on your system.",
"In POSIX, Windows, and some other systems, this number counts the number of seconds since some given start time (the \"epoch\").",
"In other systems, the meaning is not specified, and the number returned by \"time\" can be used only as an argument to \"os.date\" and \"os.difftime\".",
"\4",
},
{ title = "os.tmpname ()", typ = 3;
"\4",
"Returns a string with a file name that can be used for a temporary file.",
"The file must be explicitly opened before its use and explicitly removed when no longer needed.",
"\4",
"On POSIX systems, this function also creates a file with that name, to avoid security risks.",
"(Someone else might create the file with wrong permissions in the time between getting the name and creating the file.)",
"You still have to open the file to use it and to remove it (even if you do not use it).",
"\4",
"When possible, you may prefer to use \"io.tmpfile\", which automatically removes the file when the program ends.",
},
},
{ title = "6.10 The Debug Library", typ = 3;
"\4",
"This library provides the functionality of the debug interface (§4.9) to Lua programs.",
"You should exert care when using this library.",
"Several of its functions violate basic assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside; that userdata metatables cannot be changed by Lua code; that Lua programs do not crash) and therefore can compromise otherwise secure code.",
"Moreover, some functions in this library may be slow.",
"\4",
"All functions in this library are provided inside the \"debug\" table.",
"All functions that operate over a thread have an optional first argument which is the thread to operate over.",
"The default is always the current thread.",
"\4",
{ title = "debug.debug ()", typ = 3;
"\4",
"Enters an interactive mode with the user, running each string that the user enters.",
"Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on.",
"A line containing only the word \"cont\" finishes this function, so that the caller continues its execution.",
"\4",
"Note that commands for \"debug.debug\" are not lexically nested within any function and so have no direct access to local variables.",
"\4",
},
{ title = "debug.gethook ([thread])", typ = 3;
"\4",
"Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the \"debug.sethook\" function).",
"\4",
},
{ title = "debug.getinfo ([thread,] f [, what])", typ = 3;
"\4",
"Returns a table with information about a function.",
"You can give the function directly or you can give a number as the value of \"f\", which means the function running at level \"f\" of the call stack of the given thread: level 0 is the current function (\"getinfo\" itself); level 1 is the function that called \"getinfo\" (except for tail calls, which do not count on the stack); and so on.",
"If \"f\" is a number larger than the number of active functions, then \"getinfo\" returns nil.",
"\4",
"The returned table can contain all the fields returned by \"lua_getinfo\", with the string \"what\" describing which fields to fill in.",
"The default for \"what\" is to get all information available, except the table of valid lines.",
"If present, the option \"f\" adds a field named \"func\" with the function itself.",
"If present, the option \"L\" adds a field named \"activelines\" with the table of valid lines.",
"\4",
"For instance, the expression \"debug.getinfo(1,'n').name\" returns a table with a name for the current function, if a reasonable name can be found, and the expression \"debug.getinfo(print)\" returns a table with all available information about the \"print\" function.",
"\4",
},
{ title = "debug.getlocal ([thread,] f, local)", typ = 3;
"\4",
"This function returns the name and the value of the local variable with index \"local\" of the function at level \"f\" of the stack.",
"This function accesses not only explicit local variables, but also parameters, temporaries, etc.",
"\4",
"The first parameter or local variable has index 1, and so on, following the order that they are declared in the code, counting only the variables that are active in the current scope of the function.",
"Negative indices refer to vararg parameters; -1 is the first vararg parameter.",
"The function returns nil if there is no variable with the given index, and raises an error when called with a level out of range.",
"(You can call \"debug.getinfo\" to check whether the level is valid.)",
"\4",
"Variable names starting with \"(\" (open parenthesis) represent variables with no known names (internal variables such as loop control variables, and variables from chunks saved without debug information).",
"\4",
"The parameter \"f\" may also be a function.",
"In that case, \"getlocal\" returns only the name of function parameters.",
"\4",
},
{ title = "debug.getmetatable (value)", typ = 3;
"\4",
"Returns the metatable of the given \"value\" or nil if it does not have a metatable.",
"\4",
},
{ title = "debug.getregistry ()", typ = 3;
"\4",
"Returns the registry table (see §4.5).",
"\4",
},
{ title = "debug.getupvalue (f, up)", typ = 3;
"\4",
"This function returns the name and the value of the upvalue with index \"up\" of the function \"f\".",
"The function returns nil if there is no upvalue with the given index.",
"\4",
"Variable names starting with \"(\" (open parenthesis) represent variables with no known names (variables from chunks saved without debug information).",
"\4",
},
{ title = "debug.getuservalue (u)", typ = 3;
"\4",
"Returns the Lua value associated to \"u\".",
"If \"u\" is not a userdata, returns nil.",
"\4",
},
{ title = "debug.sethook ([thread,] hook, mask [, count])", typ = 3;
"\4",
"Sets the given function as a hook.",
"The string \"mask\" and the number \"count\" describe when the hook will be called.",
"The string mask may have any combination of the following characters, with the given meaning:",
"\2\"c\":  the hook is called every time Lua calls a function;",
"\2\"r\":  the hook is called every time Lua returns from a function;",
"\2\"l\":  the hook is called every time Lua enters a new line of code.",
"\2",
"\4",
"Moreover, with a \"count\" different from zero, the hook is called also after every \"count\" instructions.",
"\4",
"When called without arguments, \"debug.sethook\" turns off the hook.",
"\4",
"When the hook is called, its first parameter is a string describing the event that has triggered its call: \"call\" (or \"tail call\"), \"return\", \"line\", and \"count\".",
"For line events, the hook also gets the new line number as its second parameter.",
"Inside a hook, you can call \"getinfo\" with level 2 to get more information about the running function (level 0 is the \"getinfo\" function, and level 1 is the hook function).",
"\4",
},
{ title = "debug.setlocal ([thread,] level, local, value)", typ = 3;
"\4",
"This function assigns the value \"value\" to the local variable with index \"local\" of the function at level \"level\" of the stack.",
"The function returns nil if there is no local variable with the given index, and raises an error when called with a \"level\" out of range.",
"(You can call \"getinfo\" to check whether the level is valid.)",
"Otherwise, it returns the name of the local variable.",
"\4",
"See \"debug.getlocal\" for more information about variable indices and names.",
"\4",
},
{ title = "debug.setmetatable (value, table)", typ = 3;
"\4",
"Sets the metatable for the given \"value\" to the given \"table\" (which can be nil).",
"Returns \"value\".",
"\4",
},
{ title = "debug.setupvalue (f, up, value)", typ = 3;
"\4",
"This function assigns the value \"value\" to the upvalue with index \"up\" of the function \"f\".",
"The function returns nil if there is no upvalue with the given index.",
"Otherwise, it returns the name of the upvalue.",
"\4",
},
{ title = "debug.setuservalue (udata, value)", typ = 3;
"\4",
"Sets the given \"value\" as the Lua value associated to the given \"udata\".",
"\"udata\" must be a full userdata.",
"\4",
"Returns \"udata\".",
"\4",
},
{ title = "debug.traceback ([thread,] [message [, level]])", typ = 3;
"\4",
"If \"message\" is present but is neither a string nor nil, this function returns \"message\" without further processing.",
"Otherwise, it returns a string with a traceback of the call stack.",
"The optional \"message\" string is appended at the beginning of the traceback.",
"An optional \"level\" number tells at which level to start the traceback (default is 1, the function calling \"traceback\").",
"\4",
},
{ title = "debug.upvalueid (f, n)", typ = 3;
"\4",
"Returns a unique identifier (as a light userdata) for the upvalue numbered \"n\" from the given function.",
"\4",
"These unique identifiers allow a program to check whether different closures share upvalues.",
"Lua closures that share an upvalue (that is, that access a same external local variable) will return identical ids for those upvalue indices.",
"\4",
},
{ title = "debug.upvaluejoin (f1, n1, f2, n2)", typ = 3;
"\4",
"Make the \"n1\"-th upvalue of the Lua closure \"f1\" refer to the \"n2\"-th upvalue of the Lua closure \"f2\".",
},
},
},
{ title = "7. Lua Standalone", typ = 1;
"\4",
"Although Lua has been designed as an extension language, to be embedded in a host C program, it is also frequently used as a standalone language.",
"An interpreter for Lua as a standalone language, called simply \"lua\", is provided with the standard distribution.",
"The standalone interpreter includes all standard libraries, including the debug library.",
"Its usage is:",
"\3     lua [options] [script [args]]",
"\4",
"The options are:",
"\2\"-e stat\":  executes string stat;",
"\2\"-l mod\":  \"requires\" mod;",
"\2\"-i\":  enters interactive mode after running script;",
"\2\"-v\":  prints version information;",
"\2\"-E\":  ignores environment variables;",
"\2\"--\":  stops handling options;",
"\2\"-\":  executes \"stdin\" as a file and stops handling options.",
"\2",
"\4",
"After handling its options, \"lua\" runs the given script.",
"When called without arguments, \"lua\" behaves as \"lua -v -i\" when the standard input (\"stdin\") is a terminal, and as \"lua -\" otherwise.",
"\4",
"When called without option \"-E\", the interpreter checks for an environment variable \"LUA_INIT_5_3\" (or \"LUA_INIT\" if the versioned name is not defined) before running any argument.",
"If the variable content has the format \"@filename\", then \"lua\" executes the file.",
"Otherwise, \"lua\" executes the string itself.",
"\4",
"When called with option \"-E\", besides ignoring \"LUA_INIT\", Lua also ignores the values of \"LUA_PATH\" and \"LUA_CPATH\", setting the values of \"package.path\" and \"package.cpath\" with the default paths defined in \"luaconf.h\".",
"\4",
"All options are handled in order, except \"-i\" and \"-E\".",
"For instance, an invocation like",
"\3     $ lua -e'a=1' -e 'print(a)' script.lua",
"\4",
"will first set \"a\" to 1, then print the value of \"a\", and finally run the file \"script.lua\" with no arguments.",
"(Here \"$\" is the shell prompt. Your prompt may be different.)",
"\4",
"Before running any code, \"lua\" collects all command-line arguments in a global table called \"arg\".",
"The script name goes to index 0, the first argument after the script name goes to index 1, and so on.",
"Any arguments before the script name (that is, the interpreter name plus its options) go to negative indices.",
"For instance, in the call",
"\3     $ lua -la b.lua t1 t2",
"\4",
"the table is like this:",
"\3     arg = { [-2] = \"lua\", [-1] = \"-la\",",
"\3             [0] = \"b.lua\",",
"\3             [1] = \"t1\", [2] = \"t2\" }",
"\4",
"If there is no script in the call, the interpreter name goes to index 0, followed by the other arguments.",
"For instance, the call",
"\3     $ lua -e \"print(arg[1])\"",
"\4",
"will print \"-e\".",
"If there is a script, the script is called with parameters \"arg[1]\", ..., \"arg[#arg]\".",
"(Like all chunks in Lua, the script is compiled as a vararg function.)",
"\4",
"In interactive mode, Lua repeatedly prompts and waits for a line.",
"After reading a line, Lua first try to interpret the line as an expression.",
"If it succeeds, it prints its value.",
"Otherwise, it interprets the line as a statement.",
"If you write an incomplete statement, the interpreter waits for its completion by issuing a different prompt.",
"\4",
"In case of unprotected errors in the script, the interpreter reports the error to the standard error stream.",
"If the error object is not a string but has a metamethod \"__tostring\", the interpreter calls this metamethod to produce the final message.",
"Otherwise, the interpreter converts the error object to a string and adds a stack traceback to it.",
"\4",
"When finishing normally, the interpreter closes its main Lua state (see \"lua_close\").",
"The script can avoid this step by calling \"os.exit\" to terminate.",
"\4",
"To allow the use of Lua as a script interpreter in Unix systems, the standalone interpreter skips the first line of a chunk if it starts with \"#\".",
"Therefore, Lua scripts can be made into executable programs by using \"chmod +x\" and the \"#!\" form, as in",
"\3     #!/usr/local/bin/lua",
"\4",
"(Of course, the location of the Lua interpreter may be different in your machine.",
"If \"lua\" is in your \"PATH\", then",
"\3     #!/usr/bin/env lua",
"\4",
"is a more portable solution.)",
},
{ title = "8. Incompatibilities with the Previous Version", typ = 1;
"\4",
"Here we list the incompatibilities that you may find when moving a program from Lua 5.2 to Lua 5.3.",
"You can avoid some incompatibilities by compiling Lua with appropriate options (see file \"luaconf.h\").",
"However, all these compatibility options will be removed in the future.",
"\4",
"Lua versions can always change the C API in ways that do not imply source-code changes in a program, such as the numeric values for constants or the implementation of functions as macros.",
"Therefore, you should not assume that binaries are compatible between different Lua versions.",
"Always recompile clients of the Lua API when using a new version.",
"\4",
"Similarly, Lua versions can always change the internal representation of precompiled chunks; precompiled chunks are not compatible between different Lua versions.",
"\4",
"The standard paths in the official distribution may change between versions.",
{ title = "8.1 Changes in the Language", typ = 1;
"\2The main difference between Lua 5.2 and Lua 5.3 is the introduction of an integer subtype for numbers.",
"Although this change should not affect \"normal\" computations, some computations (mainly those that involve some kind of overflow) can give different results.",
"\4",
"You can fix these differences by forcing a number to be a float (in Lua 5.2 all numbers were float), in particular writing constants with an ending \".0\" or using \"x = x + 0.0\" to convert a variable.",
"(This recommendation is only for a quick fix for an occasional incompatibility; it is not a general guideline for good programming.",
"For good programming, use floats where you need floats and integers where you need integers.)",
"\2The conversion of a float to a string now adds a \".0\" suffix to the result if it looks like an integer.",
"(For instance, the float 2.0 will be printed as \"2.0\", not as \"2\".)",
"You should always use an explicit format when you need a specific format for numbers.",
"\4",
"(Formally this is not an incompatibility, because Lua does not specify how numbers are formatted as strings, but some programs assumed a specific format.)",
"\2The generational mode for the garbage collector was removed.",
"(It was an experimental feature in Lua 5.2.)",
"\2",
},
{ title = "8.2 Changes in the Libraries", typ = 1;
"\2The \"bit32\" library has been deprecated.",
"It is easy to require a compatible external library or, better yet, to replace its functions with appropriate bitwise operations.",
"(Keep in mind that \"bit32\" operates on 32-bit integers, while the bitwise operators in standard Lua operate on 64-bit integers.)",
"\2The Table library now respects metamethods for setting and getting elements.",
"\2The \"ipairs\" iterator now respects metamethods and its \"__ipairs\" metamethod has been deprecated.",
"\2Option names in \"io.read\" do not have a starting \"*\" anymore.",
"For compatibility, Lua will continue to ignore this character.",
"\2The following functions were deprecated in the mathematical library: \"atan2\", \"cosh\", \"sinh\", \"tanh\", \"pow\", \"frexp\", and \"ldexp\".",
"You can replace \"math.pow(x,y)\" with \"x^y\"; you can replace \"math.atan2\" with \"math.atan\", which now accepts one or two parameters; you can replace \"math.ldexp(x,exp)\" with \"x * 2.0^exp\".",
"For the other operations, you can either use an external library or implement them in Lua.",
"\2The searcher for C loaders used by \"require\" changed the way it handles versioned names.",
"Now, the version should come after the module name (as is usual in most other tools).",
"For compatibility, that searcher still tries the old format if it cannot find an open function according to the new style.",
"(Lua 5.2 already worked that way, but it did not document the change.)",
"\2",
},
{ title = "8.3 Changes in the API", typ = 1;
"\2Continuation functions now receive as parameters what they needed to get through \"lua_getctx\", so \"lua_getctx\" has been removed.",
"Adapt your code accordingly.",
"\2Function \"lua_dump\" has an extra parameter, \"strip\".",
"Use 0 as the value of this parameter to get the old behavior.",
"\2Functions to inject/project unsigned integers (\"lua_pushunsigned\", \"lua_tounsigned\", \"lua_tounsignedx\", \"luaL_checkunsigned\", \"luaL_optunsigned\") were deprecated.",
"Use their signed equivalents with a type cast.",
"\2Macros to project non-default integer types (\"luaL_checkint\", \"luaL_optint\", \"luaL_checklong\", \"luaL_optlong\") were deprecated.",
"Use their equivalent over \"lua_Integer\" with a type cast (or, when possible, use \"lua_Integer\" in your code).",
"\2",
},
},
{ title = "9. The Complete Syntax of Lua", typ = 1;
"\4",
"Here is the complete syntax of Lua in extended BNF.",
"As usual in extended BNF, {A} means 0 or more As, and [A] means an optional A.",
"(For operator precedences, see §3.4.8; for a description of the terminals Name, Numeral, and LiteralString, see §3.1.)",
"\3\9chunk ::= block",
"\3\9block ::= {stat} [retstat]",
"\3\9stat ::=  `;’ |",
"\3\9\9 varlist `=’ explist |",
"\3\9\9 functioncall |",
"\3\9\9 label |",
"\3\9\9 break |",
"\3\9\9 goto Name |",
"\3\9\9 do block end |",
"\3\9\9 while exp do block end |",
"\3\9\9 repeat block until exp |",
"\3\9\9 if exp then block {elseif exp then block} [else block] end |",
"\3\9\9 for Name `=’ exp `,’ exp [`,’ exp] do block end |",
"\3\9\9 for namelist in explist do block end |",
"\3\9\9 function funcname funcbody |",
"\3\9\9 local function Name funcbody |",
"\3\9\9 local namelist [`=’ explist]",
"\3\9retstat ::= return [explist] [`;’]",
"\3\9label ::= `::’ Name `::’",
"\3\9funcname ::= Name {`.’ Name} [`:’ Name]",
"\3\9varlist ::= var {`,’ var}",
"\3\9var ::=  Name | prefixexp `[’ exp `]’ | prefixexp `.’ Name",
"\3\9namelist ::= Name {`,’ Name}",
"\3\9explist ::= exp {`,’ exp}",
"\3\9exp ::=  nil | false | true | Numeral | LiteralString | `...’ | functiondef |",
"\3\9\9 prefixexp | tableconstructor | exp binop exp | unop exp",
"\3\9prefixexp ::= var | functioncall | `(’ exp `)’",
"\3\9functioncall ::=  prefixexp args | prefixexp `:’ Name args",
"\3\9args ::=  `(’ [explist] `)’ | tableconstructor | LiteralString",
"\3\9functiondef ::= function funcbody",
"\3\9funcbody ::= `(’ [parlist] `)’ block end",
"\3\9parlist ::= namelist [`,’ `...’] | `...’",
"\3\9tableconstructor ::= `{’ [fieldlist] `}’",
"\3\9fieldlist ::= field {fieldsep field} [fieldsep]",
"\3\9field ::= `[’ exp `]’ `=’ exp | Name `=’ exp | exp",
"\3\9fieldsep ::= `,’ | `;’",
"\3\9binop ::=  `+’ | `-’ | `*’ | `/’ | `//’ | `^’ | `%’ |",
"\3\9\9 `&’ | `~’ | `|’ | `>>’ | `<<’ | `..’ |",
"\3\9\9 `<’ | `<=’ | `>’ | `>=’ | `==’ | `~=’ |",
"\3\9\9 and | or",
"\3\9unop ::= `-’ | not | `#’ | `~’",
"\4",
"Last update: Fri Jan 16 00:58:20 BRST 2015",
},
},
nil
